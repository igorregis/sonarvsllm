{"score":"70","reasoning":"The code is clean and follows standard Java conventions. However, it lacks documentation and the \u0027after\u0027 method is empty, which reduces its overall quality and readability.","tokens":216,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMS-","key":"quarkusio_quarkus:core/junit4-mock/src/main/java/org/junit/rules/ExternalResource.java","name":"ExternalResource.java","qualifier":"FIL","path":"core/junit4-mock/src/main/java/org/junit/rules/ExternalResource.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"8","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is clean, concise, and follows standard Java conventions. The class is well-defined with an abstract method, indicating it is meant to be extended. However, the class lacks comments and documentation, which could improve readability and understanding for other developers.","tokens":243,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMS8","key":"quarkusio_quarkus:core/junit4-mock/src/main/java/org/junit/runners/model/Statement.java","name":"Statement.java","qualifier":"FIL","path":"core/junit4-mock/src/main/java/org/junit/runners/model/Statement.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"9","bestValue":false},{"metric":"sqale_rating","value":"3.0","bestValue":false},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"10","reasoning":"The class is empty and lacks any functionality, documentation, or comments. It does not provide any insight into its intended use or purpose, making it difficult to evaluate its quality or readability.","tokens":212,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMTB","key":"quarkusio_quarkus:core/junit4-mock/src/main/java/org/junit/runner/Description.java","name":"Description.java","qualifier":"FIL","path":"core/junit4-mock/src/main/java/org/junit/runner/Description.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"5","bestValue":false},{"metric":"sqale_rating","value":"2.0","bestValue":false},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured and follows good practices for defining constants. It uses meaningful variable names, proper formatting, and includes comments for complex sections. The use of final and static keywords is appropriate. However, the class is quite large, which could be broken down for better maintainability. Overall, it is highly readable and of good quality.","tokens":2054,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOM","key":"quarkusio_quarkus:core/processor/src/main/java/io/quarkus/annotation/processor/Constants.java","name":"Constants.java","qualifier":"FIL","path":"core/processor/src/main/java/io/quarkus/annotation/processor/Constants.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"6","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.8","bestValue":false},{"metric":"lines","value":"142","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and easy to read. The use of interfaces and method signatures is clear. However, the class lacks detailed comments and documentation for the methods and parameters, which could improve readability and maintainability.","tokens":304,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOJ","key":"quarkusio_quarkus:core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ConfigDoc.java","name":"ConfigDoc.java","qualifier":"FIL","path":"core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ConfigDoc.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"16.7","bestValue":false},{"metric":"lines","value":"21","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good object-oriented principles. It uses meaningful class and method names, making it easy to understand. The use of constants and helper classes like JavaDocParser enhances readability. However, the code could benefit from more comments explaining the purpose of certain methods and classes. Additionally, the nested class structure, while logical, could be simplified for better readability.","tokens":898,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMN4","key":"quarkusio_quarkus:core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/MavenConfigDocBuilder.java","name":"MavenConfigDocBuilder.java","qualifier":"FIL","path":"core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/MavenConfigDocBuilder.java","language":"java","measures":[{"metric":"complexity","value":"11","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"4.3","bestValue":false},{"metric":"lines","value":"97","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"29","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, with clear method names and consistent formatting. It follows good practices such as encapsulation and the use of standard Java conventions. The use of interfaces and overrides is appropriate. However, the class could benefit from additional comments for better readability and understanding. The logic within methods is straightforward, but some methods could be simplified or broken down further for clarity.","tokens":1186,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOH","key":"quarkusio_quarkus:core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ConfigDocSection.java","name":"ConfigDocSection.java","qualifier":"FIL","path":"core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ConfigDocSection.java","language":"java","measures":[{"metric":"complexity","value":"38","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"9","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"174","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"43","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using constants, meaningful variable names, and comments. The use of requireNonNull for validation is a plus. However, the nested logic in the addSummaryTable method could be simplified for better readability. Overall, the code is clean and maintainable.","tokens":787,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOC","key":"quarkusio_quarkus:core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ConfigDocBuilder.java","name":"ConfigDocBuilder.java","qualifier":"FIL","path":"core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ConfigDocBuilder.java","language":"java","measures":[{"metric":"complexity","value":"15","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"14","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"7.8","bestValue":false},{"metric":"lines","value":"92","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"29","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using constants, private methods, and clear method names. The use of regular expressions and external libraries like Jsoup and JavaParser is appropriate. However, the code is quite lengthy and complex, which can make it harder to read and maintain. Some comments are provided, but more inline documentation could improve readability.","tokens":4264,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMN_","key":"quarkusio_quarkus:core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/JavaDocParser.java","name":"JavaDocParser.java","qualifier":"FIL","path":"core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/JavaDocParser.java","language":"java","measures":[{"metric":"complexity","value":"118","bestValue":false},{"metric":"code_smells","value":"19","bestValue":false},{"metric":"cognitive_complexity","value":"106","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"4.6","bestValue":false},{"metric":"lines","value":"547","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"259","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using try-with-resources and handling exceptions. The class and methods are well-documented with Javadoc comments. However, the class could benefit from more detailed comments within the methods to explain the logic further. Additionally, the use of a custom exception instead of RuntimeException could improve error handling.","tokens":612,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMN8","key":"quarkusio_quarkus:core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/FsMultiMap.java","name":"FsMultiMap.java","qualifier":"FIL","path":"core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/FsMultiMap.java","language":"java","measures":[{"metric":"complexity","value":"5","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"4","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"13.3","bestValue":false},{"metric":"lines","value":"61","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"14","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, with clear separation of concerns and appropriate use of annotations. The class and method names are descriptive, and the logic is straightforward. However, the compareTo method could be simplified for better readability, and the TODO comment indicates incomplete functionality. Overall, the code is maintainable and follows good practices.","tokens":1282,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOE","key":"quarkusio_quarkus:core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ConfigDocItem.java","name":"ConfigDocItem.java","qualifier":"FIL","path":"core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ConfigDocItem.java","language":"java","measures":[{"metric":"complexity","value":"45","bestValue":false},{"metric":"code_smells","value":"4","bestValue":false},{"metric":"cognitive_complexity","value":"27","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"5.0","bestValue":false},{"metric":"lines","value":"171","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"56","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using constants, utility methods, and clear comments. The use of static initializers for maps and patterns is efficient. However, the class is quite large and could benefit from being broken down into smaller, more focused classes or methods. Some methods are also quite complex and could be simplified for better readability.","tokens":4664,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOD","key":"quarkusio_quarkus:core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/DocGeneratorUtil.java","name":"DocGeneratorUtil.java","qualifier":"FIL","path":"core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/DocGeneratorUtil.java","language":"java","measures":[{"metric":"complexity","value":"105","bestValue":false},{"metric":"code_smells","value":"7","bestValue":false},{"metric":"cognitive_complexity","value":"140","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.5","bestValue":false},{"metric":"lines","value":"535","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"225","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and is easy to read. The class has clear responsibilities, and methods are concise. The use of constants and proper encapsulation is evident. However, the reasoning could be improved by adding more comments to explain the logic, especially in the getAnchorPrefix method.","tokens":633,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOF","key":"quarkusio_quarkus:core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ConfigDocGeneratedOutput.java","name":"ConfigDocGeneratedOutput.java","qualifier":"FIL","path":"core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ConfigDocGeneratedOutput.java","language":"java","measures":[{"metric":"complexity","value":"13","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"5","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"71","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"21","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good object-oriented principles. It uses meaningful variable names and includes comments where necessary. The use of standard Java libraries and adherence to conventions is evident. However, the class is quite large and could benefit from further modularization. Additionally, some methods could use more detailed comments to improve readability.","tokens":1720,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOB","key":"quarkusio_quarkus:core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ConfigDocKey.java","name":"ConfigDocKey.java","qualifier":"FIL","path":"core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ConfigDocKey.java","language":"java","measures":[{"metric":"complexity","value":"67","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"10","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.5","bestValue":false},{"metric":"lines","value":"273","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"60","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using meaningful method names and comments. The use of final for the class and proper exception handling with IOException are also positive aspects. However, the code could benefit from more detailed comments explaining the logic within methods and potentially breaking down larger methods for better readability.","tokens":531,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMN-","key":"quarkusio_quarkus:core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ConfigDocWriter.java","name":"ConfigDocWriter.java","qualifier":"FIL","path":"core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ConfigDocWriter.java","language":"java","measures":[{"metric":"complexity","value":"5","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"2","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"14.3","bestValue":false},{"metric":"lines","value":"48","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"9","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using meaningful method names and comments. The use of regex for string normalization is clear and concise. However, the extensive use of replaceAll could be optimized for readability and performance. The interface methods are clearly defined but lack documentation. Overall, the code is readable and of high quality but could benefit from minor improvements.","tokens":1080,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMN6","key":"quarkusio_quarkus:core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/DocFormatter.java","name":"DocFormatter.java","qualifier":"FIL","path":"core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/DocFormatter.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"7","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"6.3","bestValue":false},{"metric":"lines","value":"71","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"5","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and includes necessary methods like equals, hashCode, and toString. The use of final for immutability is good practice. However, the class could benefit from additional comments for better readability and understanding. Overall, it is clean and maintainable.","tokens":588,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOK","key":"quarkusio_quarkus:core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ConfigRootInfo.java","name":"ConfigRootInfo.java","qualifier":"FIL","path":"core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ConfigRootInfo.java","language":"java","measures":[{"metric":"complexity","value":"14","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"4","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"70","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"16","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows standard Java conventions. The use of enums and the comparator is appropriate. The comments are helpful, but the comparator logic could be simplified for better readability. The toString method is well-implemented, and the getters are straightforward. Overall, the code is clear but could benefit from minor refactoring to improve readability.","tokens":689,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOG","key":"quarkusio_quarkus:core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ConfigPhase.java","name":"ConfigPhase.java","qualifier":"FIL","path":"core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ConfigPhase.java","language":"java","measures":[{"metric":"complexity","value":"12","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"4.3","bestValue":false},{"metric":"lines","value":"81","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"18","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using constants, meaningful variable names, and comments for clarity. The use of static imports and utility methods enhances readability. However, the complexity of the format method and nested if-else conditions could be simplified for better readability. Overall, the code is maintainable and understandable.","tokens":1861,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMN5","key":"quarkusio_quarkus:core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/SummaryTableDocFormatter.java","name":"SummaryTableDocFormatter.java","qualifier":"FIL","path":"core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/SummaryTableDocFormatter.java","language":"java","measures":[{"metric":"complexity","value":"30","bestValue":false},{"metric":"code_smells","value":"7","bestValue":false},{"metric":"cognitive_complexity","value":"32","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.1","bestValue":false},{"metric":"lines","value":"158","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"56","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as encapsulation and clear method naming. The use of final for the class and fields enhances immutability. However, the class lacks comments, which could improve readability and maintainability. Additionally, the toString method has a minor formatting issue with an extra comma.","tokens":715,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOI","key":"quarkusio_quarkus:core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ScannedConfigDocsItemHolder.java","name":"ScannedConfigDocsItemHolder.java","qualifier":"FIL","path":"core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ScannedConfigDocsItemHolder.java","language":"java","measures":[{"metric":"complexity","value":"10","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"60","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"14","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear method names and concise documentation. Exception handling is consistent, and the use of Java NIO is appropriate. The class adheres to single responsibility principle. Minor improvements could be made in the documentation for better clarity and ensuring thread safety in concurrent environments.","tokens":827,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMN9","key":"quarkusio_quarkus:core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/FsMap.java","name":"FsMap.java","qualifier":"FIL","path":"core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/FsMap.java","language":"java","measures":[{"metric":"complexity","value":"11","bestValue":false},{"metric":"code_smells","value":"4","bestValue":false},{"metric":"cognitive_complexity","value":"16","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.8","bestValue":false},{"metric":"lines","value":"96","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"33","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using constants, clear method names, and comments for documentation. The use of streams and collections is appropriate. However, the class is quite large and could benefit from further modularization. Some methods are lengthy and could be broken down into smaller, more manageable pieces. Overall, the readability is good but could be improved with more concise methods.","tokens":2781,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMN3","key":"quarkusio_quarkus:core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ConfigDocItemScanner.java","name":"ConfigDocItemScanner.java","qualifier":"FIL","path":"core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ConfigDocItemScanner.java","language":"java","measures":[{"metric":"complexity","value":"42","bestValue":false},{"metric":"code_smells","value":"5","bestValue":false},{"metric":"cognitive_complexity","value":"76","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"3.1","bestValue":false},{"metric":"lines","value":"292","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"117","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows standard Java conventions. The use of interfaces and default methods is appropriate. The comments are clear and helpful. However, the readability could be slightly improved by adding more detailed comments and possibly breaking down the compare method for better clarity.","tokens":416,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOA","key":"quarkusio_quarkus:core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ConfigDocElement.java","name":"ConfigDocElement.java","qualifier":"FIL","path":"core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ConfigDocElement.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"4","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"12.5","bestValue":false},{"metric":"lines","value":"36","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"7","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows standard Java conventions, and includes appropriate documentation. The use of annotations and retention policies is clear and concise. The only minor issue is the comment could be slightly more detailed for complete clarity.","tokens":323,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKr","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/annotations/Weak.java","name":"Weak.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/annotations/Weak.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"18.2","bestValue":false},{"metric":"lines","value":"16","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and includes Javadoc comments for clarity. The interface is simple and to the point, making it easy to understand. However, the Javadoc could be slightly more detailed, and there is a minor typo in the last line (\u0027classh\u0027 instead of \u0027class\u0027).","tokens":340,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKp","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/annotations/BuildProducer.java","name":"BuildProducer.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/annotations/BuildProducer.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"50.0","bestValue":false},{"metric":"lines","value":"20","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, uses appropriate annotations, and includes Javadoc comments for clarity. The use of nested annotations is clear and follows best practices. The only minor issue is the lack of more detailed comments or examples of usage, which could improve readability for less experienced developers.","tokens":430,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKw","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/annotations/Produce.java","name":"Produce.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/annotations/Produce.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"23.1","bestValue":false},{"metric":"lines","value":"40","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, uses appropriate annotations, and includes clear documentation. The use of nested annotations is correctly implemented. The only minor issue is the lack of more detailed comments or examples for usage, which could improve readability for less experienced developers.","tokens":437,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKv","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/annotations/ProduceWeak.java","name":"ProduceWeak.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/annotations/ProduceWeak.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"23.1","bestValue":false},{"metric":"lines","value":"40","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, uses clear and concise documentation, and follows standard Java conventions. The use of annotations and generics is appropriate and enhances readability. The only minor issue is the lack of more detailed examples or usage scenarios in the comments, which could help in understanding the practical application of the annotation.","tokens":498,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKy","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/annotations/BuildSteps.java","name":"BuildSteps.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/annotations/BuildSteps.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"50.0","bestValue":false},{"metric":"lines","value":"38","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear documentation and appropriate use of annotations. The comments are detailed and provide a good understanding of the functionality. The naming conventions are consistent and meaningful. The only minor issue is the length of the comments, which could be slightly more concise.","tokens":793,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKs","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/annotations/Record.java","name":"Record.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/annotations/Record.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"70.5","bestValue":false},{"metric":"lines","value":"68","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, uses appropriate annotations, and includes a clear Javadoc comment. It follows standard Java conventions and is easy to read. However, the class is very simple and does not demonstrate complex logic or error handling, which limits the evaluation of overall quality.","tokens":302,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKu","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/annotations/Overridable.java","name":"Overridable.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/annotations/Overridable.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"10.0","bestValue":false},{"metric":"lines","value":"15","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, uses clear and concise comments, and follows standard Java conventions. The enum is simple and easy to understand. However, the class file could benefit from additional context or usage examples to achieve a perfect score.","tokens":285,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKt","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/annotations/ExecutionTime.java","name":"ExecutionTime.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/annotations/ExecutionTime.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"37.5","bestValue":false},{"metric":"lines","value":"16","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear documentation and proper use of annotations. The comments are detailed and provide a good understanding of the purpose and usage of the class. The imports are organized, and the code follows standard Java conventions. The only minor issue is the length of the comments, which could be slightly more concise.","tokens":1069,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKq","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/annotations/BuildStep.java","name":"BuildStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/annotations/BuildStep.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"67.2","bestValue":false},{"metric":"lines","value":"80","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, uses appropriate annotations, and includes Javadoc comments for clarity. The use of nested annotations is correctly implemented. The only minor issue is the lack of more detailed comments or examples of usage, which could improve readability for less experienced developers.","tokens":412,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKx","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/annotations/Consume.java","name":"Consume.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/annotations/Consume.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"25.0","bestValue":false},{"metric":"lines","value":"40","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, uses meaningful names, and includes comments for clarity. The use of annotations and logging is appropriate. However, the deprecated field could be better handled, and the class could benefit from additional error handling and validation. Overall, it is readable and maintains good coding practices.","tokens":556,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKa","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/JniProcessor.java","name":"JniProcessor.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/JniProcessor.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"2","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"5.7","bestValue":false},{"metric":"lines","value":"49","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"4","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, uses appropriate annotations, and includes a clear Javadoc comment. The naming conventions are consistent and meaningful. However, the class is relatively simple and does not demonstrate complex logic or error handling, which limits the assessment of overall quality.","tokens":350,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMMJ","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/ConfigBuildTimeConfig.java","name":"ConfigBuildTimeConfig.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/ConfigBuildTimeConfig.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"30.8","bestValue":false},{"metric":"lines","value":"18","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, with clear comments and appropriate use of access modifiers. The class and method names are descriptive, and the code adheres to standard Java conventions. However, the comment about the potential use of a Map\u003cString, Object\u003e suggests a possible future enhancement that could have been implemented for better flexibility. Overall, the code is readable and maintainable.","tokens":442,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMK0","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/QuarkusClassVisitor.java","name":"QuarkusClassVisitor.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/QuarkusClassVisitor.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"26.1","bestValue":false},{"metric":"lines","value":"33","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"4","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, with clear class and method definitions. The use of comments and author tags enhances readability. The class adheres to good object-oriented principles by extending ClassWriter and providing constructors. However, the code could benefit from additional comments explaining the logic behind the overridden getClassLoader method.","tokens":384,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMMO","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/QuarkusClassWriter.java","name":"QuarkusClassWriter.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/QuarkusClassWriter.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"21.1","bestValue":false},{"metric":"lines","value":"28","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"3","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, uses meaningful class and variable names, and leverages immutability with Collections.unmodifiableMap. It follows good practices by making the class final and the field final. However, it lacks comments and JavaDoc, which could improve readability and maintainability.","tokens":324,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIk","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/LogCategoryMinLevelDefaultsBuildItem.java","name":"LogCategoryMinLevelDefaultsBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/LogCategoryMinLevelDefaultsBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"18","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and includes Javadoc comments for methods. The use of final for the class and private final for the field enhances immutability. The deprecation notice is clear. However, the @return tag in the deprecated method\u0027s Javadoc is empty, which slightly detracts from the overall quality.","tokens":399,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJH","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/AdditionalApplicationArchiveBuildItem.java","name":"AdditionalApplicationArchiveBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/AdditionalApplicationArchiveBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"15.0","bestValue":false},{"metric":"lines","value":"31","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"3","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear class definitions and appropriate use of Java collections. The comments are helpful and provide context. The use of final for immutability is good practice. However, the class could benefit from more detailed JavaDoc comments for methods and parameters. Overall, the readability and quality are high.","tokens":803,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJG","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/TransformedClassesBuildItem.java","name":"TransformedClassesBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/TransformedClassesBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"14","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"4","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"7.4","bestValue":false},{"metric":"lines","value":"90","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"22","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear and concise method names and comments that explain the purpose of the class and its methods. The use of immutability and optional types enhances readability and safety. The only minor issue is the potential verbosity due to the many \u0027with\u0027 methods, but this is a common pattern in builder-style classes.","tokens":1305,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJO","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/InitTaskBuildItem.java","name":"InitTaskBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/InitTaskBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"18","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"15.4","bestValue":false},{"metric":"lines","value":"136","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"25","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear and concise methods. The use of final for immutability is good practice. The comments are helpful for understanding the purpose of the excludeFromDevCL field. The deprecation annotation is correctly used. However, the class could benefit from additional JavaDoc comments for methods and fields to improve readability further.","tokens":524,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJr","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/GeneratedResourceBuildItem.java","name":"GeneratedResourceBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/GeneratedResourceBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"6","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"11.8","bestValue":false},{"metric":"lines","value":"46","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"10","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and is easy to read. The class is final, indicating it is not meant to be subclassed, which is good practice for immutable objects. The use of a constructor to initialize the final field is appropriate. However, the class lacks JavaDoc comments, which would improve readability and maintainability.","tokens":327,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMI6","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/AdditionalClassLoaderResourcesBuildItem.java","name":"AdditionalClassLoaderResourcesBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/AdditionalClassLoaderResourcesBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"20","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear documentation and proper use of Java conventions. The class is final, indicating immutability, and the use of Assert ensures that the constructor parameter is not null. The methods are concise and self-explanatory. The only minor improvement could be more detailed error handling or logging for the case when multiple formatters are enabled.","tokens":487,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIa","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/LogFileFormatBuildItem.java","name":"LogFileFormatBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/LogFileFormatBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"31.8","bestValue":false},{"metric":"lines","value":"37","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is clean, well-documented, and follows standard Java conventions. The class is simple and extends another class, indicating good use of inheritance. However, it lacks any methods or additional functionality, which limits its complexity and utility.","tokens":280,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJW","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/ApplicationStartBuildItem.java","name":"ApplicationStartBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/ApplicationStartBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"33.3","bestValue":false},{"metric":"lines","value":"13","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, with clear and concise variable names and methods. The use of final for class and fields enhances immutability. The class is well-documented with references to related classes. However, the class lacks detailed comments explaining the purpose and usage of the fields and methods, which could improve readability and maintainability.","tokens":362,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMI-","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/DevServicesNativeConfigResultBuildItem.java","name":"DevServicesNativeConfigResultBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/DevServicesNativeConfigResultBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"5.6","bestValue":false},{"metric":"lines","value":"27","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"4","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear and concise comments explaining the purpose of each method and field. The use of Optional for nullable fields is a good practice, and the class adheres to standard Java conventions. The only minor issue is the lack of detailed comments on some methods, but overall, the readability and quality are excellent.","tokens":770,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIy","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/LaunchModeBuildItem.java","name":"LaunchModeBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/LaunchModeBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"7","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"26.9","bestValue":false},{"metric":"lines","value":"80","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"11","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear and concise comments explaining the purpose and usage of the class. The use of final for the class and the field ensures immutability, and the constructor enforces non-null values. The naming conventions are followed, and the code is easy to read and understand. Minor improvement could be made by adding more detailed error messages.","tokens":480,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIv","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/FeatureBuildItem.java","name":"FeatureBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/FeatureBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"38.5","bestValue":false},{"metric":"lines","value":"39","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"3","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and is easy to read. The class is final, indicating immutability, and the variable is private and final, ensuring encapsulation. The method names are clear and descriptive. However, the class could benefit from additional comments or documentation for better understanding.","tokens":318,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJL","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/PreloadClassesEnabledBuildItem.java","name":"PreloadClassesEnabledBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/PreloadClassesEnabledBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.3","bestValue":false},{"metric":"lines","value":"19","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows Java conventions, and includes Javadoc comments for methods. The use of Objects.requireNonNull ensures null safety for groupId. The class is final, indicating immutability, which is good practice. The only minor issue is the lack of detailed comments for the constructor parameters.","tokens":499,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIW","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/IndexDependencyBuildItem.java","name":"IndexDependencyBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/IndexDependencyBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"5","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"16.7","bestValue":false},{"metric":"lines","value":"50","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"7","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear documentation and appropriate use of Java conventions. The class and methods are well-named, making the purpose and functionality clear. The use of builder pattern enhances readability and maintainability. However, the code could benefit from additional comments within methods to explain complex logic, and some error messages could be more descriptive.","tokens":1060,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJo","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/HotDeploymentWatchedFileBuildItem.java","name":"HotDeploymentWatchedFileBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/HotDeploymentWatchedFileBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"17","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"4","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"25.8","bestValue":false},{"metric":"lines","value":"130","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"24","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows Java conventions, and includes Javadoc comments for methods and the class. The use of final for the class and method parameters enhances immutability. The only minor issue is the lack of more detailed comments or documentation, but overall, the code is highly readable and of high quality.","tokens":400,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIl","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/PreloadClassBuildItem.java","name":"PreloadClassBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/PreloadClassBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"29.4","bestValue":false},{"metric":"lines","value":"29","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows Java conventions, and is easy to read. It uses meaningful variable names, proper encapsulation, and includes necessary overrides for equals and hashCode. The use of final for immutability is a good practice. The only minor improvement could be adding JavaDoc comments for better documentation.","tokens":672,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJf","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/ConfigClassBuildItem.java","name":"ConfigClassBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/ConfigClassBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"16","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"4","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"91","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"21","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, follows standard Java conventions, and is easy to read. The class is final, indicating immutability, and the use of constructors is clear. However, the class lacks comments and documentation, which could improve readability and maintainability.","tokens":322,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIq","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/ExtensionSslNativeSupportBuildItem.java","name":"ExtensionSslNativeSupportBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/ExtensionSslNativeSupportBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"22","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"3","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and is easy to read. The class is final, indicating it is not meant to be subclassed, which is good for immutability. The variable is private and final, ensuring encapsulation and immutability. The constructor and getter method are straightforward. However, the class could benefit from JavaDoc comments for better documentation.","tokens":320,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIf","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/JavaLibraryPathAdditionalPathBuildItem.java","name":"JavaLibraryPathAdditionalPathBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/JavaLibraryPathAdditionalPathBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"17","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows good naming conventions, and includes proper use of final and Optional. The class is well-documented with a clear purpose. The use of Objects.requireNonNull ensures null safety. The only minor improvement could be adding more detailed comments or JavaDoc for the constructor parameters.","tokens":460,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJF","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/ExcludeDependencyBuildItem.java","name":"ExcludeDependencyBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/ExcludeDependencyBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"5","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"7.1","bestValue":false},{"metric":"lines","value":"39","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"7","bestValue":false}]}}}
{"score":"90","reasoning":"The code is concise, well-documented, and follows standard Java conventions. The class is final, indicating it is not meant to be extended, which is appropriate for a marker class. The use of inheritance from EmptyBuildItem is clear. However, the class could benefit from additional comments or documentation on its usage context.","tokens":293,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJp","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/RuntimeConfigSetupCompleteBuildItem.java","name":"RuntimeConfigSetupCompleteBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/RuntimeConfigSetupCompleteBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"33.3","bestValue":false},{"metric":"lines","value":"11","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows good practices, and is easy to read. It uses appropriate logging, synchronization, and generics. The class and method names are clear and descriptive. However, the class could benefit from additional comments to explain its purpose and usage.","tokens":415,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIj","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/QuarkusBuildCloseablesBuildItem.java","name":"QuarkusBuildCloseablesBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/QuarkusBuildCloseablesBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"3","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"34","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"7","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows good naming conventions, and has clear separation of concerns. The use of final for class and fields ensures immutability where appropriate. Constructors are overloaded to handle different initialization scenarios. However, the class lacks JavaDoc comments, which would improve readability and maintainability.","tokens":416,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJY","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/MainBytecodeRecorderBuildItem.java","name":"MainBytecodeRecorderBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/MainBytecodeRecorderBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"29","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"6","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows good naming conventions, and includes Javadoc comments for class-level documentation. The use of Objects.requireNonNull ensures null safety. The class is final, indicating immutability, which is a good practice. The only minor issue is the lack of method-level comments, but the methods are simple and self-explanatory.","tokens":399,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJv","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/NativeImageFeatureBuildItem.java","name":"NativeImageFeatureBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/NativeImageFeatureBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"5.9","bestValue":false},{"metric":"lines","value":"29","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"3","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, concise, and follows standard Java conventions. The class is final, indicating immutability, and the use of a constructor to initialize the config map is appropriate. The only minor issue is the lack of null checks or validation for the config map, which could improve robustness.","tokens":333,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJc","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/DevServicesLauncherConfigResultBuildItem.java","name":"DevServicesLauncherConfigResultBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/DevServicesLauncherConfigResultBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"7.7","bestValue":false},{"metric":"lines","value":"22","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and includes a clear Javadoc comment. The class is final, indicating immutability, and the use of a private final field ensures thread safety. The constructor and getter method are straightforward. However, the class could benefit from additional comments or documentation for the constructor and getter method.","tokens":350,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIo","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/ConfigurationBuildItem.java","name":"ConfigurationBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/ConfigurationBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"7.7","bestValue":false},{"metric":"lines","value":"20","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear class and method definitions. The use of comments and Javadoc provides good context and explanation. The naming conventions are consistent and descriptive. The only minor issue is the length of the class name, which could be slightly shorter for better readability.","tokens":409,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJP","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/SuppressNonRuntimeConfigChangedWarningBuildItem.java","name":"SuppressNonRuntimeConfigChangedWarningBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/SuppressNonRuntimeConfigChangedWarningBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"31.3","bestValue":false},{"metric":"lines","value":"24","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and is easy to read. The class is final, indicating immutability, and the use of descriptive variable and method names enhances clarity. However, the class lacks comments and JavaDoc, which could improve understanding for future maintainers.","tokens":365,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIc","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/QuarkusApplicationClassBuildItem.java","name":"QuarkusApplicationClassBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/QuarkusApplicationClassBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"21","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"3","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and is easy to read. The class is final, indicating immutability, and the use of descriptive names enhances clarity. However, the class lacks comments on individual methods and fields, which could improve understanding for future maintainers.","tokens":358,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJe","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/StaticInitConfigBuilderBuildItem.java","name":"StaticInitConfigBuilderBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/StaticInitConfigBuilderBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"6.7","bestValue":false},{"metric":"lines","value":"23","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"3","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, follows good naming conventions, and includes proper logging and error handling. The use of final for constants and immutability for the appModel attribute is good practice. However, the validateAndGet method could benefit from additional comments to explain the logic, and the switch statement could be refactored for better readability.","tokens":504,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIX","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/AppModelProviderBuildItem.java","name":"AppModelProviderBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/AppModelProviderBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"7","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"4","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"38","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"9","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear and concise comments explaining the purpose and usage of the class. The use of final and unmodifiable maps ensures immutability, which is a good practice. The naming conventions are consistent and descriptive. The only minor improvement could be to add null checks in the constructor to ensure robustness.","tokens":652,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJC","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/ChangedClassesBuildItem.java","name":"ChangedClassesBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/ChangedClassesBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"5","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"17.9","bestValue":false},{"metric":"lines","value":"55","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"8","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows standard Java conventions, and includes essential methods like equals and hashCode. The use of final for class and variables enhances immutability. The only minor improvement could be adding JavaDoc comments for better documentation.","tokens":434,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIp","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/ConfigPropertiesBuildItem.java","name":"ConfigPropertiesBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/ConfigPropertiesBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"9","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"4","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"42","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"11","bestValue":false}]}}}
{"score":"90","reasoning":"The code is clean, well-structured, and follows standard Java conventions. The class is simple and straightforward, with clear naming and a single responsibility. The use of \u0027final\u0027 for the class and the field enhances immutability. However, the class could benefit from JavaDoc comments for better documentation.","tokens":303,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJu","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/MainClassBuildItem.java","name":"MainClassBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/MainClassBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"17","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and includes proper documentation. The use of @Deprecated annotation is appropriate. The class is final, ensuring immutability. However, the reasoning behind the deprecation could be more detailed, and there could be more comments explaining the purpose of the class and its methods.","tokens":386,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJb","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/JniBuildItem.java","name":"JniBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/JniBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"10.5","bestValue":false},{"metric":"lines","value":"30","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"3","bestValue":false}]}}}
{"score":"85","reasoning":"The code is concise and follows standard Java conventions. The class is well-named and extends a presumably relevant superclass. However, it lacks comments and documentation, which could help in understanding the purpose and usage of the class.","tokens":246,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIh","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/NativeImageEnableAllCharsetsBuildItem.java","name":"NativeImageEnableAllCharsetsBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/NativeImageEnableAllCharsetsBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"8","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, concise, and follows standard Java conventions. The class is final, indicating immutability, and the use of a constructor to set the final field is appropriate. The naming conventions are clear and descriptive. However, the class could benefit from JavaDoc comments on the constructor and method for better documentation.","tokens":327,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJE","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/SnapStartDefaultValueBuildItem.java","name":"SnapStartDefaultValueBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/SnapStartDefaultValueBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.3","bestValue":false},{"metric":"lines","value":"19","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows Java conventions, and includes proper documentation. The use of final for immutability and the assertion for null checks enhance code quality. The only minor improvement could be more detailed comments or additional validation.","tokens":405,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJa","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/ConfigurationTypeBuildItem.java","name":"ConfigurationTypeBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/ConfigurationTypeBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"31.6","bestValue":false},{"metric":"lines","value":"33","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"3","bestValue":false}]}}}
{"score":"90","reasoning":"The code is clean, concise, and follows good practices such as making the class final and providing a private constructor to prevent instantiation. The use of a static final instance is also a good design choice. However, the class lacks comments explaining the purpose of the INSTANCE field, which could improve readability.","tokens":309,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIz","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/SnapStartEnabledBuildItem.java","name":"SnapStartEnabledBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/SnapStartEnabledBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"22.2","bestValue":false},{"metric":"lines","value":"15","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear and concise documentation. The use of assertions ensures that the parameters are validated, enhancing robustness. The class and method names are descriptive, and the code adheres to standard Java conventions. The only minor improvement could be more detailed comments on the purpose of the class in the context of the application.","tokens":533,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIg","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/RunTimeConfigurationDefaultBuildItem.java","name":"RunTimeConfigurationDefaultBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/RunTimeConfigurationDefaultBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"30.0","bestValue":false},{"metric":"lines","value":"48","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"7","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, concise, and follows standard Java conventions. The class is well-documented with a clear Javadoc comment explaining its purpose. The use of inheritance is appropriate. However, the class is very minimal and could benefit from additional context or functionality to fully assess its quality.","tokens":320,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJU","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/AllowJNDIBuildItem.java","name":"AllowJNDIBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/AllowJNDIBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"50.0","bestValue":false},{"metric":"lines","value":"13","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good object-oriented principles. It uses meaningful class and method names, making it easy to understand. Exception handling is present, and the use of final for immutability is a good practice. However, the code could benefit from additional comments to explain the purpose of each constructor and the overall class functionality.","tokens":484,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIw","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/ConsoleCommandBuildItem.java","name":"ConsoleCommandBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/ConsoleCommandBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"7","bestValue":false},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"40","bestValue":false},{"metric":"sqale_rating","value":"2.0","bestValue":false},{"metric":"statements","value":"6","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows good naming conventions, and includes Javadoc comments for methods and the class. The use of final for immutability and the Assert class for null checks are good practices. However, the class could benefit from additional comments explaining the context and purpose of the class in the larger application.","tokens":431,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJg","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/StreamingLogHandlerBuildItem.java","name":"StreamingLogHandlerBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/StreamingLogHandlerBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"25.0","bestValue":false},{"metric":"lines","value":"35","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows Java conventions, and is easy to read. It uses Optional to handle potential null values, which is a good practice. The class is final, indicating it is not meant to be subclassed, and constants are used for default values. The only minor issue is the lack of JavaDoc comments for the class and its methods, which could improve readability and maintainability.","tokens":379,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJT","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/ApplicationInfoBuildItem.java","name":"ApplicationInfoBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/ApplicationInfoBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"27","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"4","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear comments explaining the purpose of the class. The class and its methods are concise and follow good naming conventions. The use of final for fields ensures immutability. However, the class could benefit from additional error handling or validation for the constructor parameters.","tokens":387,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHu","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/GeneratedFileSystemResourceBuildItem.java","name":"GeneratedFileSystemResourceBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/GeneratedFileSystemResourceBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"15.8","bestValue":false},{"metric":"lines","value":"28","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"4","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and includes clear documentation. The use of interfaces and inheritance is appropriate. However, the method __static$$init() could use a more descriptive name, and the exception message in get() could be more informative.","tokens":470,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMI3","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/RawCommandLineArgumentsBuildItem.java","name":"RawCommandLineArgumentsBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/RawCommandLineArgumentsBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"23.1","bestValue":false},{"metric":"lines","value":"39","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"3","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and includes a clear Javadoc comment. The class is simple and focused on a single responsibility. However, it could benefit from additional comments explaining the purpose of the constructor and the getDetector method for better readability.","tokens":330,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJs","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/IOThreadDetectorBuildItem.java","name":"IOThreadDetectorBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/IOThreadDetectorBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"7.7","bestValue":false},{"metric":"lines","value":"21","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, concise, and follows good naming conventions. The use of a final class and a private final field ensures immutability. The class and method documentation is clear. However, the class could benefit from additional comments explaining the purpose of the predicate in more detail.","tokens":330,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIt","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/ApplicationClassPredicateBuildItem.java","name":"ApplicationClassPredicateBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/ApplicationClassPredicateBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"7.7","bestValue":false},{"metric":"lines","value":"23","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and includes Javadoc comments for public methods, enhancing readability. The use of final for the class and fields ensures immutability where appropriate. The logic is clear and concise. However, the \u0027temp class\u0027 comment is unnecessary and could be removed. Overall, the code is of high quality and easy to understand.","tokens":697,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIi","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/ApplicationArchivesBuildItem.java","name":"ApplicationArchivesBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/ApplicationArchivesBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"10","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"5","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"16.7","bestValue":false},{"metric":"lines","value":"77","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"17","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and includes Javadoc comments for class and methods. The use of final for immutability and proper null checks with Assert are good practices. However, the class could benefit from additional comments explaining the logic in more detail, and the reasoning behind certain design choices.","tokens":480,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJN","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/LogSyslogFormatBuildItem.java","name":"LogSyslogFormatBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/LogSyslogFormatBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"31.8","bestValue":false},{"metric":"lines","value":"37","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, follows Java conventions, and includes clear documentation. The class and method names are descriptive, and the use of interfaces is appropriate. However, the methods throw IllegalStateException without explanation, which could be improved for better clarity.","tokens":398,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJk","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/ShutdownContextBuildItem.java","name":"ShutdownContextBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/ShutdownContextBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"4.2","bestValue":false},{"metric":"lines","value":"32","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"4","bestValue":false}]}}}
{"score":"85","reasoning":"The code is concise and follows standard Java conventions. The use of Javadoc for deprecation is clear, and the class is well-structured. However, the class lacks functionality and context, which limits its overall quality and readability.","tokens":287,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJV","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/EnableAllSecurityServicesBuildItem.java","name":"EnableAllSecurityServicesBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/EnableAllSecurityServicesBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"16.7","bestValue":false},{"metric":"lines","value":"12","bestValue":false},{"metric":"sqale_rating","value":"2.0","bestValue":false},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, uses meaningful variable names, and includes comments for clarity. The use of Optional is appropriate for handling the presence or absence of the configuration. However, the class could benefit from additional JavaDoc comments for methods to improve readability further.","tokens":380,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJB","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/SslNativeConfigBuildItem.java","name":"SslNativeConfigBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/SslNativeConfigBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"6","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"2","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"5.3","bestValue":false},{"metric":"lines","value":"28","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"4","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, uses clear naming conventions, and includes Javadoc comments for class and methods, enhancing readability. The use of standard Java libraries and Quarkus-specific classes is appropriate. However, the reasoning could be improved by adding more detailed comments within the method implementations to explain the logic further.","tokens":521,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIb","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/DevServicesSharedNetworkBuildItem.java","name":"DevServicesSharedNetworkBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/DevServicesSharedNetworkBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"21.4","bestValue":false},{"metric":"lines","value":"38","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"6","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows good naming conventions, and includes a clear Javadoc comment. The use of generics and final keyword enhances readability and immutability. However, it lacks error handling and could benefit from additional comments for better clarity.","tokens":337,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMI2","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/RunTimeConfigurationProxyBuildItem.java","name":"RunTimeConfigurationProxyBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/RunTimeConfigurationProxyBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"7.7","bestValue":false},{"metric":"lines","value":"21","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and is easy to read. The class and variable names are descriptive, and the purpose of the class is clearly documented. The only minor issue is the lack of additional comments or documentation for the constructor and methods, which could improve readability further.","tokens":349,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMI0","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/GeneratedNativeImageClassBuildItem.java","name":"GeneratedNativeImageClassBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/GeneratedNativeImageClassBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"5.9","bestValue":false},{"metric":"lines","value":"25","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"4","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and is easy to read. The class is final, indicating it is not meant to be subclassed, which is good practice for immutable objects. The use of a constructor to initialize the final field is appropriate. However, the class could benefit from JavaDoc comments to improve understandability for future maintainers.","tokens":329,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIm","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/ShutdownListenerBuildItem.java","name":"ShutdownListenerBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/ShutdownListenerBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"18","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and includes necessary validations. The use of final for fields ensures immutability, and the class is well-documented through method names. However, the class could benefit from additional comments for clarity and potential edge case handling in the constructor.","tokens":450,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJj","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/GeneratedClassBuildItem.java","name":"GeneratedClassBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/GeneratedClassBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"7","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"43","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"11","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear comments explaining the purpose of each field and method. The use of a builder pattern enhances readability and maintainability. The class adheres to good object-oriented principles and uses appropriate Java features. However, the code could benefit from additional validation and error handling in some constructors.","tokens":1874,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJM","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/BytecodeTransformerBuildItem.java","name":"BytecodeTransformerBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/BytecodeTransformerBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"28","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"2","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"17.4","bestValue":false},{"metric":"lines","value":"220","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"54","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as immutability and clear separation of concerns. The use of deprecation annotations and Javadoc comments enhances readability and maintainability. However, the presence of multiple deprecated methods and constructors could be confusing. The code could benefit from additional inline comments to explain complex logic.","tokens":983,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJi","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/DevServicesAdditionalConfigBuildItem.java","name":"DevServicesAdditionalConfigBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/DevServicesAdditionalConfigBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"12","bestValue":false},{"metric":"code_smells","value":"14","bestValue":false},{"metric":"cognitive_complexity","value":"6","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"19.8","bestValue":false},{"metric":"lines","value":"119","bestValue":false},{"metric":"sqale_rating","value":"2.0","bestValue":false},{"metric":"statements","value":"23","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, concise, and follows good Java conventions. The class is final, indicating it is not meant to be extended, which is appropriate for a build item. The use of a constructor to initialize the executor and a getter method to access it is clear and straightforward. However, the class could benefit from additional comments or documentation for the constructor and getter method.","tokens":337,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIx","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/ExecutorBuildItem.java","name":"ExecutorBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/ExecutorBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"7.7","bestValue":false},{"metric":"lines","value":"22","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, concise, and follows standard Java conventions. The class is final, indicating immutability, and the use of a private final field ensures thread safety. The constructor and getter method are straightforward. However, the class lacks JavaDoc comments for the constructor and getter method, which could improve readability.","tokens":320,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJn","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/ApplicationIndexBuildItem.java","name":"ApplicationIndexBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/ApplicationIndexBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"7.7","bestValue":false},{"metric":"lines","value":"22","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, follows Java conventions, and includes Javadoc for the class. The use of \u0027final\u0027 for the class and fields enhances immutability. However, the class could benefit from additional comments explaining the purpose of each method and the overall class functionality. The naming conventions are clear and appropriate.","tokens":365,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHt","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/RunTimeConfigBuilderBuildItem.java","name":"RunTimeConfigBuilderBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/RunTimeConfigBuilderBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"6.7","bestValue":false},{"metric":"lines","value":"23","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"3","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows Java conventions, and is easy to read. The use of final for the class and private final for the field ensures immutability. The constructors and methods are clear and concise. The only minor improvement could be adding more detailed comments or JavaDoc for the methods.","tokens":386,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMI7","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/AdditionalIndexedClassesBuildItem.java","name":"AdditionalIndexedClassesBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/AdditionalIndexedClassesBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"11.1","bestValue":false},{"metric":"lines","value":"28","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"3","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and includes Javadoc comments for the class and method. The use of generics and final keyword enhances readability and maintainability. However, the class could benefit from additional comments explaining the purpose of the provider field and the builder method\u0027s parameters.","tokens":426,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJI","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/AnnotationProxyBuildItem.java","name":"AnnotationProxyBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/AnnotationProxyBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"19.0","bestValue":false},{"metric":"lines","value":"35","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and is easy to read. The class is final, indicating immutability, and the use of a constructor to initialize the final field is good practice. The naming conventions are clear and descriptive. However, the class lacks JavaDoc comments, which would improve readability and maintainability.","tokens":343,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJt","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/StaticBytecodeRecorderBuildItem.java","name":"StaticBytecodeRecorderBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/StaticBytecodeRecorderBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"18","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is clean, well-structured, and follows standard Java conventions. The class is simple and its purpose is clear. However, it lacks comments and documentation, which could improve readability and maintainability.","tokens":285,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIZ","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/ApplicationClassNameBuildItem.java","name":"ApplicationClassNameBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/ApplicationClassNameBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"16","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and is easy to read. The class is final, indicating immutability, and the use of generics is appropriate. The naming conventions are clear and descriptive. However, the class lacks JavaDoc comments, which could improve readability and maintainability.","tokens":320,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIe","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/ContextHandlerBuildItem.java","name":"ContextHandlerBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/ContextHandlerBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"18","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear comments explaining the purpose of the class and its methods. The use of final for the class and the private final for the closeTask variable ensures immutability, which is good practice. The naming conventions are clear and follow standard Java conventions. The only minor improvement could be more detailed comments on the methods, but overall, the code is highly readable and of good quality.","tokens":464,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJD","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/RuntimeApplicationShutdownBuildItem.java","name":"RuntimeApplicationShutdownBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/RuntimeApplicationShutdownBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"27.8","bestValue":false},{"metric":"lines","value":"30","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good object-oriented principles. It uses appropriate design patterns, such as the Builder pattern, and includes clear method names and comments. However, the presence of deprecated methods and the potential complexity of handling file systems and paths could be simplified or better documented. Overall, it is readable and maintainable but could benefit from some refactoring.","tokens":1529,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMId","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/ArchiveRootBuildItem.java","name":"ArchiveRootBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/ArchiveRootBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"23","bestValue":false},{"metric":"code_smells","value":"17","bestValue":false},{"metric":"cognitive_complexity","value":"10","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"16.2","bestValue":false},{"metric":"lines","value":"185","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"46","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows good naming conventions, and uses synchronization to handle the cached status. The use of final for the class and the isDockerWorking field ensures immutability where appropriate. However, the class could benefit from additional comments to improve readability and maintainability.","tokens":347,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIn","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/DockerStatusBuildItem.java","name":"DockerStatusBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/DockerStatusBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"22","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"4","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and includes Javadoc comments for clarity. The use of final for immutability and the deprecation annotation are good practices. However, the reasoning behind the deprecation could be more detailed, and there could be more comments explaining the logic.","tokens":462,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMI_","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/RemovedResourceBuildItem.java","name":"RemovedResourceBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/RemovedResourceBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"14.3","bestValue":false},{"metric":"lines","value":"41","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"6","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear and concise documentation for each method and constructor. The use of assertions ensures that parameters are validated, enhancing robustness. The class adheres to good object-oriented principles and is easy to read and understand. Minor improvements could be made in terms of additional comments or more detailed documentation, but overall, the quality is high.","tokens":653,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJA","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/LogCategoryBuildItem.java","name":"LogCategoryBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/LogCategoryBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"5","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"31.0","bestValue":false},{"metric":"lines","value":"68","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"10","bestValue":false}]}}}
{"score":"90","reasoning":"The code is clean, well-structured, and follows standard Java conventions. The class is final, indicating it is not meant to be subclassed, which is good for immutability. The use of a private final field ensures thread safety. The only minor issue is the lack of comments, which could help in understanding the purpose of the class.","tokens":322,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMI1","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/ThreadFactoryBuildItem.java","name":"ThreadFactoryBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/ThreadFactoryBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"18","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and includes a clear Javadoc comment explaining the purpose of the class. The class is final, which is good for immutability. The variable and method names are descriptive. However, the reasoning could be more detailed, and there is a minor typo in the comment (\u0027classh\u0027 instead of \u0027class\u0027).","tokens":365,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJq","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/RecordableConstructorBuildItem.java","name":"RecordableConstructorBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/RecordableConstructorBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"21.4","bestValue":false},{"metric":"lines","value":"23","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows good naming conventions, and includes a clear Javadoc comment explaining the class\u0027s purpose. The class is final, indicating it is not meant to be extended, which is appropriate for its use case. The only minor issue is the lack of additional comments within the constructor and method, but overall, the readability and quality are high.","tokens":387,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIs","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/InitTaskCompletedBuildItem.java","name":"InitTaskCompletedBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/InitTaskCompletedBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"31.3","bestValue":false},{"metric":"lines","value":"24","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and includes a clear Javadoc comment explaining the class purpose. The class is final, indicating it is not meant to be extended, which is appropriate for a marker class. The variable and method names are descriptive. However, the class could benefit from additional comments or documentation for the constructor and method.","tokens":335,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJS","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/AdditionalApplicationArchiveMarkerBuildItem.java","name":"AdditionalApplicationArchiveMarkerBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/AdditionalApplicationArchiveMarkerBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"15.4","bestValue":false},{"metric":"lines","value":"21","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good object-oriented principles. The use of generics is appropriate and the class is well-documented. However, the class could benefit from additional comments explaining the purpose of the methods and the overall functionality. The naming conventions are clear, but the readability could be slightly improved with more detailed inline documentation.","tokens":514,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMI9","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/ObjectSubstitutionBuildItem.java","name":"ObjectSubstitutionBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/ObjectSubstitutionBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"13.3","bestValue":false},{"metric":"lines","value":"46","bestValue":false},{"metric":"sqale_rating","value":"2.0","bestValue":false},{"metric":"statements","value":"6","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows good practices, and includes Javadoc comments for methods and the class. The use of final for immutability and the Assert class for null checks are positive aspects. However, the class could benefit from additional comments explaining the context and purpose of the class in the larger application.","tokens":424,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJZ","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/LogHandlerBuildItem.java","name":"LogHandlerBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/LogHandlerBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"25.0","bestValue":false},{"metric":"lines","value":"35","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear comments and appropriate use of Java constructs. The use of synchronized methods and CopyOnWriteArrayList ensures thread safety. The logging is handled properly, and the class adheres to good practices by being final. However, the reasoning behind the \u0027firstRunOnly\u0027 parameter could be more explicitly documented.","tokens":700,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIS","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/CuratedApplicationShutdownBuildItem.java","name":"CuratedApplicationShutdownBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/CuratedApplicationShutdownBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"7","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"13","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"21.7","bestValue":false},{"metric":"lines","value":"60","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"12","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows good naming conventions, and includes documentation. The use of final for the class and private final for the field ensures immutability. The only minor issue is the lack of error handling or validation for the input parameters.","tokens":355,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIY","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/ServiceStartBuildItem.java","name":"ServiceStartBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/ServiceStartBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"15.8","bestValue":false},{"metric":"lines","value":"28","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"3","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear class and method definitions. The use of final for the class and private final for fields ensures immutability. The comments are concise and informative. However, the class could benefit from additional comments explaining the purpose of each constructor and method. Overall, the readability and quality are high.","tokens":393,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMH8","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/NativeImageResourceBundleBuildItem.java","name":"NativeImageResourceBundleBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/NativeImageResourceBundleBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"4.8","bestValue":false},{"metric":"lines","value":"31","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"6","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear class and method definitions. The use of enums for OS types is appropriate and enhances readability. Comments are helpful and explain the logic. The naming conventions are consistent and meaningful. However, the reasoning behind the boolean logic in the triggerError method could be slightly more explicit for better clarity.","tokens":527,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMH3","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/UnsupportedOSBuildItem.java","name":"UnsupportedOSBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/UnsupportedOSBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"6","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"3","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"20.6","bestValue":false},{"metric":"lines","value":"45","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"4","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and includes a clear Javadoc comment explaining the class\u0027s purpose. The class is simple, with a single field and corresponding getter method. The use of \u0027final\u0027 for the class and the field ensures immutability. However, the class could benefit from additional comments or documentation for the constructor and getter method.","tokens":350,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHv","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/RuntimeReinitializedClassBuildItem.java","name":"RuntimeReinitializedClassBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/RuntimeReinitializedClassBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"15.4","bestValue":false},{"metric":"lines","value":"21","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and is easy to read. The class and method names are descriptive, and the use of final for fields ensures immutability. However, the class lacks Javadoc comments, which would improve understandability and maintainability.","tokens":387,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMH7","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/ReflectiveFieldBuildItem.java","name":"ReflectiveFieldBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/ReflectiveFieldBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"32","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"6","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and includes a clear Javadoc comment. The class is simple and straightforward, with a single responsibility. The use of \u0027final\u0027 for the class and the private final field ensures immutability. However, the Javadoc could be more detailed, and there are no unit tests provided.","tokens":330,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHy","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/RuntimeInitializedClassBuildItem.java","name":"RuntimeInitializedClassBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/RuntimeInitializedClassBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.3","bestValue":false},{"metric":"lines","value":"20","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear class and method definitions. It uses appropriate naming conventions and includes comments for context. The use of final for immutability and Objects.requireNonNull for null checks are good practices. However, the class could benefit from additional comments explaining the purpose of each method and the overall class functionality.","tokens":482,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIL","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/ReflectiveHierarchyIgnoreWarningBuildItem.java","name":"ReflectiveHierarchyIgnoreWarningBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/ReflectiveHierarchyIgnoreWarningBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"5","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"6.9","bestValue":false},{"metric":"lines","value":"45","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"5","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear class and method definitions. The use of comments and Javadoc is effective in explaining the purpose and functionality. The naming conventions are consistent and meaningful. However, the class could benefit from additional error handling or validation for the className parameter.","tokens":389,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIC","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/ForceNonWeakReflectiveClassBuildItem.java","name":"ForceNonWeakReflectiveClassBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/ForceNonWeakReflectiveClassBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"31.3","bestValue":false},{"metric":"lines","value":"24","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows Java conventions, and includes clear documentation. The class is final, indicating immutability, and the use of generics is appropriate. The only minor improvement could be more detailed Javadoc for the constructor and method.","tokens":389,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMH9","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/ReflectiveClassFinalFieldsWritablePredicateBuildItem.java","name":"ReflectiveClassFinalFieldsWritablePredicateBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/ReflectiveClassFinalFieldsWritablePredicateBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"18.8","bestValue":false},{"metric":"lines","value":"27","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, follows Java conventions, and includes a clear comment explaining its usage. The class is simple and concise, with appropriate naming conventions. However, the comment could be more detailed, and there is a minor typo in \u0027classh\u0027 instead of \u0027class\u0027.","tokens":336,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHz","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/NativeImageAllowIncompleteClasspathAggregateBuildItem.java","name":"NativeImageAllowIncompleteClasspathAggregateBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/NativeImageAllowIncompleteClasspathAggregateBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"15.4","bestValue":false},{"metric":"lines","value":"22","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and includes a clear Javadoc comment explaining the class purpose. The class is simple, with a single field and corresponding getter, making it easy to read and understand. However, the reasoning could be slightly improved by adding more detailed comments or handling potential null values for the securityProvider.","tokens":347,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMH_","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/NativeImageSecurityProviderBuildItem.java","name":"NativeImageSecurityProviderBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/NativeImageSecurityProviderBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"15.4","bestValue":false},{"metric":"lines","value":"20","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear and consistent naming conventions. Constructors are overloaded to handle different input types, enhancing flexibility. The use of final for immutable fields is good practice. The equals and hashCode methods are correctly overridden. Minor improvements could include adding comments for better readability and possibly reducing redundancy in constructor logic.","tokens":817,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMH4","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/ReflectiveMethodBuildItem.java","name":"ReflectiveMethodBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/ReflectiveMethodBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"18","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"9","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"88","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"33","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear and concise constructors and methods. It follows good practices such as immutability for fields and proper use of the equals and hashCode methods. The use of final for class and fields enhances readability and maintainability. However, the code could benefit from additional comments for better understanding, especially for complex logic in constructors.","tokens":899,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMH2","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/JniRuntimeAccessMethodBuildItem.java","name":"JniRuntimeAccessMethodBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/JniRuntimeAccessMethodBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"19","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"9","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"2.6","bestValue":false},{"metric":"lines","value":"95","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"36","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear and concise documentation explaining the purpose and usage of the class and its methods. The use of final for the class and private final for the fields ensures immutability, enhancing reliability. The constructor overloading is appropriately used. The only minor issue is the lack of input validation in the constructors.","tokens":546,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIE","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/ExcludeConfigBuildItem.java","name":"ExcludeConfigBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/ExcludeConfigBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"34.5","bestValue":false},{"metric":"lines","value":"42","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"5","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, with clear class and method definitions, and appropriate use of builders and constructors. The use of deprecation annotations is well-documented. However, the code could be improved by reducing redundancy in constructors and ensuring consistent exception handling. The use of streams and lambda expressions is appropriate but could be optimized for readability.","tokens":1925,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIF","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/ReflectiveClassBuildItem.java","name":"ReflectiveClassBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/ReflectiveClassBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"44","bestValue":false},{"metric":"code_smells","value":"11","bestValue":false},{"metric":"cognitive_complexity","value":"10","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.4","bestValue":false},{"metric":"lines","value":"264","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"71","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and is easy to read. The class is final, indicating immutability, and the use of private final fields ensures thread safety. The constructor and getter methods are straightforward. However, the class lacks JavaDoc comments for the constructor and methods, which could improve readability and maintainability.","tokens":354,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIA","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/NativeImageSystemPropertyBuildItem.java","name":"NativeImageSystemPropertyBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/NativeImageSystemPropertyBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"5.9","bestValue":false},{"metric":"lines","value":"26","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"4","bestValue":false}]}}}
{"score":"85","reasoning":"The code is concise and follows standard Java conventions. The class is well-documented with a clear Javadoc comment explaining its purpose. However, the class itself is very minimal and does not contain any methods or additional logic, which limits the evaluation of its overall quality and readability.","tokens":284,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIO","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/InlineBeforeAnalysisBuildItem.java","name":"InlineBeforeAnalysisBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/InlineBeforeAnalysisBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"20.0","bestValue":false},{"metric":"lines","value":"10","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, follows standard Java conventions, and is easy to read. The class and method names are descriptive, and the use of final for the class fields is appropriate. However, the class lacks JavaDoc comments, which would improve readability and maintainability. Additionally, the class could benefit from validation or error handling for the constructor parameters.","tokens":354,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIN","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/UnsafeAccessedFieldBuildItem.java","name":"UnsafeAccessedFieldBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/UnsafeAccessedFieldBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"23","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"4","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear and concise method documentation. It uses meaningful variable names and includes necessary validation checks. The use of standard Java libraries and idiomatic constructs enhances readability. However, the class could benefit from additional comments explaining the logic within methods, especially in loops and try-catch blocks.","tokens":1726,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMH-","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/ServiceProviderBuildItem.java","name":"ServiceProviderBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/ServiceProviderBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"20","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"15","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"32.8","bestValue":false},{"metric":"lines","value":"164","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"35","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and includes a clear Javadoc comment. The class is final, indicating immutability, and the use of private final for the className field is good practice. The constructors and getter method are straightforward. However, the class could benefit from additional comments or documentation for the constructors.","tokens":360,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMH6","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/LambdaCapturingTypeBuildItem.java","name":"LambdaCapturingTypeBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/LambdaCapturingTypeBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"6.7","bestValue":false},{"metric":"lines","value":"24","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"3","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and includes Javadoc comments. The class is final, indicating immutability, and the fields are final, ensuring thread safety. The constructors provide flexibility for different input types. However, the class could benefit from additional comments explaining the purpose of each constructor and method.","tokens":456,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIG","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/JniRuntimeAccessFieldBuildItem.java","name":"JniRuntimeAccessFieldBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/JniRuntimeAccessFieldBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"5","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"7.1","bestValue":false},{"metric":"lines","value":"41","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"8","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear comments and appropriate use of final for immutability. The class and method names are descriptive, and the use of Runtime.Version.parse ensures proper version handling. However, the class could benefit from additional validation or error handling for the minVersion parameter.","tokens":354,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIM","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/NativeMinimalJavaVersionBuildItem.java","name":"NativeMinimalJavaVersionBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/NativeMinimalJavaVersionBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"23.1","bestValue":false},{"metric":"lines","value":"21","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear and concise comments explaining the purpose of the class. The use of final for the class and private final for fields ensures immutability. The constructors and getter methods are straightforward and follow standard conventions. However, the class could benefit from additional validation or error handling for the input parameters.","tokens":410,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIB","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/ReflectiveClassConditionBuildItem.java","name":"ReflectiveClassConditionBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/ReflectiveClassConditionBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"5.0","bestValue":false},{"metric":"lines","value":"30","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"5","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, uses meaningful class and method names, and includes Javadoc comments for clarity. The use of final for the class and the resources field ensures immutability, enhancing code safety. The only minor issue is the lack of detailed comments within methods, but overall, the code is highly readable and of good quality.","tokens":443,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIH","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/NativeImageResourceBuildItem.java","name":"NativeImageResourceBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/NativeImageResourceBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"29.2","bestValue":false},{"metric":"lines","value":"34","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"3","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, with clear documentation and appropriate use of annotations. The class is final, indicating it is not meant to be extended, which is good practice for this use case. The use of a constructor to initialize the final field is appropriate. However, the use of a deprecated class suggests that it should be avoided, which slightly reduces the score.","tokens":503,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIP","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/NativeImageAllowIncompleteClasspathBuildItem.java","name":"NativeImageAllowIncompleteClasspathBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/NativeImageAllowIncompleteClasspathBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"47.8","bestValue":false},{"metric":"lines","value":"34","bestValue":false},{"metric":"sqale_rating","value":"2.0","bestValue":false},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear and concise methods, appropriate use of final and private modifiers, and good documentation. The use of constructors to handle different input types is efficient. However, the use of NullPointerException could be improved by providing more informative error messages.","tokens":554,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHw","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/JniRuntimeAccessBuildItem.java","name":"JniRuntimeAccessBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/JniRuntimeAccessBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"10","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"6","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"2.0","bestValue":false},{"metric":"lines","value":"64","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"22","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows good naming conventions, and includes documentation. The use of Objects.requireNonNull ensures that the moduleName is not null, which is a good practice. The class is final, indicating it is not meant to be extended, which is appropriate for this use case. The only minor improvement could be more detailed documentation, but overall, the code is of high quality and very readable.","tokens":389,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHx","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/NativeImageEnableModule.java","name":"NativeImageEnableModule.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/NativeImageEnableModule.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"25.0","bestValue":false},{"metric":"lines","value":"25","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows Java conventions, and includes clear documentation. The class is simple, with a single responsibility, and uses appropriate access modifiers. The only minor issue is the lack of additional comments within the constructor and getter method, but this does not significantly impact readability or quality.","tokens":380,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMH0","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/RuntimeInitializedPackageBuildItem.java","name":"RuntimeInitializedPackageBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/RuntimeInitializedPackageBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"35.3","bestValue":false},{"metric":"lines","value":"25","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear and concise comments explaining the purpose of the class and its methods. The use of final for class and fields ensures immutability where appropriate. The equals and hashCode methods are correctly overridden. The only minor improvement could be more detailed Javadoc for some methods.","tokens":796,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMID","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/JPMSExportBuildItem.java","name":"JPMSExportBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/JPMSExportBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"17","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"7","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"11.5","bestValue":false},{"metric":"lines","value":"80","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"18","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, with clear documentation and a logical flow. The use of inner classes for predicates and the builder pattern enhances readability and maintainability. However, the extensive use of deprecated constructors could be confusing. The code could benefit from reducing redundancy and improving the handling of deprecated methods.","tokens":2002,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIK","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/ReflectiveHierarchyBuildItem.java","name":"ReflectiveHierarchyBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/ReflectiveHierarchyBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"38","bestValue":false},{"metric":"code_smells","value":"26","bestValue":false},{"metric":"cognitive_complexity","value":"4","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"18.8","bestValue":false},{"metric":"lines","value":"331","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"55","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear separation of concerns and extensive documentation. The use of builder pattern enhances readability and usability. The class and method names are descriptive, and the comments provide valuable context. The only minor issue is the potential for null values in the builder\u0027s lists after build() is called, which could be handled more gracefully.","tokens":2254,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMH1","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/NativeImageResourcePatternsBuildItem.java","name":"NativeImageResourcePatternsBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/NativeImageResourcePatternsBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"17","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"50.3","bestValue":false},{"metric":"lines","value":"237","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"34","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and is easy to read. The use of Javadoc comments enhances readability. The class is final, ensuring immutability, and the constructors are clear. However, the class could benefit from additional validation or error handling for the input parameters.","tokens":397,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMII","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/NativeImageProxyDefinitionBuildItem.java","name":"NativeImageProxyDefinitionBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/NativeImageProxyDefinitionBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"15.0","bestValue":false},{"metric":"lines","value":"31","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"3","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows Java conventions, and includes Javadoc comments for clarity. The class is simple and focused, with a clear purpose. The use of final for the class and private final for the field ensures immutability. The only minor issue is a small typo in the closing comment \u0027classh\u0027 instead of \u0027class\u0027.","tokens":396,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMH5","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/NativeImageResourceDirectoryBuildItem.java","name":"NativeImageResourceDirectoryBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/NativeImageResourceDirectoryBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"38.9","bestValue":false},{"metric":"lines","value":"26","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows good object-oriented principles, and uses the builder pattern effectively. The use of collections is appropriate, and the methods are clear and concise. The only minor issue is the lack of comments, which could improve readability for future maintainers.","tokens":776,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIJ","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/NativeImageConfigBuildItem.java","name":"NativeImageConfigBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/NativeImageConfigBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"13","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"92","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"22","bestValue":false}]}}}
{"score":"85","reasoning":"The code is concise and follows standard Java conventions. The class is well-named and the comment provides a clear explanation of its purpose. However, the class is very simple and does not demonstrate complex logic or error handling, which limits the ability to fully assess coding practices.","tokens":276,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIR","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/GeneratedFileSystemResourceHandledBuildItem.java","name":"GeneratedFileSystemResourceHandledBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/GeneratedFileSystemResourceHandledBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"20.0","bestValue":false},{"metric":"lines","value":"11","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows Java conventions, and includes comprehensive documentation. The use of final, static, and private keywords is appropriate, and the class is immutable. The deprecated constructor is properly documented. The only minor issue is the slightly complex logging logic in the deprecated constructor, which could be simplified.","tokens":907,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJd","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/CapabilityBuildItem.java","name":"CapabilityBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/CapabilityBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"7","bestValue":false},{"metric":"code_smells","value":"4","bestValue":false},{"metric":"cognitive_complexity","value":"3","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"37.7","bestValue":false},{"metric":"lines","value":"82","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"11","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear and concise comments explaining the purpose and functionality of each method. The use of final variables and immutability where appropriate enhances readability and maintainability. The class adheres to good object-oriented principles and uses appropriate data structures. Minor improvements could be made in the documentation of some methods, but overall, the code quality is excellent.","tokens":833,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJR","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/LiveReloadBuildItem.java","name":"LiveReloadBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/LiveReloadBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"7","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"26.8","bestValue":false},{"metric":"lines","value":"88","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"13","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows Java conventions, and is easy to read. It includes proper encapsulation, meaningful method names, and overrides for equals and hashCode. The use of final for immutability is a good practice. The only minor improvement could be adding JavaDoc comments for better documentation.","tokens":522,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIu","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/ConfigMappingBuildItem.java","name":"ConfigMappingBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/ConfigMappingBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"11","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"4","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"52","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"13","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear and concise method names and comments. The use of final for class and fields ensures immutability, enhancing reliability. The class adheres to Java conventions and includes necessary imports. The only minor improvement could be additional comments for methods, but overall, the readability and quality are excellent.","tokens":590,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJm","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/ConfigDescriptionBuildItem.java","name":"ConfigDescriptionBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/ConfigDescriptionBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"10","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"4.2","bestValue":false},{"metric":"lines","value":"63","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"14","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows good naming conventions, and includes a clear class-level comment. The use of final for the class and fields ensures immutability, which is a good practice. The only minor improvement could be adding null checks for the constructor parameters.","tokens":334,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMI4","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/SystemPropertyBuildItem.java","name":"SystemPropertyBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/SystemPropertyBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"5.9","bestValue":false},{"metric":"lines","value":"26","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"4","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, concise, and follows Java conventions. The class is final, indicating it is not meant to be subclassed, which is appropriate for a marker class. The Javadoc is clear and informative. However, the comment \u0027used in rare by libraries\u0027 seems to have a typo and should be \u0027used rarely by libraries\u0027.","tokens":357,"sonarData":{"component":{"id":"AYwuTxihSgLxngfU4PoL","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/SetClassPathSystemPropBuildItem.java","name":"SetClassPathSystemPropBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/SetClassPathSystemPropBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"50.0","bestValue":false},{"metric":"lines","value":"13","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, with clear comments and proper use of Java conventions. The class is simple and easy to understand. The use of @Deprecated annotation is appropriate, and the fields are final, ensuring immutability. However, the reasoning for deprecation could be more detailed, and the URL in the @Deprecated annotation is unconventional.","tokens":425,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJK","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/DevServicesConfigResultBuildItem.java","name":"DevServicesConfigResultBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/DevServicesConfigResultBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"19.0","bestValue":false},{"metric":"lines","value":"33","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"4","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear class and method definitions. The use of generics is appropriate, and the comments provide useful context. The naming conventions are consistent and descriptive. However, the reasoning behind the design choices could be elaborated more in the comments for better understanding.","tokens":504,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIU","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/BytecodeRecorderConstantDefinitionBuildItem.java","name":"BytecodeRecorderConstantDefinitionBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/BytecodeRecorderConstantDefinitionBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"25.8","bestValue":false},{"metric":"lines","value":"43","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"5","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows Java conventions, and includes Javadoc comments for class and methods. The use of final for immutability and Assert for null checks enhances robustness. The only minor improvement could be more detailed Javadoc comments.","tokens":422,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJX","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/NamedLogHandlersBuildItem.java","name":"NamedLogHandlersBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/NamedLogHandlersBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"25.0","bestValue":false},{"metric":"lines","value":"35","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, follows Java conventions, and uses meaningful variable names. The use of generics and Optional is appropriate. However, the class lacks comments and documentation, which could improve readability and maintainability. Additionally, the class is quite simple, so there\u0027s limited complexity to evaluate.","tokens":344,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJh","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/ConsoleFormatterBannerBuildItem.java","name":"ConsoleFormatterBannerBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/ConsoleFormatterBannerBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"20","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear documentation and appropriate use of final for immutability. The use of Assert to check for null parameters enhances robustness. The class and method names are descriptive, and the code adheres to standard Java conventions. The only minor issue is the lack of more detailed error handling or logging for the case when multiple formatters are enabled.","tokens":490,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIV","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/LogConsoleFormatBuildItem.java","name":"LogConsoleFormatBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/LogConsoleFormatBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"31.8","bestValue":false},{"metric":"lines","value":"37","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear and concise documentation explaining the purpose and usage of the class. The class and method names are descriptive, and the use of final for immutability is appropriate. The only minor issue is the lack of detailed comments within the methods, but the overall readability and quality are excellent.","tokens":560,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJQ","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/CombinedIndexBuildItem.java","name":"CombinedIndexBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/CombinedIndexBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"37.9","bestValue":false},{"metric":"lines","value":"43","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"4","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear class and method definitions. It includes Javadoc comments for the class, explaining its purpose and usage. The use of final for immutable fields and Collections.unmodifiableMap for the config map enhances code safety. The only minor issue is the lack of detailed comments within methods, but overall, the readability and quality are excellent.","tokens":810,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMIT","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/DevServicesResultBuildItem.java","name":"DevServicesResultBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/DevServicesResultBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"15","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"6.7","bestValue":false},{"metric":"lines","value":"100","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"22","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and is easy to read. The class is final, indicating immutability, and the use of a constructor to initialize the final field is good practice. The only minor issue is the lack of JavaDoc comments for the class and methods, which could improve readability and maintainability.","tokens":334,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJl","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/builditem/BytecodeRecorderObjectLoaderBuildItem.java","name":"BytecodeRecorderObjectLoaderBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/builditem/BytecodeRecorderObjectLoaderBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"19","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear and concise method names and comments that explain the purpose and usage of each method. The use of final for the class and fields ensures immutability, enhancing reliability. The logic for handling capability prefixes is well-implemented. The only minor issue is the deprecated method, which is clearly marked. Overall, the code is highly readable and of high quality.","tokens":1213,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sML_","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/Capabilities.java","name":"Capabilities.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/Capabilities.java","language":"java","measures":[{"metric":"complexity","value":"10","bestValue":false},{"metric":"code_smells","value":"4","bestValue":false},{"metric":"cognitive_complexity","value":"6","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"53.3","bestValue":false},{"metric":"lines","value":"117","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"16","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and includes clear documentation. The use of meaningful class and method names enhances readability. The class is final, indicating immutability, which is a good practice. However, the class could benefit from additional comments explaining the purpose of the predicate in more detail.","tokens":381,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHW","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/DisableInstrumentationForClassPredicateBuildItem.java","name":"DisableInstrumentationForClassPredicateBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/DisableInstrumentationForClassPredicateBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"5.0","bestValue":false},{"metric":"lines","value":"31","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"3","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using generics, functional interfaces, and streams. The naming conventions are clear and descriptive. However, the use of nested if-else statements could be simplified for better readability. Additionally, the class lacks comments, which could help in understanding the purpose and functionality of the methods.","tokens":512,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMG-","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/ConfigureDisableInstrumentationBuildStep.java","name":"ConfigureDisableInstrumentationBuildStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/ConfigureDisableInstrumentationBuildStep.java","language":"java","measures":[{"metric":"complexity","value":"8","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"8","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"40","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"12","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear comments explaining the purpose of the class and its methods. The use of ReentrantReadWriteLock is appropriate for the described functionality. The naming conventions are clear and follow standard practices. However, the class could benefit from additional error handling or logging to improve robustness.","tokens":406,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHL","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/CodeGenLock.java","name":"CodeGenLock.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/CodeGenLock.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"29.4","bestValue":false},{"metric":"lines","value":"27","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using constants, logging, and handling exceptions. The use of comments to explain compiler options is helpful. However, the class is quite large and could benefit from being broken down into smaller, more manageable methods or classes. Additionally, some methods like \u0027collectDiagnostics\u0027 and \u0027extractCompilationErrorMessage\u0027 could be simplified for better readability.","tokens":1700,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHJ","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/JavaCompilationProvider.java","name":"JavaCompilationProvider.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/JavaCompilationProvider.java","language":"java","measures":[{"metric":"complexity","value":"28","bestValue":false},{"metric":"code_smells","value":"4","bestValue":false},{"metric":"cognitive_complexity","value":"24","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"1.9","bestValue":false},{"metric":"lines","value":"190","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"64","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, uses meaningful class and method names, and follows good practices with annotations and dependency injection. However, it lacks comments and documentation, which could improve readability and maintainability for other developers.","tokens":393,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHS","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/io/NioThreadPoolDevModeProcessor.java","name":"NioThreadPoolDevModeProcessor.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/io/NioThreadPoolDevModeProcessor.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"22","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using generics, proper encapsulation, and clear method names. The use of comments to explain complex logic is helpful. However, the class is quite large and could benefit from being broken down into smaller, more manageable pieces. Additionally, some methods are quite long and could be refactored for better readability.","tokens":4442,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHX","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/QuarkusDevModeLauncher.java","name":"QuarkusDevModeLauncher.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/QuarkusDevModeLauncher.java","language":"java","measures":[{"metric":"complexity","value":"95","bestValue":false},{"metric":"code_smells","value":"13","bestValue":false},{"metric":"cognitive_complexity","value":"67","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"4.0","bestValue":false},{"metric":"lines","value":"576","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"217","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of logging, service loaders, and exception handling. The use of comments helps in understanding the purpose of certain blocks. However, the class is quite large and complex, which can make it harder to maintain and understand. Breaking it down into smaller classes or methods could improve readability and maintainability.","tokens":2986,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHM","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/IsolatedRemoteDevModeMain.java","name":"IsolatedRemoteDevModeMain.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/IsolatedRemoteDevModeMain.java","language":"java","measures":[{"metric":"complexity","value":"46","bestValue":false},{"metric":"code_smells","value":"22","bestValue":false},{"metric":"cognitive_complexity","value":"47","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"3.1","bestValue":false},{"metric":"lines","value":"356","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"145","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as encapsulation and immutability. The class and method names are clear and descriptive. However, there are no comments or documentation, which could improve readability and maintainability. Additionally, the use of generics and nested classes is appropriate but could be better explained with inline comments.","tokens":435,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHF","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/CurrentClassState.java","name":"CurrentClassState.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/CurrentClassState.java","language":"java","measures":[{"metric":"complexity","value":"5","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"40","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"6","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and is easy to read. The use of meaningful variable names and clear method definitions enhances readability. The constructor ensures the configs map is sorted if not already. The only minor improvement could be adding JavaDoc comments for better documentation.","tokens":536,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHB","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/devservices/DevServiceDescriptionBuildItem.java","name":"DevServiceDescriptionBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/devservices/DevServiceDescriptionBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"12","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"58","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"12","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear and consistent naming conventions. The use of getters and setters enhances encapsulation. The format methods improve readability. The nested ContainerPort class is logically organized. Minor improvements could include adding JavaDoc comments for better documentation and handling potential null values in methods like getShortId.","tokens":990,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHD","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/devservices/ContainerInfo.java","name":"ContainerInfo.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/devservices/ContainerInfo.java","language":"java","measures":[{"metric":"complexity","value":"32","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"155","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"39","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, uses meaningful comments, and follows good naming conventions. The use of annotations and Optional is appropriate. The only minor issue is the lack of more detailed comments for the inner class and methods, which could improve readability slightly.","tokens":408,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHC","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/devservices/GlobalDevServicesConfig.java","name":"GlobalDevServicesConfig.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/devservices/GlobalDevServicesConfig.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.0","bestValue":false},{"metric":"lines","value":"39","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows standard Java conventions. It includes detailed comments and uses meaningful variable names, which enhance readability. The use of final for constants and the separation of concerns are good practices. However, the class is quite large and complex, which could be broken down into smaller classes or methods for better maintainability. Additionally, some methods could benefit from further documentation.","tokens":2353,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHP","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/QuarkusCompiler.java","name":"QuarkusCompiler.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/QuarkusCompiler.java","language":"java","measures":[{"metric":"complexity","value":"46","bestValue":false},{"metric":"code_smells","value":"7","bestValue":false},{"metric":"cognitive_complexity","value":"103","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"7.1","bestValue":false},{"metric":"lines","value":"257","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"96","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and includes Javadoc comments for methods and fields. The use of default methods in the interface is appropriate. However, there is a minor typo in the Javadoc comment (\u0027successfull\u0027 should be \u0027successful\u0027). Overall, the code is highly readable and maintainable.","tokens":381,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHG","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/DevModeListener.java","name":"DevModeListener.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/DevModeListener.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"33.3","bestValue":false},{"metric":"lines","value":"29","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of synchronized methods, logging, and exception handling. The use of ServiceLoader and modular design enhances maintainability. However, the class is quite large and complex, which can make it harder to understand and maintain. Some comments indicate areas for potential improvement, such as the need for a common core classloader.","tokens":4058,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHA","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/IsolatedDevModeMain.java","name":"IsolatedDevModeMain.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/IsolatedDevModeMain.java","language":"java","measures":[{"metric":"complexity","value":"56","bestValue":false},{"metric":"code_smells","value":"28","bestValue":false},{"metric":"cognitive_complexity","value":"95","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.3","bestValue":false},{"metric":"lines","value":"473","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"187","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and includes clear documentation. The use of final for the class and private final for the field ensures immutability. The class is concise and the methods are straightforward. However, the class could benefit from additional comments explaining the purpose of the methods and the overall functionality in more detail.","tokens":387,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHY","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/DisableInstrumentationForIndexPredicateBuildItem.java","name":"DisableInstrumentationForIndexPredicateBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/DisableInstrumentationForIndexPredicateBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"5.0","bestValue":false},{"metric":"lines","value":"31","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"3","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of access modifiers, clear method names, and appropriate use of comments. The class and method names are descriptive, and the logic is straightforward. However, the reasoning behind some design choices, like the use of AtomicBoolean, could be better documented. Overall, the code is readable and maintainable.","tokens":596,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMG1","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/filesystem/StaticFileManager.java","name":"StaticFileManager.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/filesystem/StaticFileManager.java","language":"java","measures":[{"metric":"complexity","value":"7","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"4","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"5.7","bestValue":false},{"metric":"lines","value":"47","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"8","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good object-oriented principles. It includes comprehensive Javadoc comments and handles exceptions appropriately. The use of nested classes and method overrides is clear and logical. However, the code could benefit from additional inline comments for complex logic, and some methods are quite lengthy, which can affect readability.","tokens":3103,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMGw","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/filesystem/ReloadableFileManager.java","name":"ReloadableFileManager.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/filesystem/ReloadableFileManager.java","language":"java","measures":[{"metric":"complexity","value":"85","bestValue":false},{"metric":"code_smells","value":"5","bestValue":false},{"metric":"cognitive_complexity","value":"79","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"4.5","bestValue":false},{"metric":"lines","value":"379","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"149","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and includes Javadoc comments for the interface and method. The use of a Collection for changes is appropriate. However, the class is quite simple, and more complex scenarios might reveal additional areas for improvement.","tokens":292,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMGx","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/filesystem/watch/FileChangeCallback.java","name":"FileChangeCallback.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/filesystem/watch/FileChangeCallback.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"37.5","bestValue":false},{"metric":"lines","value":"19","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper exception handling, use of synchronized collections, and clear method responsibilities. The comments are helpful, and the logic is easy to follow. However, the class is quite large and could benefit from further modularization. Additionally, some variable names could be more descriptive to enhance readability.","tokens":2042,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMGz","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/filesystem/watch/WatchServiceFileSystemWatcher.java","name":"WatchServiceFileSystemWatcher.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/filesystem/watch/WatchServiceFileSystemWatcher.java","language":"java","measures":[{"metric":"complexity","value":"40","bestValue":false},{"metric":"code_smells","value":"12","bestValue":false},{"metric":"cognitive_complexity","value":"107","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"7.4","bestValue":false},{"metric":"lines","value":"247","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"104","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear and concise comments explaining the purpose of the class and its methods. The use of enums for event types is appropriate and enhances readability. The class adheres to good object-oriented principles, and the method names are self-explanatory. The only minor improvement could be more detailed comments on the enum values.","tokens":520,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMGy","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/filesystem/watch/FileChangeEvent.java","name":"FileChangeEvent.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/filesystem/watch/FileChangeEvent.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"38.2","bestValue":false},{"metric":"lines","value":"64","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"4","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper exception handling and clear method definitions. The use of an inner static class for context management is appropriate. However, the code could benefit from additional comments for better readability and understanding, especially for complex operations. The naming conventions are clear and consistent.","tokens":725,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMG2","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/filesystem/QuarkusFileManager.java","name":"QuarkusFileManager.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/filesystem/QuarkusFileManager.java","language":"java","measures":[{"metric":"complexity","value":"15","bestValue":false},{"metric":"code_smells","value":"4","bestValue":false},{"metric":"cognitive_complexity","value":"6","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"104","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"32","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as encapsulation and clear method naming. The use of Sets for tracking changes is appropriate. However, the merge method could be optimized to avoid repetitive code. The toName method is a bit complex and could benefit from additional comments for clarity. Overall, the code is readable and maintainable.","tokens":949,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHO","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/ClassScanResult.java","name":"ClassScanResult.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/ClassScanResult.java","language":"java","measures":[{"metric":"complexity","value":"18","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"3","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"94","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"35","bestValue":false}]}}}
{"score":"90","reasoning":"The code is highly readable and straightforward, implementing a simple Predicate that always returns false. The class and method names are clear and follow standard naming conventions. However, the generic type parameter T is unused, which could be slightly confusing.","tokens":257,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHZ","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/AlwaysFalsePredicate.java","name":"AlwaysFalsePredicate.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/AlwaysFalsePredicate.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"12","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear comments and appropriate use of Java collections. The class and method names are descriptive, and the logic is straightforward. The use of null checks and default values is good practice. However, the reasoning for the score is slightly reduced due to the lack of unit tests and potential for further optimization in handling flags.","tokens":852,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMG9","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/CompilerFlags.java","name":"CompilerFlags.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/CompilerFlags.java","language":"java","measures":[{"metric":"complexity","value":"13","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"11","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"15.6","bestValue":false},{"metric":"lines","value":"92","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"27","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear comments explaining the purpose of the class. The use of final for the class and the field ensures immutability, which is good practice. The naming conventions are clear and follow standard Java conventions. The only minor issue is the lack of detailed JavaDoc for the constructor and method, which could improve readability and understanding.","tokens":384,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHK","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/ExceptionNotificationBuildItem.java","name":"ExceptionNotificationBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/ExceptionNotificationBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"14.3","bestValue":false},{"metric":"lines","value":"24","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows standard Java conventions. It uses meaningful variable names and includes default methods in the interface for common functionality. The Context class is comprehensive and encapsulates various properties effectively. However, the constructor for Context is quite long, which could be broken down for better readability. Additionally, more comments could be added to explain the purpose of certain methods and fields.","tokens":1027,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHH","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/CompilationProvider.java","name":"CompilationProvider.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/CompilationProvider.java","language":"java","measures":[{"metric":"complexity","value":"23","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"2","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"164","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"36","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as encapsulation and immutability where appropriate. The use of nested static classes and builders enhances readability and maintainability. However, the class is quite large and could benefit from further modularization. Additionally, some comments explaining the purpose of certain methods and fields would improve clarity.","tokens":2896,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMG_","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/DevModeContext.java","name":"DevModeContext.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/DevModeContext.java","language":"java","measures":[{"metric":"complexity","value":"86","bestValue":false},{"metric":"code_smells","value":"6","bestValue":false},{"metric":"cognitive_complexity","value":"7","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"1.8","bestValue":false},{"metric":"lines","value":"491","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"119","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and uses modern Java features like streams and lambdas, which enhance readability. The use of meaningful variable names and comments also aids understanding. However, the TODO comment indicates incomplete functionality, and the null return value could be better handled. Overall, the code is clean but has minor areas for improvement.","tokens":635,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHR","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/HotDeploymentWatchedFileBuildStep.java","name":"HotDeploymentWatchedFileBuildStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/HotDeploymentWatchedFileBuildStep.java","language":"java","measures":[{"metric":"complexity","value":"7","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"6","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"2.9","bestValue":false},{"metric":"lines","value":"43","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"11","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using interfaces, inner classes, and proper naming conventions. The comments are clear and provide context. However, the code could benefit from additional error handling and more detailed documentation for the methods and classes.","tokens":533,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMG4","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/remote/DefaultRemoteDevClient.java","name":"DefaultRemoteDevClient.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/remote/DefaultRemoteDevClient.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"7.7","bestValue":false},{"metric":"lines","value":"54","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"7","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows standard Java conventions. It uses meaningful names for classes, methods, and variables, making it easy to understand. The use of interfaces and functional programming concepts like Function and Supplier is appropriate. However, the code could benefit from additional comments to explain the purpose and usage of the methods and interfaces, which would improve readability further.","tokens":361,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMG5","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/remote/RemoteDevClient.java","name":"RemoteDevClient.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/remote/RemoteDevClient.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"25","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is clean, concise, and follows standard Java conventions. The use of Optional for the return type is a good practice to handle the potential absence of a RemoteDevClient. However, the class lacks documentation and comments, which could improve readability and understanding for other developers.","tokens":253,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMG6","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/remote/RemoteDevClientProvider.java","name":"RemoteDevClientProvider.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/remote/RemoteDevClientProvider.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"9","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using meaningful variable names, proper indentation, and modular methods. The use of Java Streams and Collections is appropriate and enhances readability. However, the nested loops and multiple conditional checks could be simplified for better readability. Additionally, some comments explaining the logic would improve understanding.","tokens":1462,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHU","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/ClassComparisonUtil.java","name":"ClassComparisonUtil.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/ClassComparisonUtil.java","language":"java","measures":[{"metric":"complexity","value":"43","bestValue":false},{"metric":"code_smells","value":"5","bestValue":false},{"metric":"cognitive_complexity","value":"71","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.6","bestValue":false},{"metric":"lines","value":"178","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"104","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of final variables, try-catch blocks, and resource management. The use of meaningful variable names and comments enhances readability. However, the nested loops and multiple responsibilities within the constructor could be refactored for better clarity and maintainability.","tokens":799,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHI","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/CodeGenWatcher.java","name":"CodeGenWatcher.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/CodeGenWatcher.java","language":"java","measures":[{"metric":"complexity","value":"8","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"14","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"75","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"28","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of logging, exception handling, and clear method separation. The use of meaningful variable names and comments enhances readability. However, the complexity of the logic, especially in the \u0027toModule\u0027 method, could be simplified or broken down further for better readability. Overall, the code is of high quality but could benefit from minor improvements in clarity.","tokens":1314,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHN","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/IDEDevModeMain.java","name":"IDEDevModeMain.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/IDEDevModeMain.java","language":"java","measures":[{"metric":"complexity","value":"20","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"31","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.8","bestValue":false},{"metric":"lines","value":"136","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"53","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and includes clear comments. The use of final for the class and fields ensures immutability, enhancing reliability. The class has a clear purpose and the methods are concise. However, the class could benefit from additional comments explaining the parameters and methods in more detail.","tokens":444,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMMP","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/metrics/MetricsFactoryConsumerBuildItem.java","name":"MetricsFactoryConsumerBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/metrics/MetricsFactoryConsumerBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.0","bestValue":false},{"metric":"lines","value":"35","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"6","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, uses meaningful names, and includes Javadoc comments for methods, enhancing readability. The use of @FunctionalInterface and generics is appropriate. However, the class could benefit from additional comments explaining the purpose of the class and its fields. The final keyword for fields is a good practice, but the code could be improved by adding null checks and possibly using Optional for the path field.","tokens":546,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMMQ","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/metrics/MetricsCapabilityBuildItem.java","name":"MetricsCapabilityBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/metrics/MetricsCapabilityBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"25.8","bestValue":false},{"metric":"lines","value":"44","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"5","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows good naming conventions, and includes appropriate use of final and override annotations. The logic is clear and concise. However, the class lacks comments explaining the purpose of some methods and fields, which could improve readability for other developers.","tokens":524,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMF-","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/configuration/type/ArrayOf.java","name":"ArrayOf.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/configuration/type/ArrayOf.java","language":"java","measures":[{"metric":"complexity","value":"13","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"7","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"57","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"16","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, follows good naming conventions, and includes appropriate use of final and override annotations. The hashCode and equals methods are correctly implemented. However, the class lacks comments explaining the purpose of the class and its methods, which could improve readability and maintainability.","tokens":499,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMF6","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/configuration/type/PatternValidated.java","name":"PatternValidated.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/configuration/type/PatternValidated.java","language":"java","measures":[{"metric":"complexity","value":"13","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"6","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"53","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"14","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, follows good naming conventions, and includes proper use of final and override annotations. The hashCode and equals methods are implemented correctly. However, the class lacks comments explaining the purpose and usage of the methods and fields, which slightly impacts readability.","tokens":534,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMF8","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/configuration/type/UpperBoundCheckOf.java","name":"UpperBoundCheckOf.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/configuration/type/UpperBoundCheckOf.java","language":"java","measures":[{"metric":"complexity","value":"13","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"6","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"53","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"14","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, follows good naming conventions, and includes appropriate use of final and override annotations. The hashCode and equals methods are implemented correctly. However, the class lacks comments explaining the purpose of methods and fields, which could improve readability and maintainability.","tokens":496,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMF5","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/configuration/type/CollectionOf.java","name":"CollectionOf.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/configuration/type/CollectionOf.java","language":"java","measures":[{"metric":"complexity","value":"12","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"6","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"53","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"14","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using meaningful class and method names, and handling different type cases comprehensively. The use of comments is minimal but adequate. However, the code could benefit from additional comments for clarity, especially in complex sections. The use of utility methods from ReflectUtil is good, but the readability could be improved with more inline documentation.","tokens":1131,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMF9","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/configuration/type/ConverterType.java","name":"ConverterType.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/configuration/type/ConverterType.java","language":"java","measures":[{"metric":"complexity","value":"26","bestValue":false},{"metric":"code_smells","value":"7","bestValue":false},{"metric":"cognitive_complexity","value":"50","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"5.9","bestValue":false},{"metric":"lines","value":"113","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"49","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows good naming conventions, and includes proper use of final and override annotations. The hashCode and equals methods are implemented correctly. However, the cast in the constructor could be better explained with a comment, and the equals method could be simplified for readability.","tokens":502,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMF4","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/configuration/type/Leaf.java","name":"Leaf.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/configuration/type/Leaf.java","language":"java","measures":[{"metric":"complexity","value":"12","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"6","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"51","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"13","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, follows good naming conventions, and includes proper use of final and override annotations. The hashCode and equals methods are correctly implemented. However, the class lacks comments explaining the purpose of the class and its methods, which could improve readability and maintainability.","tokens":453,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMF2","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/configuration/type/OptionalOf.java","name":"OptionalOf.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/configuration/type/OptionalOf.java","language":"java","measures":[{"metric":"complexity","value":"11","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"6","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"46","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"12","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, follows good naming conventions, and includes proper use of final and override annotations. The use of Objects.hash in hashCode is efficient. However, the equals method could be simplified, and the class lacks comments explaining the purpose of methods and fields, which slightly impacts readability.","tokens":540,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMF7","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/configuration/type/LowerBoundCheckOf.java","name":"LowerBoundCheckOf.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/configuration/type/LowerBoundCheckOf.java","language":"java","measures":[{"metric":"complexity","value":"13","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"6","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"53","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"14","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear and concise methods, proper use of final for immutability, and good use of the Objects utility class. The class adheres to Java conventions and includes necessary overrides for hashCode and equals. However, the class lacks comments explaining the purpose of the class and its methods, which could improve readability for other developers.","tokens":653,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMF3","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/configuration/type/MinMaxValidated.java","name":"MinMaxValidated.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/configuration/type/MinMaxValidated.java","language":"java","measures":[{"metric":"complexity","value":"19","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"6","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"73","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"20","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, follows standard Java conventions, and includes meaningful class and method names. The use of final for parameters and variables enhances immutability. However, the class lacks comments explaining the logic within methods, which could improve readability and maintainability. Additionally, the class-level Javadoc is empty, which is a missed opportunity for documentation.","tokens":521,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMGA","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/configuration/DefaultValuesConfigurationSource.java","name":"DefaultValuesConfigurationSource.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/configuration/DefaultValuesConfigurationSource.java","language":"java","measures":[{"metric":"complexity","value":"8","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"2","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"52","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"13","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear and concise comments explaining the purpose and usage of each configuration item. The use of annotations and Optional types enhances readability and maintainability. However, the class could benefit from additional error handling and validation logic to ensure robustness.","tokens":944,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMGT","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/configuration/ClassLoadingConfig.java","name":"ClassLoadingConfig.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/configuration/ClassLoadingConfig.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"67.2","bestValue":false},{"metric":"lines","value":"77","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using meaningful class and method names, proper use of static imports, and clear separation of concerns. The use of comments is minimal but the code is self-explanatory. However, the complexity of the methods and the nested loops could be simplified for better readability. Additionally, more inline comments could help in understanding the logic faster.","tokens":2287,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMGS","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/configuration/ConfigMappingUtils.java","name":"ConfigMappingUtils.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/configuration/ConfigMappingUtils.java","language":"java","measures":[{"metric":"complexity","value":"36","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"38","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"1.9","bestValue":false},{"metric":"lines","value":"240","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"93","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good object-oriented principles. The use of static imports and utility methods enhances readability. The Builder pattern is used effectively for object construction. However, the nested if-else statements for trimming segments could be simplified for better readability. Overall, the code is clean, but minor improvements could be made to enhance clarity.","tokens":1095,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMGB","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/configuration/definition/RootDefinition.java","name":"RootDefinition.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/configuration/definition/RootDefinition.java","language":"java","measures":[{"metric":"complexity","value":"24","bestValue":false},{"metric":"code_smells","value":"4","bestValue":false},{"metric":"cognitive_complexity","value":"12","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"140","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"38","bestValue":false}]}}}
{"score":"85","reasoning":"The code is concise and follows good object-oriented principles with a clear class hierarchy. The use of a builder pattern is appropriate for the context. However, the lack of comments and documentation for methods and classes reduces readability slightly. Additionally, the class and method names are generic, which might make it harder to understand the specific purpose without additional context.","tokens":306,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMGD","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/configuration/definition/GroupDefinition.java","name":"GroupDefinition.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/configuration/definition/GroupDefinition.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"20","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using abstract classes and inner static classes. The method names are clear, and the logic is straightforward. However, the class lacks comments on methods and inner classes, which could improve readability. Additionally, the use of exceptions could be more descriptive.","tokens":460,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMGC","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/configuration/definition/Definition.java","name":"Definition.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/configuration/definition/Definition.java","language":"java","measures":[{"metric":"complexity","value":"5","bestValue":false},{"metric":"code_smells","value":"5","bestValue":false},{"metric":"cognitive_complexity","value":"3","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"7.4","bestValue":false},{"metric":"lines","value":"36","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"5","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows Java conventions, and includes comprehensive documentation. The use of annotations and default values enhances readability. The methods are concise and serve clear purposes. The only minor issue is the potential verbosity of the toPatterns method, but it is still readable and maintainable.","tokens":944,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMGH","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/configuration/tracker/ConfigTrackingConfig.java","name":"ConfigTrackingConfig.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/configuration/tracker/ConfigTrackingConfig.java","language":"java","measures":[{"metric":"complexity","value":"5","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"2","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"32.3","bestValue":false},{"metric":"lines","value":"104","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"10","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear method documentation and logical organization. Variable and method names are descriptive, enhancing readability. The use of helper methods like toWritableValue and matches improves modularity. However, the code could benefit from more consistent error handling and possibly breaking down larger methods for better readability.","tokens":1850,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMGJ","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/configuration/tracker/ConfigTrackingWriter.java","name":"ConfigTrackingWriter.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/configuration/tracker/ConfigTrackingWriter.java","language":"java","measures":[{"metric":"complexity","value":"17","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"19","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"17.4","bestValue":false},{"metric":"lines","value":"114","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"35","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear comments and appropriate use of interfaces and annotations. The naming conventions are consistent and descriptive. The use of collections and concurrency utilities is appropriate. However, there is a minor typo in the comment for the getReadOptionsProvider method (\u0027orvipder\u0027 instead of \u0027provider\u0027).","tokens":779,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMGG","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/configuration/tracker/ConfigTrackingInterceptor.java","name":"ConfigTrackingInterceptor.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/configuration/tracker/ConfigTrackingInterceptor.java","language":"java","measures":[{"metric":"complexity","value":"7","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"2","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"18.0","bestValue":false},{"metric":"lines","value":"90","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"10","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear method names and comments that enhance readability. It follows good practices such as lazy initialization for the MessageDigest and proper handling of null values. The use of constants and utility methods is appropriate. However, the class could benefit from additional unit tests and some methods could be further simplified for better readability.","tokens":1179,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMGI","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/configuration/tracker/ConfigTrackingValueTransformer.java","name":"ConfigTrackingValueTransformer.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/configuration/tracker/ConfigTrackingValueTransformer.java","language":"java","measures":[{"metric":"complexity","value":"23","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"20","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"12.6","bestValue":false},{"metric":"lines","value":"134","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"39","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as encapsulation and modularity. The use of comments and meaningful variable names enhances readability. However, the nested loops and conditionals could be simplified for better clarity. Assertions are used appropriately, but exception messages could be more concise. Overall, the code is maintainable and understandable.","tokens":947,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMGM","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/configuration/matching/PatternMapBuilder.java","name":"PatternMapBuilder.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/configuration/matching/PatternMapBuilder.java","language":"java","measures":[{"metric":"complexity","value":"15","bestValue":false},{"metric":"code_smells","value":"5","bestValue":false},{"metric":"cognitive_complexity","value":"23","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"86","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"46","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, with clear class and method definitions. The use of final for parameters and fields enhances immutability. The comments are minimal but sufficient. The naming conventions are consistent and meaningful. However, the code could benefit from more detailed comments and possibly some error handling or validation for the mapMember field.","tokens":480,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMGL","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/configuration/matching/MapContainer.java","name":"MapContainer.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/configuration/matching/MapContainer.java","language":"java","measures":[{"metric":"complexity","value":"7","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"2","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.3","bestValue":false},{"metric":"lines","value":"47","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"14","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as encapsulation and null checks. The use of final for immutable fields is commendable. However, the methods getCombinedName and getPropertyName are somewhat complex and could benefit from further refactoring for readability. Additionally, comments or JavaDocs explaining the purpose of these methods would improve clarity.","tokens":676,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMGN","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/configuration/matching/FieldContainer.java","name":"FieldContainer.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/configuration/matching/FieldContainer.java","language":"java","measures":[{"metric":"complexity","value":"14","bestValue":false},{"metric":"code_smells","value":"4","bestValue":false},{"metric":"cognitive_complexity","value":"12","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"72","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"33","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using Javadoc comments for methods, abstract methods for extensibility, and final methods for concrete implementations. The naming conventions are clear and consistent. However, the class could benefit from additional comments explaining the purpose of some methods and the overall class functionality. The use of abstract methods without context might be confusing for new developers.","tokens":587,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMGO","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/configuration/matching/Container.java","name":"Container.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/configuration/matching/Container.java","language":"java","measures":[{"metric":"complexity","value":"5","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"34.3","bestValue":false},{"metric":"lines","value":"64","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"4","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows good naming conventions, and uses appropriate design patterns. The use of deprecated methods is clearly marked, and the class is final, indicating immutability. However, the code could benefit from additional comments for better readability and understanding, especially around complex logic in the apply and accept methods.","tokens":968,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLw","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/ApplicationArchiveImpl.java","name":"ApplicationArchiveImpl.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/ApplicationArchiveImpl.java","language":"java","measures":[{"metric":"complexity","value":"18","bestValue":false},{"metric":"code_smells","value":"14","bestValue":false},{"metric":"cognitive_complexity","value":"16","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"1.9","bestValue":false},{"metric":"lines","value":"127","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"32","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using abstract methods and final methods where appropriate. The use of meaningful variable names and comments enhances readability. However, the class could benefit from additional comments explaining the logic within methods, and the reasoning behind certain design choices could be clearer.","tokens":453,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMK8","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/console/SetCompleter.java","name":"SetCompleter.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/console/SetCompleter.java","language":"java","measures":[{"metric":"complexity","value":"6","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"8","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"3.7","bestValue":false},{"metric":"lines","value":"36","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"9","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as synchronized methods and proper exception handling. The use of comments is helpful for understanding the logic. However, the nested anonymous classes and lambda expressions could be refactored for better readability. Additionally, the method is quite long and could be broken down into smaller methods to improve maintainability.","tokens":960,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMK6","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/console/ConsoleHelper.java","name":"ConsoleHelper.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/console/ConsoleHelper.java","language":"java","measures":[{"metric":"complexity","value":"17","bestValue":false},{"metric":"code_smells","value":"14","bestValue":false},{"metric":"cognitive_complexity","value":"29","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.5","bestValue":false},{"metric":"lines","value":"100","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"35","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear and concise comments explaining each configuration item. The use of annotations and default values is appropriate. The class is simple and easy to understand. Minor improvements could be made in terms of formatting and consistency in comment style.","tokens":408,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLA","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/console/ConsoleConfig.java","name":"ConsoleConfig.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/console/ConsoleConfig.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"40.0","bestValue":false},{"metric":"lines","value":"33","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, concise, and follows standard Java conventions. The class is final, indicating it is not meant to be extended, and the use of a static final instance suggests a singleton pattern. However, the class lacks comments on the constructor and the purpose of the singleton instance, which could improve readability and understanding.","tokens":311,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMK4","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/console/ConsoleInstalledBuildItem.java","name":"ConsoleInstalledBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/console/ConsoleInstalledBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"28.6","bestValue":false},{"metric":"lines","value":"14","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear and consistent naming conventions. Constructors are overloaded appropriately, and the use of final for immutability is good. The nested HelpState class is also well-defined. However, the code could benefit from additional comments for better readability and understanding, especially for complex logic or purpose of certain methods.","tokens":781,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMK1","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/console/ConsoleCommand.java","name":"ConsoleCommand.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/console/ConsoleCommand.java","language":"java","measures":[{"metric":"complexity","value":"16","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"112","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"32","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good object-oriented principles. It uses clear and descriptive naming conventions, making it easy to understand. The use of comments is minimal but sufficient. However, the class lacks proper error handling and some methods are left unimplemented, which could affect maintainability and robustness.","tokens":1028,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMK5","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/console/DelegateConnection.java","name":"DelegateConnection.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/console/DelegateConnection.java","language":"java","measures":[{"metric":"complexity","value":"31","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"8","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"1.4","bestValue":false},{"metric":"lines","value":"173","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"35","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good object-oriented principles. It uses clear naming conventions and has appropriate comments. The use of nested classes and abstract methods is well-organized. However, the complexity of the nested classes and the length of the file could make it slightly harder to read and maintain. Some additional inline comments could improve readability.","tokens":1817,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMGE","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/configuration/definition/ClassDefinition.java","name":"ClassDefinition.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/configuration/definition/ClassDefinition.java","language":"java","measures":[{"metric":"complexity","value":"47","bestValue":false},{"metric":"code_smells","value":"7","bestValue":false},{"metric":"cognitive_complexity","value":"11","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.5","bestValue":false},{"metric":"lines","value":"280","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"75","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows good naming conventions, and includes comprehensive Javadoc comments. The use of assertions for parameter validation is a good practice. The logic is clear and methods are concise. However, the complexity of the merge method and nested loops could be simplified for better readability. Overall, the code is of high quality and maintainable.","tokens":2264,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMGP","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/configuration/matching/ConfigPatternMap.java","name":"ConfigPatternMap.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/configuration/matching/ConfigPatternMap.java","language":"java","measures":[{"metric":"complexity","value":"50","bestValue":false},{"metric":"code_smells","value":"5","bestValue":false},{"metric":"cognitive_complexity","value":"52","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"7.7","bestValue":false},{"metric":"lines","value":"272","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"120","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of annotations, clear method definitions, and appropriate use of comments. The use of static imports and constants enhances readability. However, the code could benefit from breaking down some of the longer methods into smaller, more manageable pieces to improve readability further. Additionally, the use of nested anonymous classes could be replaced with lambda expressions for brevity.","tokens":2392,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMK7","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/console/ConsoleProcessor.java","name":"ConsoleProcessor.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/console/ConsoleProcessor.java","language":"java","measures":[{"metric":"complexity","value":"33","bestValue":false},{"metric":"code_smells","value":"17","bestValue":false},{"metric":"cognitive_complexity","value":"23","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"3.5","bestValue":false},{"metric":"lines","value":"253","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"73","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using static imports, clear method names, and proper encapsulation. The use of inner classes and lambda expressions is appropriate. However, the code is quite lengthy and complex, which can make it harder to read and maintain. Some comments explaining the purpose of key sections would improve readability.","tokens":3210,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMK9","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/console/ConsoleStateManager.java","name":"ConsoleStateManager.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/console/ConsoleStateManager.java","language":"java","measures":[{"metric":"complexity","value":"83","bestValue":false},{"metric":"code_smells","value":"31","bestValue":false},{"metric":"cognitive_complexity","value":"71","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"1.4","bestValue":false},{"metric":"lines","value":"398","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"169","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using final for constants and fields that should not change. The use of Optional and Predicate is appropriate. The class and method names are descriptive, and the comments are helpful. However, the code could benefit from more detailed comments explaining the logic in some methods, and the use of @SuppressWarnings should be justified or removed if unnecessary.","tokens":886,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMK2","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/console/StartupLogCompressor.java","name":"StartupLogCompressor.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/console/StartupLogCompressor.java","language":"java","measures":[{"metric":"complexity","value":"13","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"8","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"5.1","bestValue":false},{"metric":"lines","value":"91","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"32","bestValue":false}]}}}
{"score":"85","reasoning":"The code is clean, concise, and follows standard Java conventions. The use of static variables and methods is appropriate for the context. However, the class lacks documentation and error handling, which could improve readability and robustness.","tokens":279,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMK-","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/console/ConsoleCliManager.java","name":"ConsoleCliManager.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/console/ConsoleCliManager.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"17","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using descriptive variable names and proper exception handling. The use of annotations for options is clear and concise. However, the class could benefit from additional comments to improve readability and understanding for future maintainers. Overall, it demonstrates a high level of quality and readability.","tokens":457,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMK_","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/console/QuarkusCommand.java","name":"QuarkusCommand.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/console/QuarkusCommand.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"2","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"34","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"7","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear comments explaining the purpose of each configuration item. The use of annotations and enums is appropriate and enhances readability. The naming conventions are consistent and meaningful. The only minor issue is the lack of explicit access modifiers for some fields, which could improve clarity.","tokens":596,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMML","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/BootstrapConfig.java","name":"BootstrapConfig.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/BootstrapConfig.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"40.0","bestValue":false},{"metric":"lines","value":"56","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using try-with-resources for resource management. The use of a StringBuilder for accumulating output is efficient. Logging is appropriately used for error handling. However, the class could benefit from additional comments for clarity, and the handling of the \u0027Stream closed\u0027 exception could be more robust.","tokens":462,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMME","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/OutputFilter.java","name":"OutputFilter.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/OutputFilter.java","language":"java","measures":[{"metric":"complexity","value":"5","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"8","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"39","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"8","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using try-with-resources for resource management and separating concerns into different methods. The use of meaningful variable names and comments enhances readability. However, the code is quite complex and could benefit from further modularization to improve maintainability. Additionally, some methods are lengthy and could be broken down into smaller, more manageable pieces.","tokens":1936,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLu","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/mutability/DevModeTask.java","name":"DevModeTask.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/mutability/DevModeTask.java","language":"java","measures":[{"metric":"complexity","value":"21","bestValue":false},{"metric":"code_smells","value":"4","bestValue":false},{"metric":"cognitive_complexity","value":"42","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"5.1","bestValue":false},{"metric":"lines","value":"198","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"71","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using try-with-resources for resource management. The use of static imports improves readability. However, the nested try blocks and the use of anonymous inner classes could be replaced with lambda expressions for better readability. Comments are minimal, which might make it harder for new developers to understand the context.","tokens":897,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLt","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/mutability/ReaugmentTask.java","name":"ReaugmentTask.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/mutability/ReaugmentTask.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"4","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"1.5","bestValue":false},{"metric":"lines","value":"75","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"18","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of logging, clear method separation, and appropriate use of collections and functional interfaces. However, it is somewhat verbose and could benefit from additional comments for clarity, especially around complex logic and conditional checks. The use of nested builders and multiple conditionals could be simplified for better readability.","tokens":1711,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKn","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/jbang/JBangAugmentorImpl.java","name":"JBangAugmentorImpl.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/jbang/JBangAugmentorImpl.java","language":"java","measures":[{"metric":"complexity","value":"18","bestValue":false},{"metric":"code_smells","value":"7","bestValue":false},{"metric":"cognitive_complexity","value":"22","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"6.8","bestValue":false},{"metric":"lines","value":"144","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"59","bestValue":false}]}}}
{"score":"85","reasoning":"The code is concise and follows standard Java conventions. The class is well-named and extends a clearly named superclass. However, it lacks comments and documentation, which could help in understanding the purpose and usage of the class.","tokens":242,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sML1","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/logging/LoggingSetupBuildItem.java","name":"LoggingSetupBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/logging/LoggingSetupBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"7","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as clear naming conventions and detailed comments. The use of constants and modular methods enhances readability. However, the complexity of bytecode manipulation and the use of ASM library might be challenging for less experienced developers. The code could benefit from additional inline comments explaining the more intricate parts of the bytecode transformation logic.","tokens":2412,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLy","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/logging/LoggingWithPanacheProcessor.java","name":"LoggingWithPanacheProcessor.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/logging/LoggingWithPanacheProcessor.java","language":"java","measures":[{"metric":"complexity","value":"31","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"30","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"18.3","bestValue":false},{"metric":"lines","value":"214","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"64","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear and concise method definitions. The use of constructors to handle different parameter combinations is efficient. The class and method names are descriptive, and the comments provide useful context. However, the code could benefit from additional inline comments for better readability and maintainability.","tokens":553,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sML0","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/logging/LogCleanupFilterBuildItem.java","name":"LogCleanupFilterBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/logging/LogCleanupFilterBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"7","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"2","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"9.1","bestValue":false},{"metric":"lines","value":"46","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"9","bestValue":false}]}}}
{"score":"85","reasoning":"The code is concise and follows standard Java conventions. The class is well-defined and extends MultiBuildItem, indicating a clear purpose. However, it lacks comments and documentation, which could improve readability and understanding for other developers.","tokens":242,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLz","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/logging/LogStreamBuildItem.java","name":"LogStreamBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/logging/LogStreamBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"7","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of imports, clear method definitions, and appropriate exception handling. The use of comments and JavaDoc helps in understanding the purpose of the methods. However, the code is quite lengthy and complex, which might make it harder to follow for someone unfamiliar with the context. Some methods could be broken down further to improve readability.","tokens":3986,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMGW","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/CodeGenerator.java","name":"CodeGenerator.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/CodeGenerator.java","language":"java","measures":[{"metric":"complexity","value":"62","bestValue":false},{"metric":"code_smells","value":"8","bestValue":false},{"metric":"cognitive_complexity","value":"109","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"6.5","bestValue":false},{"metric":"lines","value":"418","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"189","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear documentation and method signatures. The use of interfaces promotes good design principles. However, the reasoning behind the methods could be more detailed, and there could be more context or examples on how to implement this interface.","tokens":463,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKc","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/recording/ObjectLoader.java","name":"ObjectLoader.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/recording/ObjectLoader.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"61.1","bestValue":false},{"metric":"lines","value":"30","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using annotations and handling exceptions. The comments are clear and provide context. However, the use of reflection with Class.forName can be risky and may affect readability and maintainability. The code could benefit from more detailed documentation on the purpose and usage of the methods.","tokens":547,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKh","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/recording/substitutions/AdditionalSubstitutionsBuildStep.java","name":"AdditionalSubstitutionsBuildStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/recording/substitutions/AdditionalSubstitutionsBuildStep.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.0","bestValue":false},{"metric":"lines","value":"35","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"7","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using ConcurrentHashMap for thread safety and leveraging Java streams for concise operations. The use of meaningful variable names and comments enhances readability. However, the complexity of the logic, especially in the build method, could be simplified or broken down into smaller methods for better maintainability.","tokens":1820,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKe","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/recording/AnnotationProxyProvider.java","name":"AnnotationProxyProvider.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/recording/AnnotationProxyProvider.java","language":"java","measures":[{"metric":"complexity","value":"24","bestValue":false},{"metric":"code_smells","value":"4","bestValue":false},{"metric":"cognitive_complexity","value":"14","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.2","bestValue":false},{"metric":"lines","value":"210","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"62","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, uses meaningful variable names, and follows good practices such as immutability and encapsulation. The use of static blocks for initialization is appropriate. However, the code could benefit from additional comments for clarity, especially for those unfamiliar with the specific annotations and providers used.","tokens":684,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKl","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/recording/RecordingAnnotationsUtil.java","name":"RecordingAnnotationsUtil.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/recording/RecordingAnnotationsUtil.java","language":"java","measures":[{"metric":"complexity","value":"10","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"11","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"63","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"24","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear documentation and appropriate use of generics. The methods are well-defined and the use of annotations like @Deprecated is correct. The naming conventions are consistent and descriptive. However, the code could benefit from additional error handling and validation to ensure robustness.","tokens":817,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKd","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/recording/RecorderContext.java","name":"RecorderContext.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/recording/RecorderContext.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"64.3","bestValue":false},{"metric":"lines","value":"68","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and uses appropriate Java conventions. The use of generics and ConcurrentHashMap ensures type safety and thread safety. The logic for adding a close task is clear and concise. However, the class lacks documentation comments, which would improve readability and maintainability. Additionally, the class is package-private, which may limit its usability.","tokens":460,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKf","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/recording/RecordingProxyFactories.java","name":"RecordingProxyFactories.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/recording/RecordingProxyFactories.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"32","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"6","bestValue":false}]}}}
{"score":"85","reasoning":"The code is clean, well-structured, and follows standard Java conventions. The use of default methods in the interface is appropriate. However, the methods returning null could be improved by providing more meaningful default implementations or documentation explaining why null is returned.","tokens":272,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKb","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/recording/RecordingAnnotationsProvider.java","name":"RecordingAnnotationsProvider.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/recording/RecordingAnnotationsProvider.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"15","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, concise, and follows standard Java conventions. The class and method names are descriptive, and the use of annotations is appropriate. However, the code could benefit from additional comments to improve readability and maintainability for future developers.","tokens":310,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKk","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/recording/AnnotationProxyBuildStep.java","name":"AnnotationProxyBuildStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/recording/AnnotationProxyBuildStep.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"15","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using ConcurrentMap for thread safety and separating concerns with inner classes. The use of meaningful variable names and comments enhances readability. However, the nested if-else conditions and the length of the FUNCTION implementation could be refactored for better readability and maintainability.","tokens":1275,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKg","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/recording/PropertyUtils.java","name":"PropertyUtils.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/recording/PropertyUtils.java","language":"java","measures":[{"metric":"complexity","value":"35","bestValue":false},{"metric":"code_smells","value":"4","bestValue":false},{"metric":"cognitive_complexity","value":"3","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"2.5","bestValue":false},{"metric":"lines","value":"141","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"60","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows good naming conventions, and includes a clear Javadoc comment. The use of final for the class and private final for the field ensures immutability. The Assert.checkNotEmptyParam method enhances robustness. However, the class could benefit from additional comments explaining the logic and purpose of methods and fields.","tokens":348,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMFc","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/UberJarMergedResourceBuildItem.java","name":"UberJarMergedResourceBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/UberJarMergedResourceBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"7.7","bestValue":false},{"metric":"lines","value":"21","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows standard Java conventions, and is easy to read. The class is final, indicating immutability, and the use of private final fields ensures thread safety. The methods are concise and self-explanatory. The only minor improvement could be adding JavaDoc comments for better documentation.","tokens":485,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMFw","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/JarBuildItem.java","name":"JarBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/JarBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"8","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"57","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"12","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear class and method definitions. The use of JavaDoc comments enhances readability and provides useful context. The naming conventions are consistent and descriptive. However, the code could benefit from additional inline comments to explain the logic within the lambda expressions and method implementations.","tokens":557,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMFt","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/ProcessInheritIODisabledBuildItem.java","name":"ProcessInheritIODisabledBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/ProcessInheritIODisabledBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"24.1","bestValue":false},{"metric":"lines","value":"40","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"6","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, follows good naming conventions, and includes a clear comment explaining the class purpose. The use of final for the class and private final for the field ensures immutability. The Assert.checkNotEmptyParam method enhances robustness. However, the class could benefit from additional comments and possibly unit tests to further improve readability and maintainability.","tokens":346,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMFo","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/UberJarIgnoredResourceBuildItem.java","name":"UberJarIgnoredResourceBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/UberJarIgnoredResourceBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"7.7","bestValue":false},{"metric":"lines","value":"21","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, follows Java conventions, and includes a clear Javadoc comment explaining the purpose of the class. However, the class itself is very minimal and does not provide much functionality, which limits the evaluation of its overall quality.","tokens":326,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMFd","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/AppCDSControlPointBuildItem.java","name":"AppCDSControlPointBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/AppCDSControlPointBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"42.9","bestValue":false},{"metric":"lines","value":"12","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and includes appropriate documentation. The class is final, indicating immutability, and the use of private final for the field ensures thread safety. The methods are concise and clear. However, the class could benefit from additional error handling or validation in the constructor.","tokens":435,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMFl","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/NativeImageRunnerBuildItem.java","name":"NativeImageRunnerBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/NativeImageRunnerBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"28.6","bestValue":false},{"metric":"lines","value":"29","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"3","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows good naming conventions, and includes clear and concise methods. The use of final for immutable fields and the presence of a static factory method for unknown GraalVMVersion are good practices. The only minor issue is the lack of comments, which could improve readability for future maintainers.","tokens":650,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMFs","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/NativeImageBuildItem.java","name":"NativeImageBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/NativeImageBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"10","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"70","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"19","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows standard Java conventions, and is easy to read. The class is final, indicating immutability, and the use of private final fields ensures thread safety. The constructor and getter methods are straightforward. However, the class could benefit from JavaDoc comments for better documentation.","tokens":346,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMFe","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/DeploymentResultBuildItem.java","name":"DeploymentResultBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/DeploymentResultBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"27","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"4","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows standard Java conventions. The use of Javadoc comments enhances readability, and the class is clearly defined with appropriate use of final and static keywords. However, the code could benefit from additional inline comments for better clarity on specific logic, and the deprecation notice suggests that this class may not be relevant for future use.","tokens":582,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMFf","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/ProcessInheritIODisabled.java","name":"ProcessInheritIODisabled.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/ProcessInheritIODisabled.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"5","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"25.8","bestValue":false},{"metric":"lines","value":"42","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"6","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear and concise comments explaining the purpose of the class and its methods. The use of final for class fields ensures immutability, and the inclusion of a deprecated constructor with proper annotation is good practice. The only minor issue is the TODO comment, which suggests an unresolved design decision.","tokens":846,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMFb","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/OutputTargetBuildItem.java","name":"OutputTargetBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/OutputTargetBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"8","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"20.0","bestValue":false},{"metric":"lines","value":"84","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"13","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows Java conventions, and is easy to read. The class is final, indicating immutability, and the use of private final fields ensures thread safety. The constructor and getter methods are straightforward. The only minor improvement could be adding JavaDoc comments for the constructor and methods.","tokens":357,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMFj","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/NativeImageSourceJarBuildItem.java","name":"NativeImageSourceJarBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/NativeImageSourceJarBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"5.6","bestValue":false},{"metric":"lines","value":"28","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"4","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and includes a clear Javadoc comment. The class is simple and concise, with appropriate use of access modifiers and a final keyword. However, the Javadoc could be slightly more detailed, and there could be additional comments within the code to improve readability further.","tokens":331,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMFg","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/PackageTypeBuildItem.java","name":"PackageTypeBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/PackageTypeBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"7.7","bestValue":false},{"metric":"lines","value":"21","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"85","reasoning":"The code is concise and follows standard Java conventions. The class is well-named and the comment provides a clear explanation of its purpose. However, the comment could be more detailed about the context in which this class is used. Overall, the readability and quality are high.","tokens":271,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMFp","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/LegacyJarRequiredBuildItem.java","name":"LegacyJarRequiredBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/LegacyJarRequiredBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"16.7","bestValue":false},{"metric":"lines","value":"11","bestValue":false},{"metric":"sqale_rating","value":"3.0","bestValue":false},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is concise and follows standard Java conventions. The class is well-named, and the comment provides a clear purpose. However, the comment could be more detailed, and there is a minor typo in \u0027classh\u0027 instead of \u0027class\u0027.","tokens":268,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMFi","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/UberJarRequiredBuildItem.java","name":"UberJarRequiredBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/UberJarRequiredBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"16.7","bestValue":false},{"metric":"lines","value":"11","bestValue":false},{"metric":"sqale_rating","value":"3.0","bestValue":false},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and is easy to read. The class is final, indicating immutability, and the use of a constructor to initialize the final field is appropriate. The method names are clear and descriptive. However, the class could benefit from JavaDoc comments for better documentation.","tokens":322,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMFu","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/CurateOutcomeBuildItem.java","name":"CurateOutcomeBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/CurateOutcomeBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"18","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and is easy to read. The class is final, indicating it is not meant to be subclassed, which is good practice for immutable objects. The use of a constructor to initialize the final field and a getter method for accessing it is appropriate. However, the class could benefit from additional comments or documentation for the constructor and getter method.","tokens":348,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMFn","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/AppCDSContainerImageBuildItem.java","name":"AppCDSContainerImageBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/AppCDSContainerImageBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.3","bestValue":false},{"metric":"lines","value":"20","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and is easy to read. The class is final, indicating immutability, and the use of a private final field ensures thread safety. The Javadoc comments are clear and concise. However, the class could benefit from additional comments or documentation on the constructor and methods for further clarity.","tokens":359,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMFh","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/AppCDSResultBuildItem.java","name":"AppCDSResultBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/AppCDSResultBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"14.3","bestValue":false},{"metric":"lines","value":"25","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is concise, well-documented, and follows standard Java conventions. The class is final, indicating it is not meant to be extended, which is appropriate for a marker class. However, the class lacks any methods or fields, which might limit its functionality.","tokens":273,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMFk","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/UpxCompressedBuildItem.java","name":"UpxCompressedBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/UpxCompressedBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"20.0","bestValue":false},{"metric":"lines","value":"10","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows Java conventions, and includes Javadoc comments for constructors. The use of final for class and fields ensures immutability, enhancing reliability. The deprecated constructor is properly annotated. The only minor issue is the lack of Javadoc for getter methods, but overall, the code is highly readable and maintainable.","tokens":617,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMFr","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/BuildSystemTargetBuildItem.java","name":"BuildSystemTargetBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/BuildSystemTargetBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"7","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"13.6","bestValue":false},{"metric":"lines","value":"61","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"11","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and includes clear documentation. The class is final, indicating immutability, and the use of a private final field ensures thread safety. The only minor issue is the lack of more detailed comments or error handling, but for this simple class, it\u0027s not critical.","tokens":369,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMFm","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/AppCDSRequestedBuildItem.java","name":"AppCDSRequestedBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/AppCDSRequestedBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"20.0","bestValue":false},{"metric":"lines","value":"26","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows Java conventions, and includes clear documentation. The class is final, ensuring immutability, and the use of private final fields promotes good encapsulation. The constructor and getter methods are straightforward and concise. The only minor improvement could be additional comments for the constructor and methods, but overall, the code is highly readable and of high quality.","tokens":435,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMFq","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/ArtifactResultBuildItem.java","name":"ArtifactResultBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/ArtifactResultBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"11.5","bestValue":false},{"metric":"lines","value":"39","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"6","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear separation of concerns and good use of encapsulation. The use of nested classes and enums is appropriate and enhances readability. The naming conventions are consistent and descriptive. However, the code could benefit from additional comments to explain the purpose of certain methods and classes, especially for those unfamiliar with the context.","tokens":845,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMFv","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/CompiledJavaVersionBuildItem.java","name":"CompiledJavaVersionBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/CompiledJavaVersionBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"20","bestValue":false},{"metric":"code_smells","value":"12","bestValue":false},{"metric":"cognitive_complexity","value":"2","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"125","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"17","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, follows standard Java conventions, and is easy to read. The class has a clear purpose and the methods are concise. However, the use of RuntimeException with a generic message could be improved by defining a more specific exception type or providing more context in the error message.","tokens":387,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMFZ","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeImageBuildRunnerError.java","name":"NativeImageBuildRunnerError.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeImageBuildRunnerError.java","language":"java","measures":[{"metric":"complexity","value":"5","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"34","bestValue":false},{"metric":"sqale_rating","value":"2.0","bestValue":false},{"metric":"statements","value":"5","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and is easy to read. The use of constants for error messages and clear method overrides enhance readability. The class is concise and its purpose is clear. However, the class name and method names could be more descriptive to improve understandability for someone unfamiliar with the context.","tokens":431,"sonarData":{"component":{"id":"AYvyvWT5pBbp5z45sMFG","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NoopNativeImageBuildRunner.java","name":"NoopNativeImageBuildRunner.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NoopNativeImageBuildRunner.java","language":"java","measures":[{"metric":"complexity","value":"5","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"35","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"5","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of logging, modular methods, and clear separation of concerns. The use of comments and descriptive method names enhances readability. However, the complexity of the logic and the length of the class could be reduced for better maintainability. Some methods could be further broken down to improve clarity.","tokens":4076,"sonarData":{"component":{"id":"AYvyvWT5pBbp5z45sMFQ","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/AppCDSBuildStep.java","name":"AppCDSBuildStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/AppCDSBuildStep.java","language":"java","measures":[{"metric":"complexity","value":"52","bestValue":false},{"metric":"code_smells","value":"6","bestValue":false},{"metric":"cognitive_complexity","value":"65","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"3.9","bestValue":false},{"metric":"lines","value":"388","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"170","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using utility methods and constants. It leverages inheritance and overrides methods appropriately. However, it could benefit from more comments to explain the logic, especially around conditional checks and the use of specific arguments. The use of external libraries is appropriate, but the readability could be improved with better variable naming and additional documentation.","tokens":748,"sonarData":{"component":{"id":"AYvyvWT5pBbp5z45sMFK","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeImageBuildLocalContainerRunner.java","name":"NativeImageBuildLocalContainerRunner.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeImageBuildLocalContainerRunner.java","language":"java","measures":[{"metric":"complexity","value":"16","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"21","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"1.9","bestValue":false},{"metric":"lines","value":"63","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"24","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, follows standard Java conventions, and is easy to read. The class and method names are descriptive, and the use of the BooleanSupplier interface is appropriate. However, the class lacks comments explaining the logic within the getAsBoolean method, and there is a minor typo in the comment (\u0027classh\u0027 instead of \u0027class\u0027).","tokens":360,"sonarData":{"component":{"id":"AYvyvWT5pBbp5z45sMFH","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeSourcesBuild.java","name":"NativeSourcesBuild.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeSourcesBuild.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"17.6","bestValue":false},{"metric":"lines","value":"27","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper logging, exception handling, and modular methods. The use of streams and optional is appropriate. However, the code could benefit from additional comments for better readability, especially in complex methods like runUpxInContainer. The naming conventions are clear, but the class is quite large and could be broken down into smaller classes or methods for better maintainability.","tokens":2128,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMFX","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/UpxCompressionBuildStep.java","name":"UpxCompressionBuildStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/UpxCompressionBuildStep.java","language":"java","measures":[{"metric":"complexity","value":"34","bestValue":false},{"metric":"code_smells","value":"4","bestValue":false},{"metric":"cognitive_complexity","value":"42","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"1.1","bestValue":false},{"metric":"lines","value":"212","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"100","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as encapsulation and method overriding. The use of streams for building commands is efficient. However, the objcopyExists method could be optimized for readability, and some comments explaining the logic would improve maintainability.","tokens":617,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMFW","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeImageBuildLocalRunner.java","name":"NativeImageBuildLocalRunner.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeImageBuildLocalRunner.java","language":"java","measures":[{"metric":"complexity","value":"12","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"11","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"1.8","bestValue":false},{"metric":"lines","value":"70","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"22","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using constants, logging, and exception handling. The comments are helpful and provide context. However, the code could benefit from more modularization to improve readability and maintainability. Some methods are quite long and could be broken down into smaller, more focused methods.","tokens":1207,"sonarData":{"component":{"id":"AYvyvWT5pBbp5z45sMFI","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeImageBuildRemoteContainerRunner.java","name":"NativeImageBuildRemoteContainerRunner.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeImageBuildRemoteContainerRunner.java","language":"java","measures":[{"metric":"complexity","value":"9","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"2","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"11.1","bestValue":false},{"metric":"lines","value":"95","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"29","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows good naming conventions, and includes a clear Javadoc comment explaining the purpose and usage of the class. The use of the BooleanSupplier interface is appropriate and the logic is straightforward. However, the class could benefit from additional error handling or validation, and the Javadoc could be more detailed in explaining the parameters and return values.","tokens":427,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMFY","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeBuild.java","name":"NativeBuild.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeBuild.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"33.3","bestValue":false},{"metric":"lines","value":"32","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper exception handling, use of logging, and clear method abstractions. The use of comments is minimal but sufficient. However, the code could benefit from more detailed documentation and some methods could be broken down further for better readability. Overall, it is a high-quality code with minor areas for improvement.","tokens":1683,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMFV","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeImageBuildRunner.java","name":"NativeImageBuildRunner.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeImageBuildRunner.java","language":"java","measures":[{"metric":"complexity","value":"25","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"21","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"6.8","bestValue":false},{"metric":"lines","value":"174","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"59","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using meaningful method names and handling exceptions. The use of annotations like @BuildStep and dependency injection is clear and appropriate. However, the code could benefit from additional comments to explain the purpose of certain operations, especially for those unfamiliar with the Quarkus framework. Overall, it is readable and maintainable.","tokens":736,"sonarData":{"component":{"id":"AYvyvWT5pBbp5z45sMFN","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/FileSystemResourcesBuildStep.java","name":"FileSystemResourcesBuildStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/FileSystemResourcesBuildStep.java","language":"java","measures":[{"metric":"complexity","value":"5","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"3","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"2.1","bestValue":false},{"metric":"lines","value":"55","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"12","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard naming conventions, and includes a clear Javadoc comment explaining the class\u0027s purpose. The use of a constructor to initialize the PackageConfig dependency is appropriate. The only minor issue is the lack of visibility modifier for the constructor, which could be intentional but might benefit from being explicitly stated.","tokens":369,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMFR","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeOrNativeSourcesBuild.java","name":"NativeOrNativeSourcesBuild.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeOrNativeSourcesBuild.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"22.2","bestValue":false},{"metric":"lines","value":"28","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using meaningful variable names, proper exception handling, and clear comments. The use of regular expressions and collections is appropriate. However, the nested loops and conditionals could be simplified for better readability. The class and method documentation is helpful, but more inline comments could improve understanding of complex logic.","tokens":1636,"sonarData":{"component":{"id":"AYvyvWT5pBbp5z45sMFM","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/ReportAnalyzer.java","name":"ReportAnalyzer.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/ReportAnalyzer.java","language":"java","measures":[{"metric":"complexity","value":"32","bestValue":false},{"metric":"code_smells","value":"13","bestValue":false},{"metric":"cognitive_complexity","value":"54","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"6.3","bestValue":false},{"metric":"lines","value":"181","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"87","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using try-with-resources for resource management and handling exceptions properly. The use of helper methods like safeWaitFor improves readability. However, the code could benefit from more comments explaining the logic, and the swallowing of IOException without logging might make debugging difficult.","tokens":563,"sonarData":{"component":{"id":"AYvyvWT5pBbp5z45sMFJ","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/LinuxIDUtil.java","name":"LinuxIDUtil.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/LinuxIDUtil.java","language":"java","measures":[{"metric":"complexity","value":"6","bestValue":false},{"metric":"code_smells","value":"4","bestValue":false},{"metric":"cognitive_complexity","value":"7","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"3.7","bestValue":false},{"metric":"lines","value":"62","bestValue":false},{"metric":"sqale_rating","value":"2.0","bestValue":false},{"metric":"statements","value":"26","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows Java conventions, and includes comprehensive documentation for each method and field. The use of annotations and interfaces is appropriate, and the code is modular and easy to understand. The only minor issue is the presence of deprecated methods, which could be cleaned up in future versions.","tokens":4387,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMFy","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/NativeConfig.java","name":"NativeConfig.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/NativeConfig.java","language":"java","measures":[{"metric":"complexity","value":"5","bestValue":false},{"metric":"code_smells","value":"18","bestValue":false},{"metric":"cognitive_complexity","value":"4","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"56.5","bestValue":false},{"metric":"lines","value":"533","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"7","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using enums, annotations, and JavaDoc comments. The use of Optional and ConfigItem annotations enhances readability and maintainability. However, the extensive use of deprecated fields and methods could be confusing. The class is quite large, which might make it harder to navigate. Overall, the code is clear and well-documented but could benefit from some refactoring to remove deprecated elements.","tokens":3118,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMF0","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/PackageConfig.java","name":"PackageConfig.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/PackageConfig.java","language":"java","measures":[{"metric":"complexity","value":"11","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"2","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"53.5","bestValue":false},{"metric":"lines","value":"356","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"12","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows good naming conventions, and includes comments explaining its purpose. The use of meaningful method names and clear logic enhances readability. However, it could benefit from additional comments within methods to explain complex logic and edge cases.","tokens":566,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sML3","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/ConstructorPropertiesProcessor.java","name":"ConstructorPropertiesProcessor.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/ConstructorPropertiesProcessor.java","language":"java","measures":[{"metric":"complexity","value":"5","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"2","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"6.1","bestValue":false},{"metric":"lines","value":"43","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"10","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-organized and follows a consistent naming convention, making it easy to read and understand. The use of constants for capabilities is clear and logical. However, the class is quite long, which could make it harder to navigate. Adding some grouping or categorization comments could improve readability further.","tokens":1851,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sML9","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/Capability.java","name":"Capability.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/Capability.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"12","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.7","bestValue":false},{"metric":"lines","value":"159","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java naming conventions, and includes useful comments and references to documentation. Methods are concise and focused on single responsibilities. The use of constants and helper methods enhances readability. However, the code could benefit from additional unit tests and more detailed error handling.","tokens":786,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMMU","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/bean/JavaBeanUtil.java","name":"JavaBeanUtil.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/bean/JavaBeanUtil.java","language":"java","measures":[{"metric":"complexity","value":"18","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"18","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"6.8","bestValue":false},{"metric":"lines","value":"74","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"24","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear and concise comments explaining the purpose of each method and parameter. The use of final for immutable fields enhances readability and maintainability. The naming conventions are consistent and meaningful. The only minor issue is the lack of special characters in the comments, which could slightly improve readability.","tokens":1060,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMMI","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/CodeGenContext.java","name":"CodeGenContext.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/CodeGenContext.java","language":"java","measures":[{"metric":"complexity","value":"8","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"44.3","bestValue":false},{"metric":"lines","value":"118","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"14","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and uses meaningful constants for readability. The logic is clear, and the use of ByteBuffer is appropriate for the task. However, the TODO comment indicates incomplete functionality, and the method could benefit from additional comments for clarity. Exception handling could be more descriptive.","tokens":926,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLE","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/index/ConstPoolScanner.java","name":"ConstPoolScanner.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/index/ConstPoolScanner.java","language":"java","measures":[{"metric":"complexity","value":"22","bestValue":false},{"metric":"code_smells","value":"5","bestValue":false},{"metric":"cognitive_complexity","value":"9","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"5.7","bestValue":false},{"metric":"lines","value":"93","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"35","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, uses appropriate annotations, and includes clear comments for each field. The use of Optional for optional fields is a good practice. However, the class lacks methods, which limits its functionality and makes it less comprehensive.","tokens":342,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLF","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/index/IndexDependencyConfig.java","name":"IndexDependencyConfig.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/index/IndexDependencyConfig.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"18.8","bestValue":false},{"metric":"lines","value":"30","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of static imports, clear method separation, and appropriate exception handling. The use of logging is consistent and helpful for debugging. However, the code could benefit from additional comments for better readability, especially in complex methods. The nested try-catch blocks and some long methods slightly reduce readability.","tokens":2743,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLG","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/index/IndexingUtil.java","name":"IndexingUtil.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/index/IndexingUtil.java","language":"java","measures":[{"metric":"complexity","value":"49","bestValue":false},{"metric":"code_smells","value":"10","bestValue":false},{"metric":"cognitive_complexity","value":"79","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"1.1","bestValue":false},{"metric":"lines","value":"296","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"120","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, uses meaningful variable names, and leverages appropriate data structures like ConcurrentHashMap for thread safety. The use of Optional\u003cClassInfo\u003e indicates good handling of potential null values. However, the class lacks comments and documentation, which could improve readability and maintainability.","tokens":315,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLI","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/index/PersistentClassIndex.java","name":"PersistentClassIndex.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/index/PersistentClassIndex.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"18","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"10","reasoning":"The class is empty and lacks any functionality, methods, or documentation. While it is syntactically correct, it provides no value or context, making it difficult to assess readability or quality.","tokens":219,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLH","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/index/ConstPoolPredicate.java","name":"ConstPoolPredicate.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/index/ConstPoolPredicate.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"5","bestValue":false},{"metric":"sqale_rating","value":"2.0","bestValue":false},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using meaningful variable names, proper indentation, and comments for clarity. The use of Java\u0027s standard libraries and Quarkus-specific classes is appropriate. However, the code is quite complex and lengthy, which might make it harder to understand for someone unfamiliar with the context. Some methods could be broken down further to improve readability.","tokens":3124,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLK","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/index/ApplicationArchiveBuildStep.java","name":"ApplicationArchiveBuildStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/index/ApplicationArchiveBuildStep.java","language":"java","measures":[{"metric":"complexity","value":"55","bestValue":false},{"metric":"code_smells","value":"12","bestValue":false},{"metric":"cognitive_complexity","value":"103","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"2.7","bestValue":false},{"metric":"lines","value":"326","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"123","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, follows good naming conventions, and includes comments for clarity. It makes good use of Java collections and streams, and the logic is clear and easy to follow. However, the class is quite large and could benefit from being broken down into smaller, more manageable pieces. Additionally, some methods are quite complex and could be simplified for better readability.","tokens":2734,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLJ","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/index/IndexWrapper.java","name":"IndexWrapper.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/index/IndexWrapper.java","language":"java","measures":[{"metric":"complexity","value":"66","bestValue":false},{"metric":"code_smells","value":"13","bestValue":false},{"metric":"cognitive_complexity","value":"76","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"1.0","bestValue":false},{"metric":"lines","value":"329","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"151","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, with clear comments and appropriate use of annotations. The class and variable names are descriptive, enhancing readability. However, the TODO comment indicates that the code is not fully implemented, which slightly reduces the overall quality.","tokens":393,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLs","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/PlatformConfig.java","name":"PlatformConfig.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/PlatformConfig.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"33.3","bestValue":false},{"metric":"lines","value":"33","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using interfaces, enums, and logging. The use of nested classes for different strategies is clear and logical. However, the code could benefit from additional comments for complex sections, and some methods are quite long, which can affect readability. Exception handling is thorough but could be simplified in some areas.","tokens":1692,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLm","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/IsDockerWorking.java","name":"IsDockerWorking.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/IsDockerWorking.java","language":"java","measures":[{"metric":"complexity","value":"17","bestValue":false},{"metric":"code_smells","value":"5","bestValue":false},{"metric":"cognitive_complexity","value":"19","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.4","bestValue":false},{"metric":"lines","value":"192","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"54","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of access modifiers, exception handling, and clear separation of concerns. The use of comments is minimal but the logic is clear. The naming conventions are consistent and descriptive. However, the complexity of the reflection logic and the lack of inline comments explaining the more intricate parts could make it harder for less experienced developers to understand.","tokens":1334,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sML5","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/BooleanSupplierFactoryBuildItem.java","name":"BooleanSupplierFactoryBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/BooleanSupplierFactoryBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"26","bestValue":false},{"metric":"code_smells","value":"5","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"3.1","bestValue":false},{"metric":"lines","value":"135","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"67","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using annotations, optional values, and clear method names. The use of nested if-else statements could be simplified for better readability. The comments are minimal but the class and method names are descriptive enough to understand the purpose. Overall, the code is clean and maintainable.","tokens":998,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMMF","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/SnapStartProcessor.java","name":"SnapStartProcessor.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/SnapStartProcessor.java","language":"java","measures":[{"metric":"complexity","value":"21","bestValue":false},{"metric":"code_smells","value":"5","bestValue":false},{"metric":"cognitive_complexity","value":"32","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"1.3","bestValue":false},{"metric":"lines","value":"92","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"31","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and includes a clear comment explaining the purpose of the method. The use of annotations and descriptive method names enhances readability. However, the comment could be more concise, and the class could benefit from additional documentation or context about its role in the larger application.","tokens":379,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJy","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/ResourceBundleStep.java","name":"ResourceBundleStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/ResourceBundleStep.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"25.0","bestValue":false},{"metric":"lines","value":"18","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of comments, meaningful variable names, and clear separation of concerns. However, it could benefit from additional error handling and some methods are quite long, which can affect readability. The use of nested loops and conditions could be simplified for better clarity.","tokens":1617,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJ2","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/CapabilityAggregationStep.java","name":"CapabilityAggregationStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/CapabilityAggregationStep.java","language":"java","measures":[{"metric":"complexity","value":"29","bestValue":false},{"metric":"code_smells","value":"6","bestValue":false},{"metric":"cognitive_complexity","value":"57","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"6.4","bestValue":false},{"metric":"lines","value":"168","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"73","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using private methods to encapsulate logic and using meaningful variable names. The use of Java collections and the Json builder pattern is appropriate. However, the code could benefit from additional comments to explain the purpose of certain blocks, and some methods are quite long, which can affect readability.","tokens":1637,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKA","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/NativeImageJNIConfigStep.java","name":"NativeImageJNIConfigStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/NativeImageJNIConfigStep.java","language":"java","measures":[{"metric":"complexity","value":"31","bestValue":false},{"metric":"code_smells","value":"7","bestValue":false},{"metric":"cognitive_complexity","value":"47","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"165","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"81","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using meaningful variable names, comments, and proper exception handling. The use of concurrent collections and streams enhances readability and performance. However, the class is quite large and complex, which can make it harder to understand and maintain. Breaking it down into smaller methods or classes could improve readability.","tokens":4163,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKO","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/ClassTransformingBuildStep.java","name":"ClassTransformingBuildStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/ClassTransformingBuildStep.java","language":"java","measures":[{"metric":"complexity","value":"73","bestValue":false},{"metric":"code_smells","value":"23","bestValue":false},{"metric":"cognitive_complexity","value":"130","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"2.1","bestValue":false},{"metric":"lines","value":"399","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"190","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, imports are clear, and the method is concise. The use of descriptive names for classes and methods enhances readability. However, the logic within the method could benefit from additional comments to explain the purpose of fetching the profile key and its value. Overall, the code is clean and follows good practices.","tokens":371,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKE","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/ProfileBuildStep.java","name":"ProfileBuildStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/ProfileBuildStep.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"16","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of access modifiers, clear method names, and logical flow. The use of comments to explain \u0027should never happen\u0027 scenarios is helpful. However, the code could benefit from additional error handling and possibly refactoring to reduce redundancy in the \u0027for\u0027 loops. Overall, it is readable and maintainable.","tokens":845,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJ5","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/ChangedClassesBuildStep.java","name":"ChangedClassesBuildStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/ChangedClassesBuildStep.java","language":"java","measures":[{"metric":"complexity","value":"9","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"12","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"6.5","bestValue":false},{"metric":"lines","value":"71","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"35","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using meaningful variable names, comments, and proper logging. The use of annotations and build steps is clear and appropriate. However, the method build() is quite long and could benefit from being broken down into smaller, more manageable methods to improve readability and maintainability. Additionally, the TODO comment indicates some uncertainty in the API design.","tokens":1638,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJ-","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/NativeImageConfigBuildStep.java","name":"NativeImageConfigBuildStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/NativeImageConfigBuildStep.java","language":"java","measures":[{"metric":"complexity","value":"21","bestValue":false},{"metric":"code_smells","value":"5","bestValue":false},{"metric":"cognitive_complexity","value":"26","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"7.5","bestValue":false},{"metric":"lines","value":"123","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"41","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using meaningful class and method names, proper imports, and clear separation of concerns. The use of annotations and static final constants enhances readability. However, the inline comment \u0027XXX replace this with constant-folded service loader impl\u0027 suggests a potential area for improvement. Overall, the code is clean and maintainable.","tokens":878,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKX","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/ConfigBuildSteps.java","name":"ConfigBuildSteps.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/ConfigBuildSteps.java","language":"java","measures":[{"metric":"complexity","value":"6","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"3","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"1.6","bestValue":false},{"metric":"lines","value":"74","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"12","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as logging, exception handling, and use of AtomicReference for thread safety. The method and variable names are descriptive, and the logic is clear. However, the code could benefit from additional comments explaining the purpose of certain operations, and the exception handling could be more robust instead of ignoring exceptions.","tokens":863,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKD","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/CompiledJavaVersionBuildStep.java","name":"CompiledJavaVersionBuildStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/CompiledJavaVersionBuildStep.java","language":"java","measures":[{"metric":"complexity","value":"7","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"12","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.2","bestValue":false},{"metric":"lines","value":"70","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"23","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, follows standard Java conventions, and is easy to read. The class and method names are descriptive, and the use of annotations is appropriate. However, the code could benefit from additional comments to explain the purpose and context of the class and method.","tokens":306,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKF","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/ApplicationInfoBuildStep.java","name":"ApplicationInfoBuildStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/ApplicationInfoBuildStep.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"14","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of logging, exception handling, and clear method separation. The use of inner classes for the FileVisitor implementation is appropriate. However, the readability could be slightly improved with more comments explaining the purpose of key sections, and the method names could be more descriptive. Overall, it is a high-quality and readable piece of code.","tokens":987,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKI","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/ApplicationIndexBuildStep.java","name":"ApplicationIndexBuildStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/ApplicationIndexBuildStep.java","language":"java","measures":[{"metric":"complexity","value":"15","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"23","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"93","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"29","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of imports, clear method names, and logical flow. The use of comments could improve readability, and some variable names could be more descriptive. Overall, it is clean and maintainable.","tokens":793,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKS","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/CombinedIndexBuildStep.java","name":"CombinedIndexBuildStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/CombinedIndexBuildStep.java","language":"java","measures":[{"metric":"complexity","value":"6","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"6","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"70","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"24","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows good naming conventions, and uses appropriate Java features. The use of try-with-resources for StringWriter is commendable. However, the code could benefit from additional comments for better readability and understanding, especially for complex logic sections. Overall, it demonstrates high quality and readability.","tokens":740,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJ8","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/NativeImageSerializationConfigStep.java","name":"NativeImageSerializationConfigStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/NativeImageSerializationConfigStep.java","language":"java","measures":[{"metric":"complexity","value":"6","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"8","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"61","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"22","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using meaningful variable names and organizing methods logically. The use of helper methods like addReflectiveClass and addReflectiveField improves readability. However, the class is quite large and complex, which can make it harder to understand at a glance. Some comments explaining the purpose of key sections would enhance readability further.","tokens":2078,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKM","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/NativeImageReflectConfigStep.java","name":"NativeImageReflectConfigStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/NativeImageReflectConfigStep.java","language":"java","measures":[{"metric":"complexity","value":"40","bestValue":false},{"metric":"code_smells","value":"9","bestValue":false},{"metric":"cognitive_complexity","value":"67","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.5","bestValue":false},{"metric":"lines","value":"213","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"109","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using meaningful variable names and separating concerns into different methods. The use of streams and collectors is appropriate and enhances readability. However, the code could benefit from additional comments to explain the logic, especially for those unfamiliar with the specific libraries and annotations used.","tokens":679,"sonarData":{"component":{"id":"AYwuTxihSgLxngfU4PoM","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/ClassPathSystemPropBuildStep.java","name":"ClassPathSystemPropBuildStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/ClassPathSystemPropBuildStep.java","language":"java","measures":[{"metric":"complexity","value":"8","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"6","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"54","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"17","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, uses meaningful variable names, and includes logging for important warnings. The use of streams and lambda expressions enhances readability. However, the log message is quite lengthy and could be broken down for better readability. The suppression of deprecation warnings without context might also be a concern.","tokens":587,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJ_","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/NativeImageAllowIncompleteClasspathAggregateStep.java","name":"NativeImageAllowIncompleteClasspathAggregateStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/NativeImageAllowIncompleteClasspathAggregateStep.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"2","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"39","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"5","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using annotations and streams. The method names are descriptive, and the use of streams makes the code concise. However, the class and method names could be more descriptive to improve readability further. Additionally, there are no comments or documentation to explain the purpose of the class and its methods.","tokens":387,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKU","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/BlockingOperationControlBuildStep.java","name":"BlockingOperationControlBuildStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/BlockingOperationControlBuildStep.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"22","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, uses meaningful method names, and leverages Java 8 features like Optional and Streams effectively. The use of annotations is clear and appropriate. However, there are minor readability issues such as the lack of braces for single-line if statements, which can lead to maintenance challenges. Overall, the code is clean and follows good practices.","tokens":573,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJ4","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/PreloadClassesBuildStep.java","name":"PreloadClassesBuildStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/PreloadClassesBuildStep.java","language":"java","measures":[{"metric":"complexity","value":"6","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"3","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"3.1","bestValue":false},{"metric":"lines","value":"38","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"8","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using static imports, meaningful method names, and clear separation of concerns. The use of comments and annotations enhances readability. However, the class is quite large and complex, which can make it harder to understand and maintain. Breaking it into smaller classes or methods could improve readability and manageability.","tokens":6979,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJ6","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/ConfigGenerationBuildStep.java","name":"ConfigGenerationBuildStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/ConfigGenerationBuildStep.java","language":"java","measures":[{"metric":"complexity","value":"76","bestValue":false},{"metric":"code_smells","value":"9","bestValue":false},{"metric":"cognitive_complexity","value":"76","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"3.3","bestValue":false},{"metric":"lines","value":"787","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"270","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, concise, and follows good practices such as immutability and utility class design. The naming conventions are clear, and the use of constants is appropriate. However, the class lacks documentation comments, which could improve readability and maintainability.","tokens":310,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKR","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/KotlinUtil.java","name":"KotlinUtil.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/KotlinUtil.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"17","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear separation of concerns and appropriate use of comments to explain the purpose of methods and classes. The use of constants for warning messages and the logical flow in methods enhance readability. However, the code could benefit from additional inline comments for complex logic, and some method names could be more descriptive.","tokens":1796,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJ1","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/LocaleProcessor.java","name":"LocaleProcessor.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/LocaleProcessor.java","language":"java","measures":[{"metric":"complexity","value":"23","bestValue":false},{"metric":"code_smells","value":"17","bestValue":false},{"metric":"cognitive_complexity","value":"12","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"21.4","bestValue":false},{"metric":"lines","value":"158","bestValue":false},{"metric":"sqale_rating","value":"2.0","bestValue":false},{"metric":"statements","value":"33","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using annotations and Optional to handle potential null values. The class and method names are descriptive, and the logic is clear. However, the class lacks comments explaining the purpose of the methods and parameters, which could improve readability for other developers.","tokens":560,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKK","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/ThreadPoolSetup.java","name":"ThreadPoolSetup.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/ThreadPoolSetup.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"3.3","bestValue":false},{"metric":"lines","value":"39","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using meaningful variable names, comments, and modular methods. The use of functional interfaces and predicates enhances readability. However, the complexity of the logic, especially with nested loops and conditionals, could be simplified for better readability. Additionally, the class is quite long, which might make it harder to maintain.","tokens":2880,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKL","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/ReflectiveHierarchyStep.java","name":"ReflectiveHierarchyStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/ReflectiveHierarchyStep.java","language":"java","measures":[{"metric":"complexity","value":"60","bestValue":false},{"metric":"code_smells","value":"9","bestValue":false},{"metric":"cognitive_complexity","value":"63","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"4.0","bestValue":false},{"metric":"lines","value":"311","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"100","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, uses meaningful variable names, and leverages modern Java features like streams and optionals. The class and method names are clear, and the logic is straightforward. However, the class lacks comments and documentation, which could improve readability and maintainability.","tokens":367,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJ9","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/DevModeBuildStep.java","name":"DevModeBuildStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/DevModeBuildStep.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"19","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"3","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using streams, immutability, and clear method separation. The use of comments helps in understanding the logic. However, the class could benefit from more detailed JavaDoc comments for methods and fields, and the nested logic could be simplified for better readability.","tokens":1056,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKW","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/DevServicesConfigBuildStep.java","name":"DevServicesConfigBuildStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/DevServicesConfigBuildStep.java","language":"java","measures":[{"metric":"complexity","value":"11","bestValue":false},{"metric":"code_smells","value":"10","bestValue":false},{"metric":"cognitive_complexity","value":"11","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.3","bestValue":false},{"metric":"lines","value":"81","bestValue":false},{"metric":"sqale_rating","value":"2.0","bestValue":false},{"metric":"statements","value":"24","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using meaningful variable names and separating concerns into methods. The use of try-with-resources for handling IO operations is commendable. However, the code could benefit from additional comments to improve readability and understanding, especially for complex logic sections. Overall, it is clean and maintainable.","tokens":970,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKQ","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/NativeImageResourceConfigStep.java","name":"NativeImageResourceConfigStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/NativeImageResourceConfigStep.java","language":"java","measures":[{"metric":"complexity","value":"9","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"10","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"87","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"43","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using streams and lambda expressions for data processing. The comments are clear and provide context. However, the method is quite long and could benefit from being broken down into smaller methods for better readability. Additionally, returning null could be avoided by returning an empty list instead.","tokens":736,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKC","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/ReflectionDiagnosticProcessor.java","name":"ReflectionDiagnosticProcessor.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/ReflectionDiagnosticProcessor.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"2","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.0","bestValue":false},{"metric":"lines","value":"58","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"8","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using meaningful variable names and handling exceptions. The use of Java\u0027s standard libraries and Quarkus annotations is appropriate. However, the readability could be slightly improved by adding more comments to explain the logic, especially in the registerPackageResources method. Additionally, the code could benefit from breaking down complex expressions into smaller, more manageable statements.","tokens":798,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJ3","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/NativeImageResourcesStep.java","name":"NativeImageResourcesStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/NativeImageResourcesStep.java","language":"java","measures":[{"metric":"complexity","value":"9","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"9","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"66","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"20","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and uses meaningful class and method names. The use of annotations and static imports is appropriate. The logic is clear and concise. However, the code could benefit from additional comments to improve readability for those unfamiliar with the specific framework or context.","tokens":419,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKV","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/DeprecatedRuntimePropertiesBuildStep.java","name":"DeprecatedRuntimePropertiesBuildStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/DeprecatedRuntimePropertiesBuildStep.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"27","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"3","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper logging, exception handling, and clear method separation. The use of comments and meaningful variable names enhances readability. However, the complexity of the `readBannerFile` and `getBanner` methods could be reduced for better maintainability. Additionally, the use of nested try-catch blocks and the Scanner could be optimized.","tokens":1194,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJz","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/BannerProcessor.java","name":"BannerProcessor.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/BannerProcessor.java","language":"java","measures":[{"metric":"complexity","value":"16","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"18","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"4.7","bestValue":false},{"metric":"lines","value":"124","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"46","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, uses meaningful names, and leverages Java Streams for concise operations. It follows good practices with annotations and dependency injection. However, it lacks comments and documentation, which could improve readability and maintainability for other developers.","tokens":359,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJ0","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/ShutdownListenerBuildStep.java","name":"ShutdownListenerBuildStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/ShutdownListenerBuildStep.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"22","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of collections and clear method naming. The use of comments enhances readability. However, the code could benefit from more detailed comments explaining the purpose of certain operations, and the variable names could be more descriptive to improve clarity.","tokens":601,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKJ","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/AdditionalClassLoaderResourcesBuildStep.java","name":"AdditionalClassLoaderResourcesBuildStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/AdditionalClassLoaderResourcesBuildStep.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"6","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.6","bestValue":false},{"metric":"lines","value":"46","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"13","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, follows standard Java conventions, and uses meaningful class and method names. The use of annotations and dependency injection is clear and appropriate. However, there is a minor issue with the lack of comments, which could improve readability and maintainability for other developers.","tokens":496,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJ7","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/CurateOutcomeBuildStep.java","name":"CurateOutcomeBuildStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/CurateOutcomeBuildStep.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"3","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"34","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"6","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, uses meaningful names, and includes comments explaining the purpose of the method. It follows good practices such as using try-with-resources and handling exceptions. The use of static imports and method chaining is clear and concise. However, the complexity of the logic within the method could be simplified for better readability.","tokens":814,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKG","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/RuntimeConfigSetupBuildStep.java","name":"RuntimeConfigSetupBuildStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/RuntimeConfigSetupBuildStep.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.3","bestValue":false},{"metric":"lines","value":"60","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"10","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows good naming conventions, and uses appropriate Java features. The use of try-with-resources for StringWriter is commendable. However, the code could benefit from additional comments for better readability and maintainability.","tokens":544,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKP","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/NativeImageProxyConfigStep.java","name":"NativeImageProxyConfigStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/NativeImageProxyConfigStep.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"4","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"43","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"14","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using annotations and encapsulation. The class and method names are clear and descriptive. However, the use of an underscore in the variable name \u0027native_\u0027 is unconventional and could be improved for better readability. Additionally, more comments could be added to explain the purpose of the methods and the class.","tokens":493,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sML-","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/SslProcessor.java","name":"SslProcessor.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/SslProcessor.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"3.7","bestValue":false},{"metric":"lines","value":"38","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using final for constants and synchronized methods for thread safety. The naming conventions are clear, and the logic is straightforward. However, the lack of comments and JavaDoc for methods reduces readability slightly. Additionally, the use of magic strings like \u0027java/lang/Object\u0027 could be improved by defining them as constants.","tokens":975,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMJx","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/AccessorFinder.java","name":"AccessorFinder.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/AccessorFinder.java","language":"java","measures":[{"metric":"complexity","value":"15","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"12","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"79","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"43","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, with clear comments and appropriate use of annotations. The use of Optional for directory configurations is a good practice. However, there is a TODO comment indicating that the code needs refactoring to actually use the values, which suggests incomplete implementation. The readability is high, but the presence of TODO indicates potential future changes.","tokens":541,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMMT","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/DebugConfig.java","name":"DebugConfig.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/DebugConfig.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"37.0","bestValue":false},{"metric":"lines","value":"49","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, uses meaningful class and method names, and follows standard Java conventions. The use of the BuildStep annotation and ReflectiveClassBuildItem is appropriate for the context. However, the code could benefit from comments explaining the purpose of the setupCollectionClasses method and why these specific classes are being registered.","tokens":363,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHb","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/CollectionClassProcessor.java","name":"CollectionClassProcessor.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/CollectionClassProcessor.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"21","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, uses clear and concise comments, and follows standard Java conventions. The use of annotations is appropriate and enhances readability. The only minor issue is a small typo in the comment (\u0027classh\u0027 instead of \u0027class\u0027).","tokens":326,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMMC","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/naming/NamingConfig.java","name":"NamingConfig.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/naming/NamingConfig.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"27.3","bestValue":false},{"metric":"lines","value":"18","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and is easy to read. The class and method names are descriptive, and the use of comments enhances understanding. The only minor issue is the comment at the end, \u0027This is the end of the classh file,\u0027 which seems unnecessary and contains a typo.","tokens":377,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLZ","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/IsRemoteDevClient.java","name":"IsRemoteDevClient.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/IsRemoteDevClient.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"12.5","bestValue":false},{"metric":"lines","value":"25","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and is easy to read. The class and method names are descriptive, and the use of comments enhances understanding. The logic is straightforward and concise. However, the class could benefit from additional error handling or validation to ensure robustness.","tokens":407,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMMB","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/IsNormalNotRemoteDev.java","name":"IsNormalNotRemoteDev.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/IsNormalNotRemoteDev.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"10.5","bestValue":false},{"metric":"lines","value":"28","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"3","bestValue":false}]}}}
{"score":"85","reasoning":"The code is concise, well-structured, and follows standard Java conventions. The use of annotations and clear method naming enhances readability. However, the class lacks comments and documentation, which could help in understanding the purpose and context of the code.","tokens":309,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLC","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/ForkJoinPoolProcessor.java","name":"ForkJoinPoolProcessor.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/ForkJoinPoolProcessor.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"14","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear and concise comments explaining each configuration item. The use of annotations and optional types is appropriate. The naming conventions are consistent and meaningful. The only minor issue is the lack of a package-level comment, but this does not significantly impact readability or quality.","tokens":627,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMMG","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/SnapStartConfig.java","name":"SnapStartConfig.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/SnapStartConfig.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"45.5","bestValue":false},{"metric":"lines","value":"55","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"75","reasoning":"The code is generally well-structured and follows standard Java conventions. The class and method names are descriptive, and the use of annotations is appropriate. However, the method name \u0027IsDockerWorking\u0027 should follow camelCase convention and start with a lowercase letter. Additionally, the logic within the method is minimal and could benefit from comments or additional context.","tokens":337,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLD","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/DockerStatusProcessor.java","name":"DockerStatusProcessor.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/DockerStatusProcessor.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"14","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good object-oriented principles. It uses clear naming conventions and has a logical flow. The use of builder pattern enhances readability and maintainability. However, the class is quite large and complex, which can make it harder to understand at a glance. Some comments explaining the purpose of key sections would improve readability further.","tokens":3014,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMMH","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/QuarkusAugmentor.java","name":"QuarkusAugmentor.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/QuarkusAugmentor.java","language":"java","measures":[{"metric":"complexity","value":"47","bestValue":false},{"metric":"code_smells","value":"8","bestValue":false},{"metric":"cognitive_complexity","value":"18","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"1.9","bestValue":false},{"metric":"lines","value":"362","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"116","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows good naming conventions, and includes Javadoc comments. The use of generics and immutability for the list of additional interfaces is commendable. However, it lacks more extensive documentation and unit tests, which could improve maintainability and readability.","tokens":754,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLp","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/proxy/ProxyConfiguration.java","name":"ProxyConfiguration.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/proxy/ProxyConfiguration.java","language":"java","measures":[{"metric":"complexity","value":"16","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"2.8","bestValue":false},{"metric":"lines","value":"94","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"24","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of access modifiers, clear method names, and thorough error handling. The use of comments and Javadoc helps in understanding the purpose of the class and its methods. However, the complexity of the class and the use of reflection and dynamic proxy generation can make it harder to read and maintain. The code could benefit from further modularization to improve readability.","tokens":2856,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLq","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/proxy/ProxyFactory.java","name":"ProxyFactory.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/proxy/ProxyFactory.java","language":"java","measures":[{"metric":"complexity","value":"60","bestValue":false},{"metric":"code_smells","value":"9","bestValue":false},{"metric":"cognitive_complexity","value":"73","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"3.1","bestValue":false},{"metric":"lines","value":"327","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"141","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear comments explaining the purpose and usage of the class. The use of try-catch blocks for exception handling is appropriate. The naming conventions are consistent and meaningful. However, the class could benefit from additional comments within methods to explain the logic further. Overall, the readability and quality are high.","tokens":566,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLo","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/proxy/InjectIntoClassloaderClassOutput.java","name":"InjectIntoClassloaderClassOutput.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/proxy/InjectIntoClassloaderClassOutput.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"3","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.8","bestValue":false},{"metric":"lines","value":"46","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"9","bestValue":false}]}}}
{"score":"95","reasoning":"The code is highly readable and well-organized. It uses an enum to list features, which is appropriate and clear. The method getName() is concise and effectively transforms the enum names. The use of comments and the package structure is also good. However, the long list of enum constants could be grouped or documented for better readability.","tokens":1381,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMMK","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/Feature.java","name":"Feature.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/Feature.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"1.3","bestValue":false},{"metric":"lines","value":"167","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear and concise comments explaining the purpose of each parameter in the constructors. The use of final for immutable fields is good practice. The class is cohesive and follows good naming conventions. However, the class could benefit from additional validation or error handling for the constructor parameters.","tokens":563,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sML7","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/codegen/CodeGenData.java","name":"CodeGenData.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/codegen/CodeGenData.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"30.3","bestValue":false},{"metric":"lines","value":"46","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"7","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and includes comprehensive Javadoc comments. The use of default methods and annotations like @NotNull and @Deprecated is appropriate. The code is easy to read and understand. However, the use of a deprecated method and the lack of implementation details in some methods slightly reduce the score.","tokens":961,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sML6","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/CodeGenProvider.java","name":"CodeGenProvider.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/CodeGenProvider.java","language":"java","measures":[{"metric":"complexity","value":"7","bestValue":false},{"metric":"code_smells","value":"5","bestValue":false},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"44.9","bestValue":false},{"metric":"lines","value":"107","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"7","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows Java conventions, and is easy to read. The class and method names are descriptive, and the use of JavaDoc comments enhances readability. The only minor issue is the lack of error handling, but given the simplicity of the class, this is not critical.","tokens":354,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMMW","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/IsDevelopment.java","name":"IsDevelopment.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/IsDevelopment.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"12.5","bestValue":false},{"metric":"lines","value":"25","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, uses meaningful class and method names, and includes a clear Javadoc comment explaining the purpose of the class. The use of final for the class and the field ensures immutability. The code adheres to good practices such as null checks and encapsulation. The only minor issue is the lack of more detailed comments within the methods, but overall, the readability and quality are excellent.","tokens":459,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLj","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/execannotations/ExecutionModelAnnotationsAllowedBuildItem.java","name":"ExecutionModelAnnotationsAllowedBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/execannotations/ExecutionModelAnnotationsAllowedBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"30.0","bestValue":false},{"metric":"lines","value":"29","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, uses clear and descriptive comments, and follows good practices for configuration in Quarkus. The use of annotations and enums is appropriate and enhances readability. The only minor issue is the lack of more detailed documentation for the enum values, but overall, the code is highly readable and of high quality.","tokens":479,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLk","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/execannotations/ExecutionModelAnnotationsConfig.java","name":"ExecutionModelAnnotationsConfig.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/execannotations/ExecutionModelAnnotationsConfig.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"33.3","bestValue":false},{"metric":"lines","value":"36","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, with clear separation of concerns and appropriate use of annotations. Variable and method names are descriptive, and the logic is easy to follow. However, the class is quite long, and some comments could be more detailed to improve readability. Additionally, the nested loops and conditionals could be refactored for better clarity.","tokens":1258,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLi","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/execannotations/ExecutionModelAnnotationsProcessor.java","name":"ExecutionModelAnnotationsProcessor.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/execannotations/ExecutionModelAnnotationsProcessor.java","language":"java","measures":[{"metric":"complexity","value":"19","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"24","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"3.9","bestValue":false},{"metric":"lines","value":"116","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"41","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and is easy to read. The class is final, indicating it is not meant to be extended, which is good for immutability. The use of a private final field ensures that the detectedIDEs set is immutable after construction. The naming conventions are clear and descriptive. However, the class lacks documentation for the constructor and method, which could improve readability and maintainability.","tokens":363,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLe","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/ide/IdeRunningProcessBuildItem.java","name":"IdeRunningProcessBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/ide/IdeRunningProcessBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"7.7","bestValue":false},{"metric":"lines","value":"22","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is concise, well-structured, and follows good practices such as using a private constructor for a utility class and locale-specific string operations. However, it could benefit from additional comments for clarity and potential exception handling for the System.getProperty call.","tokens":278,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLf","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/ide/IdeUtil.java","name":"IdeUtil.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/ide/IdeUtil.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"15","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and is easy to read. The class is final, indicating immutability, and the use of a private final field ensures thread safety. The comments are clear and concise. However, the class could benefit from additional JavaDoc comments on the constructor and methods for better documentation.","tokens":322,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLd","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/ide/EffectiveIdeBuildItem.java","name":"EffectiveIdeBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/ide/EffectiveIdeBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.3","bestValue":false},{"metric":"lines","value":"20","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using enums, logging, and handling exceptions. The comments are helpful, and the methods are concise and clear. However, the code could benefit from more detailed documentation for some methods and parameters. Additionally, the use of magic strings and potential null values could be improved for better robustness.","tokens":1218,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLg","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/ide/Ide.java","name":"Ide.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/ide/Ide.java","language":"java","measures":[{"metric":"complexity","value":"18","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"18","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"13.1","bestValue":false},{"metric":"lines","value":"130","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"39","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using constants, enums, and utility classes. The use of Java 8 features like lambdas and streams is appropriate. However, the code could benefit from additional comments for clarity, especially in complex logic sections. The naming conventions are clear, but some methods are quite long and could be broken down for better readability.","tokens":2341,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLb","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/ide/IdeProcessor.java","name":"IdeProcessor.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/ide/IdeProcessor.java","language":"java","measures":[{"metric":"complexity","value":"63","bestValue":false},{"metric":"code_smells","value":"10","bestValue":false},{"metric":"cognitive_complexity","value":"96","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"3.9","bestValue":false},{"metric":"lines","value":"262","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"121","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, uses clear naming conventions, and includes documentation for the \u0027target\u0027 field. The use of enums for IDE targets is appropriate and enhances readability. The only minor issue is the lack of more extensive documentation or comments, but overall, the code is clean and easy to understand.","tokens":340,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLa","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/ide/IdeConfig.java","name":"IdeConfig.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/ide/IdeConfig.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"5","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"11.8","bestValue":false},{"metric":"lines","value":"24","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows good naming conventions, and includes a clear Javadoc comment. The use of final for the class and private final for the field ensures immutability. The only minor issue is the lack of more detailed comments or documentation for the methods and constructor.","tokens":343,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLc","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/ide/IdeFileBuildItem.java","name":"IdeFileBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/ide/IdeFileBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"14.3","bestValue":false},{"metric":"lines","value":"23","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and is easy to read. The class is final, indicating immutability, and the use of a constructor to initialize the list of commands is appropriate. However, the class could benefit from JavaDoc comments for better documentation.","tokens":322,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLU","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/cmd/RunCommandActionResultBuildItem.java","name":"RunCommandActionResultBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/cmd/RunCommandActionResultBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"18","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using constants, meaningful variable names, and proper indentation. The use of static imports and annotations is appropriate. However, the nested if-else conditions could be simplified for better readability. Additionally, the method determineJavaPath could benefit from more detailed comments or breaking down into smaller methods.","tokens":951,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLV","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/cmd/RunCommandProcessor.java","name":"RunCommandProcessor.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/cmd/RunCommandProcessor.java","language":"java","measures":[{"metric":"complexity","value":"12","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"11","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.5","bestValue":false},{"metric":"lines","value":"84","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"24","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, uses meaningful names, and includes comments. The use of Optional for the target field is appropriate for handling potential null values. However, the isEnabled method could be slightly optimized for readability by using target.orElse instead of target.get. Overall, the code is clean and easy to understand.","tokens":336,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLW","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/cmd/DeployConfig.java","name":"DeployConfig.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/cmd/DeployConfig.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"7.1","bestValue":false},{"metric":"lines","value":"21","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and is easy to read. The class is final, indicating immutability, and the constructor initializes all fields. Getter methods are provided for all private fields. The only minor issue is the naming of the \u0027isNeedsLogfile\u0027 method, which could be simplified to \u0027needsLogfile\u0027 for better readability.","tokens":504,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLX","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/cmd/RunCommandActionBuildItem.java","name":"RunCommandActionBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/cmd/RunCommandActionBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"7","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"51","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"12","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, follows standard Java conventions, and includes a clear Javadoc comment. The class is simple and easy to understand. However, it lacks error handling and validation for the \u0027name\u0027 parameter, which could improve robustness.","tokens":311,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLN","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/cmd/DeployCommandDeclarationBuildItem.java","name":"DeployCommandDeclarationBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/cmd/DeployCommandDeclarationBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"15.4","bestValue":false},{"metric":"lines","value":"20","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows standard Java conventions. It uses meaningful class and method names, making it easy to understand. The use of generics and functional interfaces is appropriate. However, the comment could be more descriptive, and there is a minor typo in \u0027classh\u0027 in the last line. Overall, the code is clean and readable.","tokens":386,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLQ","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/cmd/DeployCommandDeclarationHandler.java","name":"DeployCommandDeclarationHandler.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/cmd/DeployCommandDeclarationHandler.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"13.3","bestValue":false},{"metric":"lines","value":"22","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"3","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, follows standard Java conventions, and is easy to read. The class is final, indicating it is not meant to be extended, which is good for immutability. The use of a constructor to initialize the commands list and a getter method to access it is appropriate. However, there are no comments or documentation, which could improve readability and maintainability.","tokens":327,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLO","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/cmd/DeployCommandDeclarationResultBuildItem.java","name":"DeployCommandDeclarationResultBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/cmd/DeployCommandDeclarationResultBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"18","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, uses meaningful method names, and leverages Java Streams for concise operations. The use of null checks and empty checks enhances robustness. However, the class lacks comments and documentation, which could improve readability and maintainability for other developers.","tokens":410,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLP","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/cmd/DeployCommandProcessor.java","name":"DeployCommandProcessor.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/cmd/DeployCommandProcessor.java","language":"java","measures":[{"metric":"complexity","value":"7","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"4","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"28","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"7","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and is easy to read. The class is final, indicating immutability, and the use of private final fields ensures thread safety. The constructor and getter methods are straightforward. However, the class could benefit from JavaDoc comments for better documentation.","tokens":333,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLS","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/cmd/DeployCommandActionBuildItem.java","name":"DeployCommandActionBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/cmd/DeployCommandActionBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"22","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"4","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows standard Java conventions. It uses meaningful variable names and includes comments to explain non-obvious parts. However, it lacks error handling and type safety in some areas, such as the unchecked cast to Consumer\u003cMap\u003cString, List\u003e\u003e and the use of raw types in LinkedList. Adding generics and error handling would improve the overall quality.","tokens":525,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLT","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/cmd/RunCommandHandler.java","name":"RunCommandHandler.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/cmd/RunCommandHandler.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"6","bestValue":false},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"6.5","bestValue":false},{"metric":"lines","value":"39","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"14","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, follows standard Java conventions, and is easy to read. The class is final, indicating immutability, and the use of a constructor to initialize the list is appropriate. However, the class lacks comments and JavaDoc, which would improve readability and maintainability.","tokens":324,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLR","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/cmd/DeployCommandActionResultBuildItem.java","name":"DeployCommandActionResultBuildItem.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/cmd/DeployCommandActionResultBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"18","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows standard Java conventions. The use of meaningful class and method names enhances readability. The comments provide useful context. However, the use of raw types and unchecked casting could be improved for type safety. Overall, the code is clear and maintainable.","tokens":383,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLM","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/cmd/DeployCommandHandler.java","name":"DeployCommandHandler.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/cmd/DeployCommandHandler.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"2","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"11.1","bestValue":false},{"metric":"lines","value":"25","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"5","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, follows standard Java conventions, and includes appropriate documentation. The use of generics and annotations is correct. However, the class could benefit from additional comments explaining the logic within the methods, and the suppression of warnings might indicate potential issues that should be addressed.","tokens":375,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMMS","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/BuildProducerImpl.java","name":"BuildProducerImpl.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/BuildProducerImpl.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"10.5","bestValue":false},{"metric":"lines","value":"28","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"3","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using interfaces, predicates, and functional programming. The class and method names are descriptive, and the logic is clear. However, the use of anonymous classes for predicates could be replaced with lambda expressions for better readability. Additionally, some comments explaining the purpose of certain methods and fields would enhance understanding.","tokens":878,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMMN","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/GeneratedClassGizmoAdaptor.java","name":"GeneratedClassGizmoAdaptor.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/GeneratedClassGizmoAdaptor.java","language":"java","measures":[{"metric":"complexity","value":"13","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"6","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"1.4","bestValue":false},{"metric":"lines","value":"85","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"23","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear method names and comments explaining the purpose of each method. The use of constants and utility methods enhances readability. The logging mechanism is well-implemented, and the use of Optional for log levels is a good practice. However, the code could benefit from more detailed error handling and possibly breaking down some methods for better readability.","tokens":2117,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHj","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/util/ExecUtil.java","name":"ExecUtil.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/util/ExecUtil.java","language":"java","measures":[{"metric":"complexity","value":"28","bestValue":false},{"metric":"code_smells","value":"4","bestValue":false},{"metric":"cognitive_complexity","value":"13","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"31.7","bestValue":false},{"metric":"lines","value":"252","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"57","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using logging, proper exception handling, and clear method documentation. The use of modern Java features like lambdas and streams is appropriate. However, the readability could be slightly improved by breaking down the long methods into smaller, more focused methods. Additionally, the use of comments could be enhanced to explain complex logic better.","tokens":1092,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHk","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/util/FSWatchUtil.java","name":"FSWatchUtil.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/util/FSWatchUtil.java","language":"java","measures":[{"metric":"complexity","value":"20","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"27","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.7","bestValue":false},{"metric":"lines","value":"125","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"46","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, with clear and concise methods. The use of try-catch for exception handling is appropriate. The class and method names are descriptive, and the comments provide useful context. However, the hardcoded file paths could be improved by using constants or configuration parameters. Overall, the code is readable and maintains good quality.","tokens":395,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHn","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/util/ClassOutputUtil.java","name":"ClassOutputUtil.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/util/ClassOutputUtil.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"5.3","bestValue":false},{"metric":"lines","value":"26","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"6","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-documented and follows Java conventions. The use of Javadoc comments is thorough, explaining the purpose and usage of the class and method. The class is marked as deprecated, indicating it should not be used, which is clearly communicated. However, the class is essentially a wrapper for a method call, which could be seen as redundant. The readability is high, but the utility of the class is questionable.","tokens":947,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHd","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/util/GlobUtil.java","name":"GlobUtil.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/util/GlobUtil.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"82.5","bestValue":false},{"metric":"lines","value":"76","bestValue":false},{"metric":"sqale_rating","value":"2.0","bestValue":false},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using final for constants and StringBuilder for string manipulation. The use of a finite state machine for parsing is clear and logical. However, the readability could be improved with more comments explaining the state transitions and the purpose of certain conditions. Additionally, the method could be broken down into smaller helper methods for better readability.","tokens":914,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHh","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/util/CommandLineUtil.java","name":"CommandLineUtil.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/util/CommandLineUtil.java","language":"java","measures":[{"metric":"complexity","value":"20","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"46","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.7","bestValue":false},{"metric":"lines","value":"108","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"51","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear method documentation and appropriate use of exceptions. The class is cohesive, focusing on URI normalization. The use of private constructors prevents instantiation, which is good for utility classes. However, the code could benefit from additional validation and edge case handling, and the comments could be more concise.","tokens":1479,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHl","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/util/UriNormalizationUtil.java","name":"UriNormalizationUtil.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/util/UriNormalizationUtil.java","language":"java","measures":[{"metric":"complexity","value":"16","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"15","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"55.6","bestValue":false},{"metric":"lines","value":"120","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"23","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, with clear method names and consistent formatting. It uses Java reflection effectively and handles exceptions properly. However, the class lacks comments and documentation for individual methods, which could improve readability and maintainability. The use of nested ternary operators in some methods can also reduce readability.","tokens":1738,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHe","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/util/ReflectUtil.java","name":"ReflectUtil.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/util/ReflectUtil.java","language":"java","measures":[{"metric":"complexity","value":"46","bestValue":false},{"metric":"code_smells","value":"15","bestValue":false},{"metric":"cognitive_complexity","value":"36","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"188","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"63","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, concise, and uses modern Java features like try-with-resources. Method names are clear and self-explanatory. However, there is a lack of error handling for null InputStream, which could lead to potential NullPointerExceptions. Adding some basic validation and error handling would improve the robustness and readability.","tokens":364,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHf","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/util/IoUtil.java","name":"IoUtil.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/util/IoUtil.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"21","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"4","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear method names and comments explaining the functionality. The use of Java standard libraries and proper exception handling is evident. The class adheres to good practices, such as using private static final for constants and creating helper methods for repeated logic. However, the code could benefit from more detailed error handling and possibly reducing the redundancy in the launchProcess methods.","tokens":1474,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHc","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/util/ProcessUtil.java","name":"ProcessUtil.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/util/ProcessUtil.java","language":"java","measures":[{"metric":"complexity","value":"11","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"4","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"34.5","bestValue":false},{"metric":"lines","value":"148","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"30","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using constants, private constructors for utility classes, and proper exception handling. The use of comments and Javadoc is minimal but present. The code could benefit from more detailed comments and breaking down some of the larger methods into smaller, more manageable ones. The use of deprecated annotations is noted, but overall, the code is readable and maintainable.","tokens":4814,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHq","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/util/WebJarUtil.java","name":"WebJarUtil.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/util/WebJarUtil.java","language":"java","measures":[{"metric":"complexity","value":"101","bestValue":false},{"metric":"code_smells","value":"10","bestValue":false},{"metric":"cognitive_complexity","value":"159","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"4.3","bestValue":false},{"metric":"lines","value":"552","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"198","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of try-with-resources, clear method documentation, and appropriate use of Java collections. However, it could be improved by reducing the complexity of the groupIdAndArtifactId method, which is quite long and has nested logic that could be refactored for better readability.","tokens":1785,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHi","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/util/ArtifactInfoUtil.java","name":"ArtifactInfoUtil.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/util/ArtifactInfoUtil.java","language":"java","measures":[{"metric":"complexity","value":"28","bestValue":false},{"metric":"code_smells","value":"10","bestValue":false},{"metric":"cognitive_complexity","value":"46","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"17.5","bestValue":false},{"metric":"lines","value":"164","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"59","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using constants, logging, and handling exceptions. The use of enums for container runtimes is a good design choice. However, the code is somewhat verbose and could benefit from additional comments for clarity, especially in complex methods. The use of external libraries is appropriate, but the readability could be improved with more concise logic.","tokens":2498,"sonarData":{"component":{"id":"AYwuTxihSgLxngfU4PoK","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/util/ContainerRuntimeUtil.java","name":"ContainerRuntimeUtil.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/util/ContainerRuntimeUtil.java","language":"java","measures":[{"metric":"complexity","value":"50","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"49","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"7.2","bestValue":false},{"metric":"lines","value":"287","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"111","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper exception handling and clear method documentation. The use of meaningful method names and comments enhances readability. However, the code could benefit from more detailed error handling and logging instead of ignoring exceptions. Overall, it is clean and maintainable.","tokens":870,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHm","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/util/FileUtil.java","name":"FileUtil.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/util/FileUtil.java","language":"java","measures":[{"metric":"complexity","value":"11","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"9","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"15.4","bestValue":false},{"metric":"lines","value":"91","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"27","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, with clear method names and appropriate use of collections. Exception handling is present, and the use of try-with-resources ensures proper resource management. However, the class lacks detailed comments and JavaDoc for methods, which could improve readability and maintainability.","tokens":810,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHg","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/util/ServiceUtil.java","name":"ServiceUtil.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/util/ServiceUtil.java","language":"java","measures":[{"metric":"complexity","value":"11","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"10","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"5.7","bestValue":false},{"metric":"lines","value":"84","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"29","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of comments, meaningful method names, and clear logic. The use of Javadoc comments enhances readability. However, the complexity of the methods and the nested logic could be simplified for better readability. Additionally, the code could benefit from more consistent error handling and possibly breaking down some methods into smaller, more manageable pieces.","tokens":3212,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHo","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/util/JandexUtil.java","name":"JandexUtil.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/util/JandexUtil.java","language":"java","measures":[{"metric":"complexity","value":"60","bestValue":false},{"metric":"code_smells","value":"9","bestValue":false},{"metric":"cognitive_complexity","value":"53","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"20.7","bestValue":false},{"metric":"lines","value":"364","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"123","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows Java conventions, and includes Javadoc comments for methods, enhancing readability. The use of streams and functional programming is appropriate and clean. The naming conventions are clear and descriptive. The only minor issue is the lack of unit tests, which are not part of the provided code but are essential for overall quality.","tokens":789,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHr","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/util/DeploymentUtil.java","name":"DeploymentUtil.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/util/DeploymentUtil.java","language":"java","measures":[{"metric":"complexity","value":"9","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"22.0","bestValue":false},{"metric":"lines","value":"72","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"11","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and is easy to read. The class and method names are descriptive, and the use of annotations is appropriate. The only minor issue is the lack of comments within the method, but the class-level Javadoc is sufficient for understanding the purpose.","tokens":352,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sML4","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/IsNormal.java","name":"IsNormal.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/IsNormal.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"12.5","bestValue":false},{"metric":"lines","value":"25","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear documentation and appropriate use of Java conventions. The use of deprecation annotations indicates good maintenance practices. However, the presence of multiple deprecated methods slightly reduces the score as it suggests the need for further refactoring.","tokens":961,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMMM","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/ApplicationArchive.java","name":"ApplicationArchive.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/ApplicationArchive.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"8","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"53.8","bestValue":false},{"metric":"lines","value":"119","bestValue":false},{"metric":"sqale_rating","value":"2.0","bestValue":false},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and includes appropriate annotations. The purpose of the annotation is clearly documented. However, the class-level Javadoc could be more detailed, and the \u0027reason\u0027 method could benefit from a default value or further explanation.","tokens":308,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMMA","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/SuppressForbidden.java","name":"SuppressForbidden.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/SuppressForbidden.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"9.1","bestValue":false},{"metric":"lines","value":"17","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of access modifiers, clear method names, and appropriate use of comments. The class is cohesive and the methods are logically organized. However, the complexity is relatively high due to extensive use of reflection and class loaders, which can make the code harder to understand and maintain. Additionally, the class could benefit from more modularization to improve readability.","tokens":3803,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMMb","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/runner/bootstrap/StartupActionImpl.java","name":"StartupActionImpl.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/runner/bootstrap/StartupActionImpl.java","language":"java","measures":[{"metric":"complexity","value":"45","bestValue":false},{"metric":"code_smells","value":"25","bestValue":false},{"metric":"cognitive_complexity","value":"94","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.1","bestValue":false},{"metric":"lines","value":"422","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"185","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of final variables, exception handling, and clear method separation. The use of comments helps in understanding the reflection logic. However, the heavy use of reflection and context class loader manipulation can be complex and error-prone, which slightly reduces readability and maintainability.","tokens":941,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMMZ","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/runner/bootstrap/RunningQuarkusApplicationImpl.java","name":"RunningQuarkusApplicationImpl.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/runner/bootstrap/RunningQuarkusApplicationImpl.java","language":"java","measures":[{"metric":"complexity","value":"7","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"4","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"3.7","bestValue":false},{"metric":"lines","value":"94","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"34","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and uses appropriate logging and concurrency mechanisms. The comments are clear and explain the purpose and limitations of the method. However, the use of a \u0027yucky hack\u0027 and the reliance on the common pool, which is acknowledged as suboptimal, slightly detracts from the overall quality.","tokens":610,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMMY","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/runner/bootstrap/ForkJoinClassLoading.java","name":"ForkJoinClassLoading.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/runner/bootstrap/ForkJoinClassLoading.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"6","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"12.2","bestValue":false},{"metric":"lines","value":"51","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"14","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, uses meaningful variable names, and includes comments for clarity. The use of annotations and constants is appropriate. However, it could benefit from additional error handling and validation for the \u0027path\u0027 variable. Overall, it is readable and maintains good coding practices.","tokens":342,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMMd","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/banner/BannerConfig.java","name":"BannerConfig.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/banner/BannerConfig.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"14.3","bestValue":false},{"metric":"lines","value":"22","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear comments explaining the purpose and usage of the class. The use of synchronized methods ensures thread safety, and the enum for state management is appropriate. However, the handling of InterruptedException by ignoring it could be improved, and there could be more detailed comments on the methods themselves.","tokens":693,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMS3","key":"quarkusio_quarkus:core/devmode-spi/src/main/java/io/quarkus/dev/appstate/ApplicationStateNotification.java","name":"ApplicationStateNotification.java","qualifier":"FIL","path":"core/devmode-spi/src/main/java/io/quarkus/dev/appstate/ApplicationStateNotification.java","language":"java","measures":[{"metric":"complexity","value":"11","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"8","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"17.5","bestValue":false},{"metric":"lines","value":"82","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"20","bestValue":false}]}}}
{"score":"90","reasoning":"The code is clean, concise, and well-documented. The class name and purpose are clear, and the constructor is straightforward. However, it lacks unit tests and could benefit from additional constructors or methods for more flexibility.","tokens":280,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMS4","key":"quarkusio_quarkus:core/devmode-spi/src/main/java/io/quarkus/dev/appstate/ApplicationStartException.java","name":"ApplicationStartException.java","qualifier":"FIL","path":"core/devmode-spi/src/main/java/io/quarkus/dev/appstate/ApplicationStartException.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"33.3","bestValue":false},{"metric":"lines","value":"15","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows standard Java conventions. The use of CopyOnWriteArrayList and AtomicReference is appropriate for thread safety. The comments are clear, but there are minor grammatical errors. The class and method names are descriptive, but the reasoning behind some design choices could be better documented.","tokens":517,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMSY","key":"quarkusio_quarkus:core/devmode-spi/src/main/java/io/quarkus/dev/io/NioThreadPoolThreadFactory.java","name":"NioThreadPoolThreadFactory.java","qualifier":"FIL","path":"core/devmode-spi/src/main/java/io/quarkus/dev/io/NioThreadPoolThreadFactory.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"7.9","bestValue":false},{"metric":"lines","value":"46","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"16","bestValue":false}]}}}
{"score":"85","reasoning":"The code is clear and concise, with appropriate use of Java collections and the AutoCloseable interface. The class and method names are descriptive, and the logic is straightforward. However, the TODO comment indicates a potential area for improvement, and there is no error handling for potential exceptions. Overall, the code is readable and functional but could benefit from addressing the TODO and adding error handling.","tokens":404,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMSy","key":"quarkusio_quarkus:core/devmode-spi/src/main/java/io/quarkus/dev/console/TempSystemProperties.java","name":"TempSystemProperties.java","qualifier":"FIL","path":"core/devmode-spi/src/main/java/io/quarkus/dev/console/TempSystemProperties.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"4","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"4.8","bestValue":false},{"metric":"lines","value":"28","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"7","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard naming conventions, and is easy to read. The use of final for immutable fields is good practice. However, the class lacks comments and documentation, which could improve readability and maintainability.","tokens":418,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMSs","key":"quarkusio_quarkus:core/devmode-spi/src/main/java/io/quarkus/dev/console/DevConsoleRequest.java","name":"DevConsoleRequest.java","qualifier":"FIL","path":"core/devmode-spi/src/main/java/io/quarkus/dev/console/DevConsoleRequest.java","language":"java","measures":[{"metric":"complexity","value":"6","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"43","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"9","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and is easy to read. The use of constructors and getter/setter methods is appropriate. However, the class could benefit from additional comments and possibly validation for the input parameters in the setters.","tokens":465,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMSw","key":"quarkusio_quarkus:core/devmode-spi/src/main/java/io/quarkus/dev/console/DevConsoleResponse.java","name":"DevConsoleResponse.java","qualifier":"FIL","path":"core/devmode-spi/src/main/java/io/quarkus/dev/console/DevConsoleResponse.java","language":"java","measures":[{"metric":"complexity","value":"8","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"52","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"15","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using final for immutable fields, proper exception handling, and clear method separation. The use of ThreadLocal and volatile for thread safety is appropriate. However, the code could benefit from more comments for better readability, especially in complex sections like the input handling thread. The naming conventions are clear, but some methods could be simplified or broken down further.","tokens":1202,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMSu","key":"quarkusio_quarkus:core/devmode-spi/src/main/java/io/quarkus/dev/console/BasicConsole.java","name":"BasicConsole.java","qualifier":"FIL","path":"core/devmode-spi/src/main/java/io/quarkus/dev/console/BasicConsole.java","language":"java","measures":[{"metric":"complexity","value":"32","bestValue":false},{"metric":"code_smells","value":"11","bestValue":false},{"metric":"cognitive_complexity","value":"46","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"1.9","bestValue":false},{"metric":"lines","value":"183","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"69","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and easy to read. The class and variable names are descriptive, and the comments provide useful context. However, the class lacks methods and functionality, making it incomplete. The use of a volatile variable is appropriate for concurrency, but the overall utility of the class is not clear from the provided code.","tokens":354,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMSt","key":"quarkusio_quarkus:core/devmode-spi/src/main/java/io/quarkus/dev/console/CurrentAppExceptionHighlighter.java","name":"CurrentAppExceptionHighlighter.java","qualifier":"FIL","path":"core/devmode-spi/src/main/java/io/quarkus/dev/console/CurrentAppExceptionHighlighter.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"4","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"36.4","bestValue":false},{"metric":"lines","value":"19","bestValue":false},{"metric":"sqale_rating","value":"3.0","bestValue":false},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using constants, synchronized methods, and proper documentation. The use of volatile for shared variables is appropriate. However, the class is quite large and could benefit from being broken down into smaller, more manageable pieces. Additionally, some methods lack detailed comments, which could improve readability.","tokens":1994,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMSq","key":"quarkusio_quarkus:core/devmode-spi/src/main/java/io/quarkus/dev/console/QuarkusConsole.java","name":"QuarkusConsole.java","qualifier":"FIL","path":"core/devmode-spi/src/main/java/io/quarkus/dev/console/QuarkusConsole.java","language":"java","measures":[{"metric":"complexity","value":"45","bestValue":false},{"metric":"code_smells","value":"24","bestValue":false},{"metric":"cognitive_complexity","value":"26","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"9.3","bestValue":false},{"metric":"lines","value":"271","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"77","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using volatile for shared variables and providing clear documentation. The use of generics and functional interfaces is appropriate. However, there are minor issues like a typo in the method name \u0027sentRequest\u0027 which should be \u0027sendRequest\u0027. Additionally, the class could benefit from more detailed error handling and possibly breaking down into smaller classes for better maintainability.","tokens":1229,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMSp","key":"quarkusio_quarkus:core/devmode-spi/src/main/java/io/quarkus/dev/console/DevConsoleManager.java","name":"DevConsoleManager.java","qualifier":"FIL","path":"core/devmode-spi/src/main/java/io/quarkus/dev/console/DevConsoleManager.java","language":"java","measures":[{"metric":"complexity","value":"18","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"4","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"24.5","bestValue":false},{"metric":"lines","value":"150","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"27","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows standard Java conventions. It extends PrintStream and overrides many methods to redirect output, which is clear and concise. However, there are some commented-out @Override annotations that could be cleaned up, and the use of synchronized blocks could be optimized. Overall, the code is readable and maintains good quality.","tokens":1196,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMSx","key":"quarkusio_quarkus:core/devmode-spi/src/main/java/io/quarkus/dev/console/RedirectPrintStream.java","name":"RedirectPrintStream.java","qualifier":"FIL","path":"core/devmode-spi/src/main/java/io/quarkus/dev/console/RedirectPrintStream.java","language":"java","measures":[{"metric":"complexity","value":"37","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"5","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"1.9","bestValue":false},{"metric":"lines","value":"189","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"45","bestValue":false}]}}}
{"score":"85","reasoning":"The code is clean, well-organized, and follows standard Java conventions. Constants are clearly defined and the interface methods are straightforward. However, it lacks documentation comments which could improve readability and understanding for other developers.","tokens":256,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMSv","key":"quarkusio_quarkus:core/devmode-spi/src/main/java/io/quarkus/dev/console/StatusLine.java","name":"StatusLine.java","qualifier":"FIL","path":"core/devmode-spi/src/main/java/io/quarkus/dev/console/StatusLine.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"13","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-documented with clear Javadoc comments explaining the purpose and usage of the interface and its methods. The naming conventions are appropriate and the code structure is clean. However, the comments suggest some uncertainty and potential issues with the current approach, which slightly impacts the overall quality. The readability is high, but the mention of \u0027awful\u0027 and \u0027no better solution\u0027 indicates room for improvement.","tokens":586,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMSr","key":"quarkusio_quarkus:core/devmode-spi/src/main/java/io/quarkus/dev/console/DeploymentLinker.java","name":"DeploymentLinker.java","qualifier":"FIL","path":"core/devmode-spi/src/main/java/io/quarkus/dev/console/DeploymentLinker.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"76.0","bestValue":false},{"metric":"lines","value":"37","bestValue":false},{"metric":"sqale_rating","value":"3.0","bestValue":false},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear comments explaining the purpose and usage of the class and its methods. The use of ConcurrentHashMap ensures thread safety, and the methods are concise and to the point. However, the parameter names in the register method could be more descriptive, and there could be more detailed JavaDoc comments for the methods.","tokens":518,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMSo","key":"quarkusio_quarkus:core/devmode-spi/src/main/java/io/quarkus/dev/ErrorPageGenerators.java","name":"ErrorPageGenerators.java","qualifier":"FIL","path":"core/devmode-spi/src/main/java/io/quarkus/dev/ErrorPageGenerators.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"33.3","bestValue":false},{"metric":"lines","value":"40","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"4","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, easy to read, and follows standard Java conventions. The use of an enum to define different DevModeTypes is appropriate, and the naming is clear and descriptive. The class is concise and the method isContinuousTestingSupported is straightforward. The only minor improvement could be adding JavaDoc comments for better documentation.","tokens":318,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMSd","key":"quarkusio_quarkus:core/devmode-spi/src/main/java/io/quarkus/dev/spi/DevModeType.java","name":"DevModeType.java","qualifier":"FIL","path":"core/devmode-spi/src/main/java/io/quarkus/dev/spi/DevModeType.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"19","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear documentation and a concise interface definition. The method name is descriptive, and the purpose is clearly stated in the comment. However, the class name could be slightly more concise, and there is a minor typo in the comment (\u0027app\u0027 should be \u0027application\u0027 for consistency).","tokens":296,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMSe","key":"quarkusio_quarkus:core/devmode-spi/src/main/java/io/quarkus/dev/spi/DeploymentFailedStartHandler.java","name":"DeploymentFailedStartHandler.java","qualifier":"FIL","path":"core/devmode-spi/src/main/java/io/quarkus/dev/spi/DeploymentFailedStartHandler.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"33.3","bestValue":false},{"metric":"lines","value":"12","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows standard Java conventions. The interface is clearly defined with appropriate method signatures and documentation. However, the default methods \u0027handleFailedInitialStart\u0027 and \u0027close\u0027 are empty, which might not be necessary. The class is concise and easy to read, but the empty methods slightly reduce the overall quality.","tokens":342,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMSa","key":"quarkusio_quarkus:core/devmode-spi/src/main/java/io/quarkus/dev/spi/HotReplacementSetup.java","name":"HotReplacementSetup.java","qualifier":"FIL","path":"core/devmode-spi/src/main/java/io/quarkus/dev/spi/HotReplacementSetup.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"27.3","bestValue":false},{"metric":"lines","value":"20","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, follows standard Java conventions, and is easy to read. The class is simple and concise, with clear variable names and methods. However, it lacks comments and documentation, which could improve readability and maintainability for other developers.","tokens":326,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMSb","key":"quarkusio_quarkus:core/devmode-spi/src/main/java/io/quarkus/dev/spi/RemoteDevState.java","name":"RemoteDevState.java","qualifier":"FIL","path":"core/devmode-spi/src/main/java/io/quarkus/dev/spi/RemoteDevState.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"23","bestValue":false},{"metric":"sqale_rating","value":"2.0","bestValue":false},{"metric":"statements","value":"4","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear method signatures and appropriate use of JavaDoc comments for documentation. The interface is cohesive, focusing on hot replacement context functionality. The naming conventions are consistent and descriptive. The only minor issue is the lack of detailed exception handling documentation for the doScan method.","tokens":676,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMSc","key":"quarkusio_quarkus:core/devmode-spi/src/main/java/io/quarkus/dev/spi/HotReplacementContext.java","name":"HotReplacementContext.java","qualifier":"FIL","path":"core/devmode-spi/src/main/java/io/quarkus/dev/spi/HotReplacementContext.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"43.6","bestValue":false},{"metric":"lines","value":"77","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear and concise method names and a logical flow. The use of volatile for thread safety is appropriate. The compareTo method is correctly implemented. However, the class could benefit from additional comments for better readability and understanding, especially for the compareTo logic.","tokens":544,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMS1","key":"quarkusio_quarkus:core/devmode-spi/src/main/java/io/quarkus/dev/config/CurrentConfig.java","name":"CurrentConfig.java","qualifier":"FIL","path":"core/devmode-spi/src/main/java/io/quarkus/dev/config/CurrentConfig.java","language":"java","measures":[{"metric":"complexity","value":"11","bestValue":false},{"metric":"code_smells","value":"7","bestValue":false},{"metric":"cognitive_complexity","value":"4","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"60","bestValue":false},{"metric":"sqale_rating","value":"2.0","bestValue":false},{"metric":"statements","value":"15","bestValue":false}]}}}
{"score":"85","reasoning":"The code is clean, well-documented, and follows standard Java conventions. The interface is simple and to the point, with a clear purpose. However, it could benefit from additional comments or documentation on the method to provide more context on its usage.","tokens":266,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMS0","key":"quarkusio_quarkus:core/devmode-spi/src/main/java/io/quarkus/dev/config/ConfigurationProblem.java","name":"ConfigurationProblem.java","qualifier":"FIL","path":"core/devmode-spi/src/main/java/io/quarkus/dev/config/ConfigurationProblem.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"16.7","bestValue":false},{"metric":"lines","value":"14","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows Java conventions, and includes comprehensive documentation. The use of annotations and imports is appropriate. The only minor issue is the lack of more detailed comments within the methods, but given the simplicity of the class, this is not a significant drawback.","tokens":647,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMRO","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/Generated.java","name":"Generated.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/Generated.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"43.2","bestValue":false},{"metric":"lines","value":"55","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, uses appropriate annotations, and includes Javadoc comments for clarity. The naming conventions are clear and follow standard Java practices. The only minor issue is a small typo in the final comment (\u0027classh\u0027 instead of \u0027class\u0027).","tokens":331,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMRL","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/logging/LoggingFilter.java","name":"LoggingFilter.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/logging/LoggingFilter.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"23.1","bestValue":false},{"metric":"lines","value":"22","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, uses appropriate annotations, and includes clear documentation for each method. The use of static imports and default values enhances readability. The only minor issue is the lack of inline comments, but the documentation compensates for this.","tokens":451,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPD","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/annotations/ConfigRoot.java","name":"ConfigRoot.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/annotations/ConfigRoot.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"37.5","bestValue":false},{"metric":"lines","value":"41","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, uses appropriate annotations, and includes a clear Javadoc comment explaining the purpose of the annotation. The use of imports and static imports is correct. The only minor issue is a small typo in the final comment \u0027This is the end of the classh file\u0027 which should be \u0027class file\u0027.","tokens":382,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPM","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/annotations/ConvertWith.java","name":"ConvertWith.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/annotations/ConvertWith.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"22.2","bestValue":false},{"metric":"lines","value":"28","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows Java conventions, and includes comprehensive documentation. The use of annotations and imports is appropriate, and the example provided in the Javadoc is clear and informative. The only minor issue is a small typo in the last line of the comment (\u0027in unusable\u0027 should be \u0027is unusable\u0027).","tokens":662,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPL","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/annotations/StaticInitSafe.java","name":"StaticInitSafe.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/annotations/StaticInitSafe.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"66.7","bestValue":false},{"metric":"lines","value":"50","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, uses appropriate annotations, and follows Java conventions. The comments are clear and provide useful context. However, the class is very simple and does not demonstrate complex logic or error handling, which limits the ability to fully assess coding practices.","tokens":350,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPI","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/annotations/ConfigDocSection.java","name":"ConfigDocSection.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/annotations/ConfigDocSection.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"13.3","bestValue":false},{"metric":"lines","value":"21","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows Java conventions, and includes clear documentation. The use of annotations and imports is appropriate. The only minor issue is the comment \u0027This is the end of the classh file,\u0027 which seems unnecessary and contains a typo.","tokens":358,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPE","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/annotations/ConfigDocEnumValue.java","name":"ConfigDocEnumValue.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/annotations/ConfigDocEnumValue.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"33.3","bestValue":false},{"metric":"lines","value":"28","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, uses appropriate annotations, and follows Java conventions. The purpose of the annotation is clearly documented. The only minor issue is a small typo in the comment (\u0027classh\u0027 instead of \u0027class\u0027).","tokens":327,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPP","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/annotations/ConfigDocMapKey.java","name":"ConfigDocMapKey.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/annotations/ConfigDocMapKey.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"6.7","bestValue":false},{"metric":"lines","value":"21","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows standard Java conventions, and includes appropriate documentation. The use of annotations and imports is clear and concise. The only minor issue is the comment could be slightly more detailed, but overall, the readability and quality are excellent.","tokens":321,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPU","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/annotations/DefaultConverter.java","name":"DefaultConverter.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/annotations/DefaultConverter.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"14.3","bestValue":false},{"metric":"lines","value":"20","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"95","reasoning":"The code is clean, concise, and follows standard Java conventions. It uses appropriate annotations and imports, and the purpose of the class is clearly documented. However, it is a very simple class, so there is limited complexity to evaluate.","tokens":272,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPV","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/annotations/CommandLineArguments.java","name":"CommandLineArguments.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/annotations/CommandLineArguments.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"11.1","bestValue":false},{"metric":"lines","value":"16","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, uses clear and concise comments, and follows standard Java conventions. The use of annotations and default values is appropriate. The only minor issue is the unnecessary \u0027@return\u0027 tag in the last comment, which could be removed for better clarity.","tokens":610,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPG","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/annotations/RegisterForReflection.java","name":"RegisterForReflection.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/annotations/RegisterForReflection.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"53.8","bestValue":false},{"metric":"lines","value":"69","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, uses appropriate annotations, and includes clear documentation. The TODO comment indicates awareness of future improvements. However, the class is quite simple, so there\u0027s limited complexity to evaluate.","tokens":339,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPW","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/annotations/RecordableConstructor.java","name":"RecordableConstructor.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/annotations/RecordableConstructor.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"35.7","bestValue":false},{"metric":"lines","value":"21","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear documentation and appropriate use of annotations. The comments are detailed and provide a good understanding of the purpose and usage of the annotation. The naming conventions are consistent and meaningful. The only minor issue is the length of the comments, which could be slightly more concise.","tokens":552,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPK","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/annotations/QuarkusMain.java","name":"QuarkusMain.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/annotations/QuarkusMain.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"58.3","bestValue":false},{"metric":"lines","value":"36","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows Java conventions, and includes comprehensive documentation. The use of annotations and clear explanations of the limitations and requirements for recorder classes enhance readability. The only minor issue is the slightly verbose documentation, which could be more concise.","tokens":541,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPO","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/annotations/Recorder.java","name":"Recorder.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/annotations/Recorder.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"71.0","bestValue":false},{"metric":"lines","value":"39","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear and concise documentation for each enum constant. The use of private final fields and a constructor ensures immutability. The method names are descriptive and follow standard naming conventions. The toString method is overridden to provide a meaningful string representation. The only minor issue is the trailing comma after the last enum constant, which is unnecessary but does not affect functionality.","tokens":562,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPH","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/annotations/ConfigPhase.java","name":"ConfigPhase.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/annotations/ConfigPhase.java","language":"java","measures":[{"metric":"complexity","value":"7","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.6","bestValue":false},{"metric":"lines","value":"52","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"9","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, uses proper Java conventions, and includes comprehensive documentation. The use of annotations and clear examples enhances readability. The only minor issue is the lack of more detailed comments on the annotation\u0027s usage, but overall, it is of high quality.","tokens":456,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPJ","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/annotations/ConfigGroup.java","name":"ConfigGroup.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/annotations/ConfigGroup.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"67.9","bestValue":false},{"metric":"lines","value":"36","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows standard Java conventions, and includes appropriate documentation. The use of annotations and imports is clear and concise. The only minor issue is a small typo in the comment (\u0027defaultValueForDocumentation\u0027 should be \u0027defaultValueForDocumentation\u0027).","tokens":353,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPR","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/annotations/ConfigDocDefault.java","name":"ConfigDocDefault.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/annotations/ConfigDocDefault.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"16.7","bestValue":false},{"metric":"lines","value":"26","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, uses appropriate annotations, and includes clear documentation. The naming conventions are clear and the purpose of the annotation is well-explained. However, it is a simple class, so there is limited complexity to evaluate.","tokens":310,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPT","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/annotations/IgnoreProperty.java","name":"IgnoreProperty.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/annotations/IgnoreProperty.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"18.2","bestValue":false},{"metric":"lines","value":"17","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows standard Java conventions, and includes appropriate documentation. The use of annotations and imports is clear and concise. The only minor issue is the comment at the end, which seems to be a typo (\u0027classh\u0027 instead of \u0027class\u0027).","tokens":305,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPN","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/annotations/ConfigDocIgnore.java","name":"ConfigDocIgnore.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/annotations/ConfigDocIgnore.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"15.4","bestValue":false},{"metric":"lines","value":"19","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, uses appropriate annotations, and includes a clear Javadoc comment explaining the purpose of the annotation. The use of imports is minimal and relevant. The only minor issue is the lack of additional context or examples on how to use the annotation, but this does not significantly impact readability or quality.","tokens":359,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPS","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/annotations/ConfigDocFilename.java","name":"ConfigDocFilename.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/annotations/ConfigDocFilename.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"13.3","bestValue":false},{"metric":"lines","value":"23","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and includes a clear Javadoc comment explaining the purpose of the annotation. The use of annotations like @Retention and @Target is appropriate. However, the class is quite simple and does not demonstrate complex logic or error handling, which limits the scope for evaluating deeper aspects of code quality.","tokens":331,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPQ","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/annotations/RelaxedValidation.java","name":"RelaxedValidation.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/annotations/RelaxedValidation.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"25.0","bestValue":false},{"metric":"lines","value":"18","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, uses clear and descriptive comments, and follows standard Java conventions. The use of constants and default values is appropriate, and the annotations are well-documented. The only minor issue is the placeholder values for constants, which could be more descriptive.","tokens":753,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPF","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/annotations/ConfigItem.java","name":"ConfigItem.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/annotations/ConfigItem.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"50.0","bestValue":false},{"metric":"lines","value":"76","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of synchronization, clear method documentation, and appropriate exception handling. The use of constants for state management improves readability. However, the code could benefit from more detailed comments in complex sections and a more consistent logging strategy. The use of nested loops and switch statements could be simplified for better readability.","tokens":1944,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMQp","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/Application.java","name":"Application.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/Application.java","language":"java","measures":[{"metric":"complexity","value":"29","bestValue":false},{"metric":"code_smells","value":"14","bestValue":false},{"metric":"cognitive_complexity","value":"38","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"12.6","bestValue":false},{"metric":"lines","value":"277","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"101","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, concise, and follows standard Java conventions. The interface is clearly defined with a single method, and the Javadoc comment provides a clear explanation of its purpose. However, the reasoning could be slightly more detailed, and there is a minor typo in \u0027classh\u0027 instead of \u0027class\u0027.","tokens":294,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMRF","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/QuarkusApplication.java","name":"QuarkusApplication.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/QuarkusApplication.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"33.3","bestValue":false},{"metric":"lines","value":"11","bestValue":false},{"metric":"sqale_rating","value":"3.0","bestValue":false},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, easy to read, and follows standard Java conventions. The use of an enum for ExecutionMode is implied and appropriate. The class is thread-safe due to the use of volatile. However, the class lacks comments and documentation, which would improve readability and maintainability.","tokens":345,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPY","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/ExecutionModeManager.java","name":"ExecutionModeManager.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/ExecutionModeManager.java","language":"java","measures":[{"metric":"complexity","value":"5","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"27","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"5","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, with clear comments explaining the purpose of the class and its methods. The use of static methods and variables is appropriate for the context. However, the class lacks proper encapsulation and thread-safety considerations, which could be improved. Overall, the readability and quality are good but not perfect.","tokens":366,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMQl","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/rest/DisabledRestEndpoints.java","name":"DisabledRestEndpoints.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/rest/DisabledRestEndpoints.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"20.0","bestValue":false},{"metric":"lines","value":"23","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"85","reasoning":"The code is clean, concise, and follows standard Java conventions. The class is well-defined with clear method names and a straightforward purpose. However, it lacks comments and documentation, which could help in understanding the context and usage of the class. Additionally, there are no validations or error handling mechanisms.","tokens":295,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMQe","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/ssl/SslContextConfiguration.java","name":"SslContextConfiguration.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/ssl/SslContextConfiguration.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"15","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"85","reasoning":"The code is concise, well-structured, and follows standard Java conventions. The class and method names are clear and descriptive. However, the class lacks comments and documentation, which could help in understanding the purpose and usage of the methods and class.","tokens":273,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMQd","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/ssl/SslContextConfigurationRecorder.java","name":"SslContextConfigurationRecorder.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/ssl/SslContextConfigurationRecorder.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"12","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear documentation and appropriate use of enums. The methods are concise and self-explanatory. The use of ImageInfo for determining the current mode is logical and clean. The only minor improvement could be additional error handling or edge case considerations, but overall, the code is highly readable and of high quality.","tokens":527,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMQ8","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/ImageMode.java","name":"ImageMode.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/ImageMode.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"3","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"34.5","bestValue":false},{"metric":"lines","value":"49","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"6","bestValue":false}]}}}
{"score":"85","reasoning":"The code is concise, well-structured, and uses appropriate naming conventions. The use of annotations and method naming is clear. However, it lacks comments and error handling, which could improve readability and robustness.","tokens":256,"sonarData":{"component":{"id":"AYwuTxiiSgLxngfU4PoN","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/ClassPathSystemPropertyRecorder.java","name":"ClassPathSystemPropertyRecorder.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/ClassPathSystemPropertyRecorder.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"12","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using constants for HTML templates and CSS. The methods are cohesive and have clear responsibilities. However, the class is quite large and could benefit from further modularization. The use of StringBuilder is appropriate for building the HTML content. Overall, the code is readable but could be improved by breaking down some methods and reducing the size of the class.","tokens":3762,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMQg","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/TemplateHtmlBuilder.java","name":"TemplateHtmlBuilder.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/TemplateHtmlBuilder.java","language":"java","measures":[{"metric":"complexity","value":"47","bestValue":false},{"metric":"code_smells","value":"36","bestValue":false},{"metric":"cognitive_complexity","value":"35","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"1.8","bestValue":false},{"metric":"lines","value":"383","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"90","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using annotations and handling context class loaders properly. The use of comments to explain the rationale behind not adding an unnecessary shutdown task is commendable. However, the readability could be slightly improved by breaking down the logic into smaller methods and adding more detailed comments.","tokens":429,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMQj","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/dev/io/NioThreadPoolRecorder.java","name":"NioThreadPoolRecorder.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/dev/io/NioThreadPoolRecorder.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"9.5","bestValue":false},{"metric":"lines","value":"25","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"5","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, uses appropriate annotations, and includes Javadoc comments for class and fields. The toString method is correctly overridden. However, it lacks more comprehensive documentation and validation for the trustAll field.","tokens":342,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMQC","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/TlsConfig.java","name":"TlsConfig.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/TlsConfig.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"11.8","bestValue":false},{"metric":"lines","value":"25","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"90","reasoning":"The code is clean, well-documented, and follows standard Java conventions. The interface is simple and has a clear purpose. However, the comment could be more detailed about the context in which this interface is used. Overall, it is highly readable and of good quality.","tokens":268,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMRD","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/StartupTask.java","name":"StartupTask.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/StartupTask.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"20.0","bestValue":false},{"metric":"lines","value":"11","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, uses appropriate annotations, and includes a clear comment explaining the rebuild method. The use of interfaces and default values is appropriate. However, the class is relatively simple, and more complex logic or error handling is not present, which could provide a better assessment of overall quality.","tokens":342,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOX","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/LaunchConfig.java","name":"LaunchConfig.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/LaunchConfig.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.3","bestValue":false},{"metric":"lines","value":"18","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear documentation and appropriate use of Java conventions. The class and methods are well-named, and the use of enums for shutdown reasons is a good practice. The only minor issue is the lack of special characters handling in the comments, but it does not significantly impact readability or quality.","tokens":648,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMRH","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/ShutdownEvent.java","name":"ShutdownEvent.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/ShutdownEvent.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"54.1","bestValue":false},{"metric":"lines","value":"58","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"3","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear documentation and appropriate use of interfaces and enums. The naming conventions are consistent and descriptive, making the code easy to understand. The use of default methods and generics is appropriate. The only minor issue is the unnecessary use of \u0027public static\u0027 in the enum declaration, which is redundant in this context.","tokens":1341,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMQ5","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/metrics/MetricsFactory.java","name":"MetricsFactory.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/metrics/MetricsFactory.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"58.9","bestValue":false},{"metric":"lines","value":"162","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"3","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear comments and documentation. The use of constants and regular expressions is appropriate, and the logic is straightforward. The only minor issue is the potential redundancy in the comments for the convert and parseDuration methods, which could be streamlined.","tokens":1103,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOb","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/DurationConverter.java","name":"DurationConverter.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/DurationConverter.java","language":"java","measures":[{"metric":"complexity","value":"8","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"6","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"37.5","bestValue":false},{"metric":"lines","value":"93","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"15","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows standard Java conventions. It includes Javadoc comments for class and constructor, making it easier to understand. The use of synchronized blocks and volatile keyword ensures thread safety. However, there are some areas for improvement, such as the \u0027todo\u0027 comment indicating incomplete work and the potential for more detailed comments explaining complex logic.","tokens":729,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOn","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/QuarkusConfigFactory.java","name":"QuarkusConfigFactory.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/QuarkusConfigFactory.java","language":"java","measures":[{"metric":"complexity","value":"7","bestValue":false},{"metric":"code_smells","value":"4","bestValue":false},{"metric":"cognitive_complexity","value":"3","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"21.7","bestValue":false},{"metric":"lines","value":"58","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"13","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and includes proper imports and annotations. The class is concise and serves its purpose effectively. However, the class could benefit from additional comments explaining the logic within the convert method and potential edge cases.","tokens":363,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOa","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/RegexConverter.java","name":"RegexConverter.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/RegexConverter.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"11.8","bestValue":false},{"metric":"lines","value":"30","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows Java conventions, and includes proper imports and annotations. The class and method names are clear and descriptive. Exception handling is present for invalid input. The use of static imports and constants improves readability. The only minor issue is the lack of comments within the method, but the overall quality is high.","tokens":448,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOs","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/CidrAddressConverter.java","name":"CidrAddressConverter.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/CidrAddressConverter.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"2","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"4.2","bestValue":false},{"metric":"lines","value":"34","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"7","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and includes clear comments explaining its purpose. The use of constants, proper exception handling, and logical flow enhances readability. However, the nested conditional logic could be simplified for better clarity.","tokens":645,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOY","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/InetSocketAddressConverter.java","name":"InetSocketAddressConverter.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/InetSocketAddressConverter.java","language":"java","measures":[{"metric":"complexity","value":"9","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"11","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"9.1","bestValue":false},{"metric":"lines","value":"55","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"18","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using logging and configuration management. The use of meaningful variable names and comments enhances readability. However, the comment about the condition could be more detailed, and the class could benefit from additional documentation or JavaDoc comments. Overall, the code is clean and maintainable.","tokens":450,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOe","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/DeprecatedRuntimePropertiesRecorder.java","name":"DeprecatedRuntimePropertiesRecorder.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/DeprecatedRuntimePropertiesRecorder.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"6","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"4.2","bestValue":false},{"metric":"lines","value":"31","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"8","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of annotations, clear class and method definitions, and appropriate error handling. The use of comments to explain substitutions is helpful. However, the code could benefit from more detailed documentation and some methods return null, which might lead to potential null pointer exceptions if not handled properly.","tokens":966,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOq","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/Substitutions.java","name":"Substitutions.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/Substitutions.java","language":"java","measures":[{"metric":"complexity","value":"7","bestValue":false},{"metric":"code_smells","value":"9","bestValue":false},{"metric":"cognitive_complexity","value":"3","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"4.8","bestValue":false},{"metric":"lines","value":"101","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"16","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows good naming conventions, and includes detailed comments explaining the logic. The use of generics and the singleton pattern is appropriate. The only minor issue is the suppression of unchecked warnings, which could be avoided with a different design.","tokens":513,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMO0","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/HashSetFactory.java","name":"HashSetFactory.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/HashSetFactory.java","language":"java","measures":[{"metric":"complexity","value":"5","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"22.2","bestValue":false},{"metric":"lines","value":"39","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"5","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows good naming conventions, and uses appropriate design patterns like AtomicReference for thread safety. The use of inner classes and method overrides is clear and concise. However, the class could benefit from additional comments for better readability and maintainability.","tokens":575,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOZ","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/DisableableConfigSource.java","name":"DisableableConfigSource.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/DisableableConfigSource.java","language":"java","measures":[{"metric":"complexity","value":"12","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"75","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"14","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and includes Javadoc comments for clarity. The interface is simple and easy to understand. However, the Javadoc could be slightly more detailed, and there is a minor typo in the last line (\u0027classh\u0027 instead of \u0027class\u0027).","tokens":356,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOu","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/ConfigBuilder.java","name":"ConfigBuilder.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/ConfigBuilder.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"33.3","bestValue":false},{"metric":"lines","value":"18","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows Java conventions, and includes proper error handling. The use of comments and annotations enhances readability. The only minor issue is the lack of more detailed comments or documentation for the convert method, but overall, the code is clear and concise.","tokens":433,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMO_","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/CharsetConverter.java","name":"CharsetConverter.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/CharsetConverter.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"3","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"3.8","bestValue":false},{"metric":"lines","value":"39","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"8","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear comments and documentation. The use of constants and static methods is appropriate, and the logic for resolving the profile is straightforward. The deprecation notice is also well-documented. However, the code could benefit from additional error handling and possibly more modularization to improve maintainability.","tokens":756,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOl","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/ProfileManager.java","name":"ProfileManager.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/ProfileManager.java","language":"java","measures":[{"metric":"complexity","value":"10","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"7","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"20.7","bestValue":false},{"metric":"lines","value":"82","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"21","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of constants, clear method names, and comprehensive comments. The use of assertions for parameter validation is commendable. However, the complexity of the state machine logic and the use of bitwise operations may reduce readability for less experienced developers. Overall, the code is of high quality but could benefit from additional inline comments explaining the more complex sections.","tokens":2414,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMO8","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/NameIterator.java","name":"NameIterator.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/NameIterator.java","language":"java","measures":[{"metric":"complexity","value":"83","bestValue":false},{"metric":"code_smells","value":"6","bestValue":false},{"metric":"cognitive_complexity","value":"76","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"10.1","bestValue":false},{"metric":"lines","value":"344","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"143","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows good naming conventions, and includes comments for clarity. The use of generics and proper exception handling is commendable. However, the hyphenate method could be optimized for readability, and additional comments within methods could enhance understanding.","tokens":666,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOk","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/HyphenateEnumConverter.java","name":"HyphenateEnumConverter.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/HyphenateEnumConverter.java","language":"java","measures":[{"metric":"complexity","value":"8","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"4","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"3.8","bestValue":false},{"metric":"lines","value":"68","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"22","bestValue":false}]}}}
{"score":"85","reasoning":"The code is clean, concise, and follows standard Java conventions. The class and method names are descriptive, and the logic is straightforward. However, there is a minor typo in the comment \u0027This is the end of the classh file,\u0027 which should be \u0027class file.\u0027 Additionally, more comments explaining the purpose of the class and methods could improve readability.","tokens":322,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMO7","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/SystemOnlySourcesConfigBuilder.java","name":"SystemOnlySourcesConfigBuilder.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/SystemOnlySourcesConfigBuilder.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"17","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"3","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and includes Javadoc comments for clarity. The interface is simple and to the point. However, the class name \u0027Aliased\u0027 could be more descriptive, and there could be more detailed documentation on the method\u0027s expected behavior.","tokens":333,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPB","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/Aliased.java","name":"Aliased.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/Aliased.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"50.0","bestValue":false},{"metric":"lines","value":"18","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows Java conventions, and includes proper imports and annotations. The class and method names are clear, and the logic is straightforward. The use of constants and patterns is appropriate. The only minor issue is the lack of detailed comments within the method, but the overall readability and quality are high.","tokens":450,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOg","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/LocaleConverter.java","name":"LocaleConverter.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/LocaleConverter.java","language":"java","measures":[{"metric":"complexity","value":"7","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"5","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"3.4","bestValue":false},{"metric":"lines","value":"44","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"9","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows good practices, and is easy to read. The use of generics and the singleton pattern is appropriate. The class and method names are clear and descriptive. The only minor issue is the suppression of unchecked warnings, which could be avoided with a different design.","tokens":356,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMO3","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/ArrayListFactory.java","name":"ArrayListFactory.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/ArrayListFactory.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"6.3","bestValue":false},{"metric":"lines","value":"24","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows good naming conventions, and adheres to object-oriented principles. It uses appropriate imports and extends relevant classes/interfaces. The methods are concise and clear. However, the readability could be slightly improved with more comments explaining the purpose of each method and class.","tokens":583,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMO9","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/ApplicationPropertiesConfigSourceLoader.java","name":"ApplicationPropertiesConfigSourceLoader.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/ApplicationPropertiesConfigSourceLoader.java","language":"java","measures":[{"metric":"complexity","value":"6","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"53","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"6","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows good practices, and includes clear documentation. The use of constants and annotations is appropriate. The logic within the convert method is straightforward and easy to follow. However, the class could benefit from additional unit tests to ensure robustness.","tokens":450,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOv","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/NormalizeRootHttpPathConverter.java","name":"NormalizeRootHttpPathConverter.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/NormalizeRootHttpPathConverter.java","language":"java","measures":[{"metric":"complexity","value":"5","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"4","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"16.7","bestValue":false},{"metric":"lines","value":"41","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"10","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows Java conventions, and includes clear documentation. The use of constants and static initializers enhances readability. Exception handling is appropriate, and the regex pattern is well-defined. The only minor issue is the lack of unit tests within the provided code.","tokens":831,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOd","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/MemorySizeConverter.java","name":"MemorySizeConverter.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/MemorySizeConverter.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"4","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"12.2","bestValue":false},{"metric":"lines","value":"63","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"19","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using constants, maps, and lambda functions. The use of nested classes and anonymous classes is clear and concise. However, the code could benefit from additional comments to explain the purpose of certain blocks, especially for those unfamiliar with the specific libraries used. Overall, it is readable and maintains a high level of quality.","tokens":1226,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOz","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/QuarkusConfigBuilderCustomizer.java","name":"QuarkusConfigBuilderCustomizer.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/QuarkusConfigBuilderCustomizer.java","language":"java","measures":[{"metric":"complexity","value":"13","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"11","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"3.4","bestValue":false},{"metric":"lines","value":"105","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"33","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and uses appropriate methods from the Objects class for equals and hashCode. The class is final, which is good for immutability. However, the class lacks proper documentation and could benefit from comments explaining its purpose and usage.","tokens":400,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOf","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/ConverterClassHolder.java","name":"ConverterClassHolder.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/ConverterClassHolder.java","language":"java","measures":[{"metric":"complexity","value":"7","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"4","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"32","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"9","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, uses clear naming conventions, and includes detailed comments explaining the configuration options. The use of annotations and enums is appropriate and enhances readability. However, the comments could be slightly more concise, and there is a minor typo in the last comment (classh instead of class).","tokens":457,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMO5","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/ConfigurationRuntimeConfig.java","name":"ConfigurationRuntimeConfig.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/ConfigurationRuntimeConfig.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"40.9","bestValue":false},{"metric":"lines","value":"30","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear method definitions and appropriate use of Java generics and functional interfaces. The use of comments and Javadoc is effective in explaining the purpose of methods and parameters. The naming conventions are consistent and meaningful. The only minor issue is the potential for further simplification or modularization of some methods, but overall, the code is highly readable and maintainable.","tokens":1509,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMO6","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/ConfigUtils.java","name":"ConfigUtils.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/ConfigUtils.java","language":"java","measures":[{"metric":"complexity","value":"21","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"10","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"25.8","bestValue":false},{"metric":"lines","value":"156","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"29","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using interfaces and customizers. The use of meaningful class and method names enhances readability. However, the class could benefit from additional comments explaining the purpose of each configuration step. The use of magic numbers like Integer.MIN_VALUE could be replaced with a named constant for better clarity.","tokens":439,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMO2","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/RuntimeConfigBuilder.java","name":"RuntimeConfigBuilder.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/RuntimeConfigBuilder.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"4.2","bestValue":false},{"metric":"lines","value":"33","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"5","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear and consistent naming conventions. The use of fluent setters enhances readability. The Substitution class is well-implemented, adhering to the ObjectSubstitution interface. However, the code could benefit from additional comments and JavaDoc for better maintainability and understanding.","tokens":930,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOh","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/QuarkusConfigValue.java","name":"QuarkusConfigValue.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/QuarkusConfigValue.java","language":"java","measures":[{"metric":"complexity","value":"18","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"118","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"35","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and includes proper imports and annotations. The class is concise and the method is straightforward. However, the class lacks error handling for invalid path strings, which could improve robustness.","tokens":352,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOj","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/PathConverter.java","name":"PathConverter.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/PathConverter.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"6.3","bestValue":false},{"metric":"lines","value":"26","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows Java conventions, and includes proper error handling. The use of annotations and imports is appropriate. The class and method names are clear and descriptive. The only minor issue is the use of a static import which could be avoided for better readability.","tokens":452,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOy","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/InetAddressConverter.java","name":"InetAddressConverter.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/InetAddressConverter.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"3","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"3.4","bestValue":false},{"metric":"lines","value":"40","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"9","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, with clear method names and comments explaining the purpose of each method. The use of constants and utility methods enhances readability. However, the class is quite large, which can make it harder to navigate. Some methods could benefit from further decomposition to improve clarity. Overall, the code is of high quality but could be slightly improved for better maintainability.","tokens":2031,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOc","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/ConfigDiagnostic.java","name":"ConfigDiagnostic.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/ConfigDiagnostic.java","language":"java","measures":[{"metric":"complexity","value":"54","bestValue":false},{"metric":"code_smells","value":"5","bestValue":false},{"metric":"cognitive_complexity","value":"64","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.3","bestValue":false},{"metric":"lines","value":"271","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"105","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear and concise comments. The class is final, indicating immutability, and the use of BigInteger ensures precision. The methods are straightforward and self-explanatory. However, the class could benefit from additional validation or utility methods to enhance functionality.","tokens":346,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMO1","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/MemorySize.java","name":"MemorySize.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/MemorySize.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"17.6","bestValue":false},{"metric":"lines","value":"29","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"3","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows Java conventions, and includes comprehensive Javadoc comments for constructors. The use of final for parameters and immutability of configKeys enhances readability and maintainability. The only minor issue is the lack of Javadoc for some parameters, but overall, the code is clear and concise.","tokens":804,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOt","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/ConfigurationException.java","name":"ConfigurationException.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/ConfigurationException.java","language":"java","measures":[{"metric":"complexity","value":"10","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"34.3","bestValue":false},{"metric":"lines","value":"101","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"16","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows standard Java conventions. It uses meaningful class and method names, making it easy to understand. The use of interfaces and method overrides is appropriate. However, the code could benefit from additional comments explaining the purpose of each configuration source and the rationale behind the priority value.","tokens":412,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOm","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/StaticInitConfigBuilder.java","name":"StaticInitConfigBuilder.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/StaticInitConfigBuilder.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"4.5","bestValue":false},{"metric":"lines","value":"29","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"4","bestValue":false}]}}}
{"score":"85","reasoning":"The code is concise and follows standard Java conventions. It implements an interface and overrides a method clearly. The use of descriptive class and method names enhances readability. However, the class lacks comments and documentation, which could help in understanding the purpose and usage of the class.","tokens":289,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOo","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/RuntimeOverrideConfigSourceBuilder.java","name":"RuntimeOverrideConfigSourceBuilder.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/RuntimeOverrideConfigSourceBuilder.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"11","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"90","reasoning":"The code is clean, well-structured, and follows good practices. The class and method names are descriptive, and the logic is straightforward. The use of null checks and trimming is appropriate. However, the constructor is unnecessary as it does not perform any actions. Removing it could slightly improve readability.","tokens":321,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOp","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/TrimmedStringConverter.java","name":"TrimmedStringConverter.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/TrimmedStringConverter.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"2","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"25","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"6","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows Java conventions, and includes clear documentation. Constants are appropriately named and explained. The private constructor prevents instantiation, which is good practice for utility classes. The only minor issue is a small typo in the comment (\u0027classh\u0027 instead of \u0027class\u0027).","tokens":503,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOr","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/ConverterSupport.java","name":"ConverterSupport.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/ConverterSupport.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"55.0","bestValue":false},{"metric":"lines","value":"33","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using descriptive method names and proper exception handling. The use of comments and TODOs indicates areas for potential improvement. However, the code could benefit from more detailed documentation and possibly reducing the number of static methods to improve maintainability.","tokens":1019,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMO-","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/AbstractConfigBuilder.java","name":"AbstractConfigBuilder.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/AbstractConfigBuilder.java","language":"java","measures":[{"metric":"complexity","value":"15","bestValue":false},{"metric":"code_smells","value":"4","bestValue":false},{"metric":"cognitive_complexity","value":"2","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"6.3","bestValue":false},{"metric":"lines","value":"99","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"20","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using meaningful variable names, comments, and annotations. It handles exceptions properly and uses modern Java features like Optional and Streams. However, it could be improved by reducing complexity in some methods, adding more comments for clarity, and possibly breaking down large methods into smaller ones for better readability.","tokens":2607,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOi","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/ConfigInstantiator.java","name":"ConfigInstantiator.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/ConfigInstantiator.java","language":"java","measures":[{"metric":"complexity","value":"58","bestValue":false},{"metric":"code_smells","value":"21","bestValue":false},{"metric":"cognitive_complexity","value":"76","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.8","bestValue":false},{"metric":"lines","value":"273","bestValue":false},{"metric":"sqale_rating","value":"2.0","bestValue":false},{"metric":"statements","value":"134","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and includes proper imports and annotations. The class is concise and serves its purpose effectively. However, the class-level Javadoc could be more detailed, and there could be additional error handling in the convert method to manage invalid input strings.","tokens":352,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOw","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/ZoneIdConverter.java","name":"ZoneIdConverter.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/ZoneIdConverter.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"6.7","bestValue":false},{"metric":"lines","value":"25","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and includes clear comments. The use of final for the values map ensures immutability, and exception handling is properly implemented. The class adheres to the ConfigSource interface, making it easy to understand its purpose. However, the use of reflection can be risky and may affect performance, which slightly reduces the score.","tokens":665,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMO4","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/RuntimeOverrideConfigSource.java","name":"RuntimeOverrideConfigSource.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/RuntimeOverrideConfigSource.java","language":"java","measures":[{"metric":"complexity","value":"8","bestValue":false},{"metric":"code_smells","value":"4","bestValue":false},{"metric":"cognitive_complexity","value":"3","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"4.0","bestValue":false},{"metric":"lines","value":"65","bestValue":false},{"metric":"sqale_rating","value":"2.0","bestValue":false},{"metric":"statements","value":"14","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of logging, clear method names, and appropriate comments. The use of final for immutable fields and the handling of optional values are commendable. However, the code could benefit from more detailed JavaDoc comments for methods and classes to improve readability further. Additionally, some complex logic could be refactored into smaller methods for better clarity.","tokens":1264,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMOx","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/ConfigRecorder.java","name":"ConfigRecorder.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/ConfigRecorder.java","language":"java","measures":[{"metric":"complexity","value":"19","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"17","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"9.3","bestValue":false},{"metric":"lines","value":"116","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"36","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear comments and proper use of enums. The naming conventions are consistent and descriptive. The only minor issue is the lack of a comment for the \u0027UNSET\u0027 enum value, which slightly affects readability.","tokens":303,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMQZ","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/ExecutionMode.java","name":"ExecutionMode.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/ExecutionMode.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"28.6","bestValue":false},{"metric":"lines","value":"31","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, uses meaningful comments, and leverages Java\u0027s Optional class effectively. The use of annotations is appropriate and clear. However, the class is relatively simple, so it doesn\u0027t showcase handling of more complex scenarios or error handling.","tokens":329,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMQE","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/console/ConsoleRuntimeConfig.java","name":"ConsoleRuntimeConfig.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/console/ConsoleRuntimeConfig.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"16.7","bestValue":false},{"metric":"lines","value":"20","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear comments explaining each configuration item. The use of annotations and Optional types enhances readability and robustness. However, the class could benefit from more detailed JavaDoc comments for some fields and methods, and consistent access modifiers for all fields.","tokens":590,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMRB","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/LiveReloadConfig.java","name":"LiveReloadConfig.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/LiveReloadConfig.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"29.4","bestValue":false},{"metric":"lines","value":"60","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, uses appropriate annotations, and includes clear comments explaining the purpose and design decisions. The use of Optional for args is a good practice. The only minor issue is a small typo in the final comment (\u0027classh\u0027 instead of \u0027class\u0027).","tokens":362,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMRI","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/CommandLineRuntimeConfig.java","name":"CommandLineRuntimeConfig.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/CommandLineRuntimeConfig.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"28.6","bestValue":false},{"metric":"lines","value":"24","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured and easy to read. It uses clear naming conventions and includes comments that explain the purpose of the methods. The use of a nested class for the CloseRunnable is appropriate and the logging of exceptions is handled well. However, the comment style could be more consistent and the reasoning behind the reverse order execution could be elaborated.","tokens":451,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMRG","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/ShutdownContext.java","name":"ShutdownContext.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/ShutdownContext.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"2","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"10.7","bestValue":false},{"metric":"lines","value":"42","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"5","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows standard Java conventions. The use of constants, annotations, and proper method naming enhances readability. However, the class lacks comments explaining the methods\u0027 purposes and the ImageMode class is not defined, which could hinder understanding for someone unfamiliar with the context.","tokens":379,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMQx","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/NativeImageRuntimePropertiesRecorder.java","name":"NativeImageRuntimePropertiesRecorder.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/NativeImageRuntimePropertiesRecorder.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"2","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"5.0","bestValue":false},{"metric":"lines","value":"30","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"5","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, uses appropriate annotations, and follows good naming conventions. The use of SecureRandom and annotations from the GraalVM ecosystem indicates a specific and advanced use case. However, the class lacks comments and documentation, which could improve readability and maintainability.","tokens":335,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMQK","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/graal/Target_sun_security_jca_JCAUtil.java","name":"Target_sun_security_jca_JCAUtil.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/graal/Target_sun_security_jca_JCAUtil.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"16","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as clear method definitions and appropriate use of annotations. The use of final classes and methods enhances security and performance. However, the code lacks comments, which could improve readability and maintainability. The \u0027no op\u0027 comments are minimal but could be more descriptive.","tokens":522,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMQP","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/graal/ConfigurationSubstitutions.java","name":"ConfigurationSubstitutions.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/graal/ConfigurationSubstitutions.java","language":"java","measures":[{"metric":"complexity","value":"5","bestValue":false},{"metric":"code_smells","value":"4","bestValue":false},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"5.3","bestValue":false},{"metric":"lines","value":"48","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"5","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, uses appropriate annotations, and follows Java conventions. The use of final classes and static methods is appropriate for the context. However, the code lacks comments, which could improve readability and maintainability. The package and import statements are clear and relevant.","tokens":342,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMQJ","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/graal/ClassDefinerSubstitutions.java","name":"ClassDefinerSubstitutions.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/graal/ClassDefinerSubstitutions.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"19","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and includes comments for clarity. The use of constants and proper logging practices is evident. However, the class could benefit from additional error handling and more detailed comments explaining the purpose of each method.","tokens":461,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMQX","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/graal/DisableLoggingFeature.java","name":"DisableLoggingFeature.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/graal/DisableLoggingFeature.java","language":"java","measures":[{"metric":"complexity","value":"6","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"4","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"2.9","bestValue":false},{"metric":"lines","value":"46","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"12","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows standard Java conventions. It uses appropriate annotations and imports, and the method signature is clear. However, the method implementation is incomplete, as it throws an IllegalStateException with a generic message. This reduces the overall quality and usability of the code.","tokens":350,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMQM","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/graal/Target_javax_management_JMX.java","name":"Target_javax_management_JMX.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/graal/Target_javax_management_JMX.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"23","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and uses appropriate annotations for GraalVM substitutions. The class and method names are clear, and the logic is straightforward. However, the use of static fields and methods could be better documented, and there is a lack of comments explaining the purpose and context of the substitutions.","tokens":326,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMQI","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/graal/TimingReplacement.java","name":"TimingReplacement.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/graal/TimingReplacement.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"21","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as clear class and method definitions, proper use of annotations, and consistent error handling. The use of static final constants and logging is appropriate. However, the readability could be slightly improved with more comments explaining the purpose of each substitution and the overall design. The code is specialized and may be complex for those unfamiliar with the context.","tokens":1422,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMQR","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/graal/AwtImageIO.java","name":"AwtImageIO.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/graal/AwtImageIO.java","language":"java","measures":[{"metric":"complexity","value":"14","bestValue":false},{"metric":"code_smells","value":"23","bestValue":false},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"3.3","bestValue":false},{"metric":"lines","value":"144","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"19","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as lazy initialization and double-checked locking. The use of annotations and comments enhances readability. However, the complexity of the GraalVM-specific annotations and the nested classes might be challenging for less experienced developers to understand quickly.","tokens":964,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMQV","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/graal/CidrAddressSubstitutions.java","name":"CidrAddressSubstitutions.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/graal/CidrAddressSubstitutions.java","language":"java","measures":[{"metric":"complexity","value":"10","bestValue":false},{"metric":"code_smells","value":"11","bestValue":false},{"metric":"cognitive_complexity","value":"4","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"10.0","bestValue":false},{"metric":"lines","value":"90","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"21","bestValue":false}]}}}
{"score":"90","reasoning":"The code is concise, well-structured, and follows standard Java conventions. The class and method names are clear and descriptive. The use of the BooleanSupplier interface is appropriate. However, the class could benefit from additional comments or documentation to explain its purpose and usage.","tokens":282,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMQO","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/graal/JDK17OrLater.java","name":"JDK17OrLater.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/graal/JDK17OrLater.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"13","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and easy to read, with clear variable names and logical flow. The use of final for local variables enhances readability and immutability. The comments and Javadoc are minimal but sufficient. However, the code could benefit from more detailed comments and handling of potential exceptions. The \u0027todo\u0027 comment indicates incomplete functionality.","tokens":578,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMQW","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/graal/DiagnosticPrinter.java","name":"DiagnosticPrinter.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/graal/DiagnosticPrinter.java","language":"java","measures":[{"metric":"complexity","value":"6","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"11","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"4.5","bestValue":false},{"metric":"lines","value":"49","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"33","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and uses meaningful constants for different IP addresses. The use of static final fields enhances readability and maintainability. However, the class lacks comments and documentation, which could help in understanding the purpose and usage of the constants. Additionally, there are no methods or logic, which limits the evaluation of overall code quality.","tokens":444,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMQQ","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/graal/InetRunTime.java","name":"InetRunTime.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/graal/InetRunTime.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"15","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and uses clear naming conventions. It leverages annotations effectively and follows a consistent style. However, the lack of comments explaining the purpose of each substitution and alias could hinder readability for those unfamiliar with the specific context or libraries used.","tokens":646,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMQS","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/graal/LoggingSubstitutions.java","name":"LoggingSubstitutions.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/graal/LoggingSubstitutions.java","language":"java","measures":[{"metric":"complexity","value":"5","bestValue":false},{"metric":"code_smells","value":"13","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"71","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"3","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using final classes and static methods. The use of annotations is clear and the purpose of the code is well-documented. However, the readability could be slightly improved by adding more comments within the methods to explain their functionality. Overall, the code is of high quality and easy to understand.","tokens":685,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMQL","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/graal/InetSubstitutions.java","name":"InetSubstitutions.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/graal/InetSubstitutions.java","language":"java","measures":[{"metric":"complexity","value":"5","bestValue":false},{"metric":"code_smells","value":"17","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"5.7","bestValue":false},{"metric":"lines","value":"70","bestValue":false},{"metric":"sqale_rating","value":"2.0","bestValue":false},{"metric":"statements","value":"5","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as encapsulation and clear exception handling. The use of nested classes is appropriate for the context. However, the readability could be slightly improved with more comments explaining the purpose of disabling SSL and the implications. Overall, the code is clean and easy to understand.","tokens":871,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMQT","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/graal/DisabledSSLContext.java","name":"DisabledSSLContext.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/graal/DisabledSSLContext.java","language":"java","measures":[{"metric":"complexity","value":"16","bestValue":false},{"metric":"code_smells","value":"4","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"107","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"15","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, uses clear naming conventions, and includes necessary imports. The use of annotations like @Substitute and @TargetClass is appropriate and indicates a good understanding of the framework. However, the method launchFromIDE throws a RuntimeException with a generic message, which could be more descriptive. Overall, the code is readable and maintains good quality.","tokens":350,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMQU","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/graal/QuarkusSubstitution.java","name":"QuarkusSubstitution.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/graal/QuarkusSubstitution.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"18","bestValue":false},{"metric":"sqale_rating","value":"2.0","bestValue":false},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as synchronized methods and proper exception handling. The use of annotations like @Alias and @Substitute is clear and appropriate. However, the commented-out code sections could be cleaned up or moved to a documentation file to improve readability. Overall, the code is readable and maintains a high level of quality.","tokens":971,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMQN","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/graal/Target_javax_net_ssl_SSLContext.java","name":"Target_javax_net_ssl_SSLContext.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/graal/Target_javax_net_ssl_SSLContext.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"4","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"55.4","bestValue":false},{"metric":"lines","value":"83","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"5","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using final for constants and immutability. The use of meaningful variable names and comments enhances readability. However, the nested if-else blocks in the isLoggable method could be refactored for better clarity. Additionally, the class could benefit from more detailed JavaDoc comments for methods and fields.","tokens":725,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPf","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/logging/LogCleanupFilter.java","name":"LogCleanupFilter.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/logging/LogCleanupFilter.java","language":"java","measures":[{"metric":"complexity","value":"12","bestValue":false},{"metric":"code_smells","value":"4","bestValue":false},{"metric":"cognitive_complexity","value":"21","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"3.8","bestValue":false},{"metric":"lines","value":"64","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"22","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, uses appropriate annotations, and includes clear comments explaining the purpose of each field. The use of Optional and List is appropriate for the handlers. The naming conventions are clear and follow standard Java practices. However, the class could benefit from additional methods or validation to enhance functionality and robustness.","tokens":427,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPd","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/logging/CategoryConfig.java","name":"CategoryConfig.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/logging/CategoryConfig.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"29.2","bestValue":false},{"metric":"lines","value":"38","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear and concise comments explaining each configuration item. The use of annotations and descriptive variable names enhances readability. The class adheres to good coding practices, making it easy to understand and maintain. Minor improvements could be made in terms of adding more detailed comments for complex configurations.","tokens":958,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPb","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/logging/LogConfig.java","name":"LogConfig.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/logging/LogConfig.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"49.3","bestValue":false},{"metric":"lines","value":"114","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices, such as using meaningful variable names and adhering to Java conventions. The class and method documentation is clear, and the logic is straightforward. However, the flush and close methods are empty, which might be intentional but could benefit from a comment explaining why. Overall, the readability and quality are high.","tokens":526,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPl","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/logging/LogMetricsHandler.java","name":"LogMetricsHandler.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/logging/LogMetricsHandler.java","language":"java","measures":[{"metric":"complexity","value":"6","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"4","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"18.9","bestValue":false},{"metric":"lines","value":"48","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"6","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, with clear comments explaining the purpose and usage of the minLevel attribute. The use of annotations and default values is appropriate. However, the class is relatively simple and lacks complexity, which limits the evaluation of more advanced coding practices.","tokens":431,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPo","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/logging/CategoryBuildTimeConfig.java","name":"CategoryBuildTimeConfig.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/logging/CategoryBuildTimeConfig.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"45.0","bestValue":false},{"metric":"lines","value":"26","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows good practices, and includes clear documentation. The use of ServiceLoader for dynamic loading is appropriate, and the default implementation is provided. The naming conventions are clear, and the logic is straightforward. However, the code could benefit from additional error handling and possibly more detailed comments on complex sections.","tokens":588,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPc","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/logging/LogFilterFactory.java","name":"LogFilterFactory.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/logging/LogFilterFactory.java","language":"java","measures":[{"metric":"complexity","value":"8","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"8","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"11.4","bestValue":false},{"metric":"lines","value":"58","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"14","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, uses clear and descriptive comments, and follows good naming conventions. The use of annotations and configuration items is appropriate and enhances readability. However, the class could benefit from additional error handling or validation logic to ensure robustness.","tokens":465,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPr","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/logging/LogBuildTimeConfig.java","name":"LogBuildTimeConfig.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/logging/LogBuildTimeConfig.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"29.2","bestValue":false},{"metric":"lines","value":"37","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear and concise comments explaining each configuration item. The use of annotations and default values enhances readability. The only minor issue is the deprecated \u0027color\u0027 field, which is well-documented but could be removed in future versions. Overall, the code is highly readable and maintains good quality.","tokens":686,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPp","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/logging/ConsoleConfig.java","name":"ConsoleConfig.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/logging/ConsoleConfig.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"41.5","bestValue":false},{"metric":"lines","value":"69","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows good practices, and is easy to read. It uses meaningful class and method names, proper imports, and includes a Javadoc comment. The use of constants and annotations is appropriate. However, the class could benefit from additional comments explaining the logic within the convert method.","tokens":394,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPg","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/logging/LevelConverter.java","name":"LevelConverter.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/logging/LevelConverter.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"2","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"5.3","bestValue":false},{"metric":"lines","value":"29","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"3","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows standard Java conventions, and is easy to read. The class has clear constructors and getter/setter methods. However, it lacks comments and JavaDoc, which could improve readability and maintainability.","tokens":468,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPt","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/logging/LogCleanupFilterElement.java","name":"LogCleanupFilterElement.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/logging/LogCleanupFilterElement.java","language":"java","measures":[{"metric":"complexity","value":"9","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"2.6","bestValue":false},{"metric":"lines","value":"51","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"11","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, uses meaningful variable names, and follows good practices such as immutability for constants and proper use of collections. The use of comments is minimal but sufficient. The logic is clear and concise. However, the code could benefit from additional comments for better readability and understanding, especially for complex logic.","tokens":607,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPm","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/logging/LogMetricsHandlerRecorder.java","name":"LogMetricsHandlerRecorder.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/logging/LogMetricsHandlerRecorder.java","language":"java","measures":[{"metric":"complexity","value":"6","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"3","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"2.4","bestValue":false},{"metric":"lines","value":"54","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"9","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, uses appropriate annotations, and includes comments for clarity. The use of descriptive variable names enhances readability. However, the class is relatively simple, and more complex logic or error handling is not present, which limits the assessment of overall quality.","tokens":334,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPk","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/logging/CleanupFilterConfig.java","name":"CleanupFilterConfig.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/logging/CleanupFilterConfig.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"14.3","bestValue":false},{"metric":"lines","value":"23","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is clean, well-structured, and follows standard Java conventions. The class is simple and easy to understand, with clear method names and a straightforward purpose. However, it lacks comments and documentation, which could help in understanding the context and usage of the class. Additionally, the class could benefit from immutability practices.","tokens":350,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPe","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/logging/DiscoveredLogComponents.java","name":"DiscoveredLogComponents.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/logging/DiscoveredLogComponents.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"22","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"3","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear separation of concerns and appropriate use of abstract classes and inheritance. The naming conventions are consistent and meaningful. The use of static factory methods enhances readability. However, the class could benefit from additional comments explaining the purpose of certain methods and classes, especially for those unfamiliar with the context.","tokens":756,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPq","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/logging/InheritableLevel.java","name":"InheritableLevel.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/logging/InheritableLevel.java","language":"java","measures":[{"metric":"complexity","value":"21","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"4","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"1.3","bestValue":false},{"metric":"lines","value":"112","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"18","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using meaningful variable names, modular methods, and proper use of Java logging frameworks. The use of annotations and comments enhances readability. However, the code is quite lengthy and complex, which might make it harder to understand for someone unfamiliar with the context. Some methods could be further broken down to improve readability.","tokens":7124,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPi","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/logging/LoggingSetupRecorder.java","name":"LoggingSetupRecorder.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/logging/LoggingSetupRecorder.java","language":"java","measures":[{"metric":"complexity","value":"126","bestValue":false},{"metric":"code_smells","value":"17","bestValue":false},{"metric":"cognitive_complexity","value":"140","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.4","bestValue":false},{"metric":"lines","value":"796","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"358","bestValue":false}]}}}
{"score":"90","reasoning":"The code is clean, concise, and follows good practices such as using a private constructor to prevent instantiation and a static method to modify a system property. The naming conventions are clear and the purpose of the class is evident. However, the class lacks comments which could help in understanding the context and purpose of the code.","tokens":294,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPn","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/logging/JBossVersion.java","name":"JBossVersion.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/logging/JBossVersion.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"14","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear and concise comments explaining each configuration item. The use of annotations and default values enhances readability and maintainability. The nested static class for rotation configuration is appropriately used. The only minor issue is the lack of special characters or new lines in the comments, which could slightly improve readability.","tokens":853,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPh","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/logging/FileConfig.java","name":"FileConfig.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/logging/FileConfig.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"38.3","bestValue":false},{"metric":"lines","value":"103","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear and concise comments explaining each configuration item. The use of annotations and default values enhances readability. The naming conventions are consistent and meaningful. However, the class could benefit from additional validation or error handling logic to ensure robustness.","tokens":829,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPs","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/logging/SyslogConfig.java","name":"SyslogConfig.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/logging/SyslogConfig.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"29.1","bestValue":false},{"metric":"lines","value":"103","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, uses appropriate annotations, and includes comments for each configuration item, enhancing readability. The naming conventions are clear and consistent. However, the class lacks error handling and validation logic, which could improve robustness. Overall, it is a high-quality, readable piece of code.","tokens":371,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPj","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/logging/AsyncConfig.java","name":"AsyncConfig.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/logging/AsyncConfig.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"18.8","bestValue":false},{"metric":"lines","value":"28","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, uses clear and concise comments, and follows good naming conventions. The use of Optional for nullable fields is appropriate. The annotations are used correctly, and the class is easy to understand. However, the comment \u0027This is a dummy config class to hide the warnings on the comment line\u0027 is slightly confusing and could be clarified.","tokens":428,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMQt","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/BuildAnalyticsConfig.java","name":"BuildAnalyticsConfig.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/BuildAnalyticsConfig.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"30.0","bestValue":false},{"metric":"lines","value":"35","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"95","reasoning":"The code is clean, well-structured, and follows standard Java conventions. The class and method names are descriptive, and the implementation is straightforward. The use of generics in the interface is appropriate. However, the class lacks comments, which could help in understanding the purpose and context of the code.","tokens":315,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMQv","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/recording/substitutions/ZoneIdSubstitution.java","name":"ZoneIdSubstitution.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/recording/substitutions/ZoneIdSubstitution.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"19","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear documentation and appropriate use of annotations. The comments and examples provided make it easy to understand the purpose and usage of the @Shutdown annotation. The only minor issue is the lack of more detailed error handling or edge case considerations, but this is acceptable given the context.","tokens":600,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMRE","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/Shutdown.java","name":"Shutdown.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/Shutdown.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"72.1","bestValue":false},{"metric":"lines","value":"59","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, uses clear and concise comments, and follows good naming conventions. The use of annotations and Optional types enhances readability and maintainability. However, the class could benefit from additional error handling and validation logic to ensure robustness.","tokens":723,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMQn","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/ConfigConfig.java","name":"ConfigConfig.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/ConfigConfig.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"47.6","bestValue":false},{"metric":"lines","value":"65","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows good naming conventions, and uses appropriate design patterns. The use of Optional and Supplier is clear and concise. The only minor issue is the lack of comments, which could help in understanding the purpose of the class and methods for someone unfamiliar with the code.","tokens":411,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMRJ","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/BannerRecorder.java","name":"BannerRecorder.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/BannerRecorder.java","language":"java","measures":[{"metric":"complexity","value":"5","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"37","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"6","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear and concise comments explaining each configuration item. The use of annotations and Optional types enhances readability and flexibility. The naming conventions are consistent and meaningful. The only minor issue is the lack of special characters in the comments, which could slightly improve readability.","tokens":936,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMQG","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/ThreadPoolConfig.java","name":"ThreadPoolConfig.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/ThreadPoolConfig.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"41.7","bestValue":false},{"metric":"lines","value":"96","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"5","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, uses meaningful comments, and follows good practices such as using Optional for nullable fields. The use of annotations is appropriate and enhances readability. The method isShutdownTimeoutSet is clear and concise. However, the class could benefit from additional error handling or validation logic.","tokens":380,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPv","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/shutdown/ShutdownConfig.java","name":"ShutdownConfig.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/shutdown/ShutdownConfig.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"2","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"29.6","bestValue":false},{"metric":"lines","value":"42","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-documented, with clear comments explaining the purpose and functionality of each method. The interface and its methods are straightforward and easy to understand. The use of default methods provides a sensible default behavior. The only minor issue is a small typo in the comment (\u0027lister\u0027 should be \u0027listener\u0027).","tokens":477,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPx","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/shutdown/ShutdownListener.java","name":"ShutdownListener.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/shutdown/ShutdownListener.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"53.8","bestValue":false},{"metric":"lines","value":"45","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows good practices, and is easy to read. It uses appropriate logging, handles exceptions, and employs synchronization mechanisms effectively. The use of annotations and clear method names enhances readability. However, the use of static volatile variables could be reconsidered for thread safety, and more comments could improve understanding.","tokens":640,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPw","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/shutdown/ShutdownRecorder.java","name":"ShutdownRecorder.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/shutdown/ShutdownRecorder.java","language":"java","measures":[{"metric":"complexity","value":"14","bestValue":false},{"metric":"code_smells","value":"4","bestValue":false},{"metric":"cognitive_complexity","value":"9","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"83","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"26","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-documented and follows standard Java conventions. The class is simple and serves a clear purpose. However, it lacks error handling and additional context or functionality that could improve its robustness and utility.","tokens":327,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMQi","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/StartupEvent.java","name":"StartupEvent.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/StartupEvent.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"76.9","bestValue":false},{"metric":"lines","value":"22","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and easy to read. It uses meaningful method names and handles potential exceptions appropriately. The use of reflection and module handling is clear and concise. However, the code could benefit from additional comments to explain the purpose and context of the methods, which would improve maintainability and readability for other developers.","tokens":357,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMQH","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/NativeImageFeatureUtils.java","name":"NativeImageFeatureUtils.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/NativeImageFeatureUtils.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"21","bestValue":false},{"metric":"sqale_rating","value":"2.0","bestValue":false},{"metric":"statements","value":"6","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows standard Java conventions, and includes a clear class-level comment. The class extends IllegalStateException and provides multiple constructors for different use cases, enhancing its usability. The only minor issue is a small typo in the final comment \u0027classh\u0027 instead of \u0027class\u0027.","tokens":335,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMQ7","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/BlockingOperationNotAllowedException.java","name":"BlockingOperationNotAllowedException.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/BlockingOperationNotAllowedException.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"6.3","bestValue":false},{"metric":"lines","value":"24","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"4","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, uses meaningful names, and includes Javadoc comments. The use of generics and null checks enhances robustness. However, the default constructor allowing a null value could be problematic, and the error message in getValue() could be more descriptive. Overall, the code is readable and maintains good quality.","tokens":358,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMRA","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/RuntimeValue.java","name":"RuntimeValue.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/RuntimeValue.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"10.0","bestValue":false},{"metric":"lines","value":"30","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"6","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear comments and appropriate use of annotations. The use of constants for default values enhances readability. The documentation is thorough, explaining the purpose and usage of each field. However, the class could benefit from additional error handling or validation logic to ensure robustness.","tokens":618,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMQq","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/LocalesBuildTimeConfig.java","name":"LocalesBuildTimeConfig.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/LocalesBuildTimeConfig.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"55.6","bestValue":false},{"metric":"lines","value":"47","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear and concise comments explaining the purpose of the class. The class is final, indicating it is not meant to be extended, which is appropriate for an exception type. The constructors are overloaded effectively, and the use of \u0027this\u0027 for constructor chaining is correct. The only minor issue is a small typo in the comment (\u0027classh\u0027 instead of \u0027class\u0027).","tokens":446,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMQu","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/PreventFurtherStepsException.java","name":"PreventFurtherStepsException.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/PreventFurtherStepsException.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"26.1","bestValue":false},{"metric":"lines","value":"32","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"5","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear comments and appropriate use of enums. The methods are concise and the naming conventions are consistent. The only minor issue is the comment about future changes, which could be more specific.","tokens":516,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPz","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/LaunchMode.java","name":"LaunchMode.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/LaunchMode.java","language":"java","measures":[{"metric":"complexity","value":"7","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"17.6","bestValue":false},{"metric":"lines","value":"56","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"7","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and easy to read, with clear comments explaining its purpose. The use of try-with-resources for BufferedReader is good practice. However, the error handling could be improved by using a logging framework instead of System.err and e.printStackTrace(). The class and method names are descriptive, but the single responsibility principle could be better enforced.","tokens":465,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPZ","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/appcds/AppCDSUtil.java","name":"AppCDSUtil.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/appcds/AppCDSUtil.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"2","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"17.4","bestValue":false},{"metric":"lines","value":"29","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"7","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using annotations, interfaces, and inner classes. The comments are clear and provide context. However, the nested anonymous class within the BooleanConverter could be simplified for better readability. Overall, the code is clean and maintainable but could benefit from minor refactoring.","tokens":636,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMQ0","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/init/InitRuntimeConfig.java","name":"InitRuntimeConfig.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/init/InitRuntimeConfig.java","language":"java","measures":[{"metric":"complexity","value":"11","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"9.3","bestValue":false},{"metric":"lines","value":"54","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using annotations, proper exception handling, and clear method names. The use of CountDownLatch and threading is appropriate for the task. However, the readability could be slightly improved with more comments explaining the logic, especially around the threading and exception handling parts.","tokens":533,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMQ1","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/init/InitializationTaskRecorder.java","name":"InitializationTaskRecorder.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/init/InitializationTaskRecorder.java","language":"java","measures":[{"metric":"complexity","value":"6","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"2","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"2.6","bestValue":false},{"metric":"lines","value":"47","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"11","bestValue":false}]}}}
{"score":"85","reasoning":"The code is concise, well-structured, and uses meaningful names. The use of annotations and method calls is clear. However, the class lacks comments and documentation, which could improve readability and maintainability.","tokens":272,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMQh","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/BlockingOperationRecorder.java","name":"BlockingOperationRecorder.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/BlockingOperationRecorder.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"14","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-documented, with clear comments explaining the purpose and usage of the interface. The use of generics is appropriate and enhances reusability. The method names are intuitive and self-explanatory. However, the code could benefit from additional comments or examples on how to implement this interface in practice.","tokens":336,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMQb","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/ObjectSubstitution.java","name":"ObjectSubstitution.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/ObjectSubstitution.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"54.5","bestValue":false},{"metric":"lines","value":"20","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, uses appropriate annotations, and includes Javadoc comments for methods. The use of Optional for configuration properties is a good practice. However, the class lacks more detailed comments and explanations for the overall purpose and usage, which could improve readability for new developers.","tokens":377,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMQ-","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/BuilderConfig.java","name":"BuilderConfig.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/BuilderConfig.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"26.7","bestValue":false},{"metric":"lines","value":"29","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of logging, clear method separation, and appropriate use of final and static keywords. The comments are helpful, and the use of annotations is correct. However, the code could be improved by reducing complexity in some methods, especially the createShutdownTask method, which is quite lengthy and could benefit from further decomposition.","tokens":1814,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMQ3","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/ExecutorRecorder.java","name":"ExecutorRecorder.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/ExecutorRecorder.java","language":"java","measures":[{"metric":"complexity","value":"31","bestValue":false},{"metric":"code_smells","value":"9","bestValue":false},{"metric":"cognitive_complexity","value":"65","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"4.5","bestValue":false},{"metric":"lines","value":"208","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"80","bestValue":false}]}}}
{"score":"90","reasoning":"The code is clean, concise, and follows standard Java conventions. The interface is well-defined with a clear method name. However, it lacks documentation comments which could improve readability and understanding for other developers.","tokens":226,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMQ9","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/IOThreadDetector.java","name":"IOThreadDetector.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/IOThreadDetector.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"7","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using try-with-resources for resource management. The class and method names are clear and descriptive. However, the use of empty catch blocks without logging or handling exceptions can make debugging difficult. Additionally, the code could benefit from more comments to explain the logic, especially for those unfamiliar with the context.","tokens":691,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMQr","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/PreloadClassesRecorder.java","name":"PreloadClassesRecorder.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/PreloadClassesRecorder.java","language":"java","measures":[{"metric":"complexity","value":"9","bestValue":false},{"metric":"code_smells","value":"4","bestValue":false},{"metric":"cognitive_complexity","value":"10","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"68","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"22","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, uses clear and concise comments, and follows standard Java conventions. The use of annotations is appropriate and enhances readability. However, the class is relatively simple, so it doesn\u0027t showcase handling of more complex scenarios or error handling.","tokens":333,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMQD","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/DebugRuntimeConfig.java","name":"DebugRuntimeConfig.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/DebugRuntimeConfig.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"18.2","bestValue":false},{"metric":"lines","value":"17","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of comments, clear method documentation, and logical organization. The use of constants and synchronized blocks for thread safety is commendable. However, the code could be improved by reducing redundancy in exception handling and ensuring consistent logging practices. Overall, it is readable and maintainable.","tokens":2764,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMP9","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/Quarkus.java","name":"Quarkus.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/Quarkus.java","language":"java","measures":[{"metric":"complexity","value":"31","bestValue":false},{"metric":"code_smells","value":"8","bestValue":false},{"metric":"cognitive_complexity","value":"26","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"30.0","bestValue":false},{"metric":"lines","value":"291","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"81","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, uses appropriate annotations, and includes a clear comment for the \u0027enabled\u0027 field. The naming conventions are consistent and meaningful. However, the class is quite simple, and more complex logic or error handling is not present, which limits the evaluation of overall quality.","tokens":306,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMQc","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/BannerRuntimeConfig.java","name":"BannerRuntimeConfig.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/BannerRuntimeConfig.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"10.0","bestValue":false},{"metric":"lines","value":"16","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as encapsulation and clear method definitions. The use of comments is helpful for understanding specific decisions. However, the class could benefit from more detailed JavaDoc comments for public methods and fields. Additionally, the use of magic numbers for initial capacities could be replaced with named constants for better readability.","tokens":894,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMQy","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/StartupContext.java","name":"StartupContext.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/StartupContext.java","language":"java","measures":[{"metric":"complexity","value":"15","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"5","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"2.3","bestValue":false},{"metric":"lines","value":"106","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"28","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, follows standard Java conventions, and is easy to read. The method isColorEnabled is concise and clear in its purpose. However, the class lacks comments and documentation, which could improve readability and maintainability for other developers.","tokens":332,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMP3","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/util/ColorSupport.java","name":"ColorSupport.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/util/ColorSupport.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"2","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"19","bestValue":false},{"metric":"sqale_rating","value":"2.0","bestValue":false},{"metric":"statements","value":"5","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear and concise methods. The use of static blocks and constants enhances readability and maintainability. The naming conventions are consistent and descriptive. However, the class could benefit from additional comments for clarity, especially around the regex pattern and the performChecks method.","tokens":670,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMP0","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/util/JavaVersionUtil.java","name":"JavaVersionUtil.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/util/JavaVersionUtil.java","language":"java","measures":[{"metric":"complexity","value":"8","bestValue":false},{"metric":"code_smells","value":"6","bestValue":false},{"metric":"cognitive_complexity","value":"3","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"2.1","bestValue":false},{"metric":"lines","value":"60","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"19","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear method names and logical flow. It uses standard Java libraries effectively and follows good practices like encapsulation and immutability for constants. The use of static methods and variables is appropriate for the utility nature of the class. However, the code could benefit from additional comments for better readability and maintainability.","tokens":523,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMP4","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/util/StepTiming.java","name":"StepTiming.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/util/StepTiming.java","language":"java","measures":[{"metric":"complexity","value":"5","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"41","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"8","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using final classes and methods, proper use of iterators, and clear method documentation. However, the nested iterator classes could be refactored for better readability, and some methods could benefit from additional comments to explain complex logic.","tokens":1595,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMP7","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/util/StringUtil.java","name":"StringUtil.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/util/StringUtil.java","language":"java","measures":[{"metric":"complexity","value":"51","bestValue":false},{"metric":"code_smells","value":"6","bestValue":false},{"metric":"cognitive_complexity","value":"76","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.1","bestValue":false},{"metric":"lines","value":"238","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"104","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows good practices, and is easy to read. It uses meaningful method names, handles exceptions appropriately, and avoids redundancy. The use of helper methods like getMessageDigest and toHex improves readability. The only minor issue is the lack of comments, which could help explain the purpose of some methods for future maintainers.","tokens":630,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMP5","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/util/HashUtil.java","name":"HashUtil.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/util/HashUtil.java","language":"java","measures":[{"metric":"complexity","value":"10","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"2","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"59","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"20","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear method names and comprehensive Javadoc comments explaining the purpose and usage of each method. The use of standard Java libraries and exception handling is appropriate. However, the code could benefit from additional inline comments for complex logic and potential edge cases. Overall, it demonstrates good readability and quality.","tokens":2297,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMP1","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/util/ClassPathUtils.java","name":"ClassPathUtils.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/util/ClassPathUtils.java","language":"java","measures":[{"metric":"complexity","value":"22","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"18","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"39.9","bestValue":false},{"metric":"lines","value":"230","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"51","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and includes detailed comments explaining the methods and their purposes. The use of final for parameters and local variables enhances readability and immutability. However, the code could benefit from more detailed parameter and return type documentation in the Javadoc comments. Additionally, the logic in rootCauseFirstStackTrace is complex and could be simplified for better readability.","tokens":1381,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMP2","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/util/ExceptionUtil.java","name":"ExceptionUtil.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/util/ExceptionUtil.java","language":"java","measures":[{"metric":"complexity","value":"19","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"16","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"35.4","bestValue":false},{"metric":"lines","value":"138","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"40","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, with clear documentation and usage examples. The use of annotations and imports is appropriate, and the comments provide a good understanding of the functionality. The only minor issue is the lack of more detailed inline comments within the code itself, but overall, it is highly readable and of high quality.","tokens":757,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMRC","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/Startup.java","name":"Startup.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/Startup.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"75.9","bestValue":false},{"metric":"lines","value":"76","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using meaningful variable names, handling exceptions, and closing resources properly. The class and method documentation is clear. However, the nested try-catch blocks and the use of System.err for logging could be improved by using a proper logging framework. Additionally, the code could benefit from more modularization to enhance readability and maintainability.","tokens":1138,"sonarData":{"component":{"id":"AYvyvWT5pBbp5z45sMFP","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/ErrorReplacingProcessReader.java","name":"ErrorReplacingProcessReader.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/ErrorReplacingProcessReader.java","language":"java","measures":[{"metric":"complexity","value":"18","bestValue":false},{"metric":"code_smells","value":"15","bestValue":false},{"metric":"cognitive_complexity","value":"34","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"3.5","bestValue":false},{"metric":"lines","value":"126","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"61","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using constants, enums, and helper methods. The use of regular expressions is clear and well-documented. However, the complexity of the regex patterns and the nested logic in the parsing methods could be simplified for better readability. Additionally, more comments explaining the purpose of each method and class would improve understandability.","tokens":3306,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMFT","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/GraalVM.java","name":"GraalVM.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/GraalVM.java","language":"java","measures":[{"metric":"complexity","value":"63","bestValue":false},{"metric":"code_smells","value":"13","bestValue":false},{"metric":"cognitive_complexity","value":"58","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"5.9","bestValue":false},{"metric":"lines","value":"359","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"120","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using meaningful variable names, modular methods, and proper exception handling. The use of annotations and static imports is appropriate. However, the code is quite complex and could benefit from additional comments to improve readability. The nested loops and conditionals could be simplified for better clarity.","tokens":2531,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKB","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/ConfigDescriptionBuildStep.java","name":"ConfigDescriptionBuildStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/ConfigDescriptionBuildStep.java","language":"java","measures":[{"metric":"complexity","value":"55","bestValue":false},{"metric":"code_smells","value":"9","bestValue":false},{"metric":"cognitive_complexity","value":"67","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"2.8","bestValue":false},{"metric":"lines","value":"284","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"134","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using constants, method descriptors, and try-catch blocks for error handling. The use of comments helps in understanding the purpose of certain sections. However, the code is quite complex and could benefit from further modularization to improve readability. Additionally, the use of nested try-catch blocks can make the code harder to follow.","tokens":2453,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKH","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/NativeImageFeatureStep.java","name":"NativeImageFeatureStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/NativeImageFeatureStep.java","language":"java","measures":[{"metric":"complexity","value":"10","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"10","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"4.3","bestValue":false},{"metric":"lines","value":"192","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"67","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using private constructors for utility classes and deprecating old methods with proper documentation. The comments are clear and helpful. However, there are some minor issues like the use of magic strings (e.g., \"quarkus.\") and a TODO comment indicating potential improvements. Overall, the readability and quality are high.","tokens":1165,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMPA","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/configuration/PropertiesUtil.java","name":"PropertiesUtil.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/configuration/PropertiesUtil.java","language":"java","measures":[{"metric":"complexity","value":"26","bestValue":false},{"metric":"code_smells","value":"7","bestValue":false},{"metric":"cognitive_complexity","value":"42","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"19.6","bestValue":false},{"metric":"lines","value":"131","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"53","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear method names and concise logic. The use of streams and lambda expressions enhances readability. Exception handling is appropriately managed, and the class adheres to good object-oriented principles. However, the class could benefit from additional comments explaining the purpose of each method and the rationale behind certain design choices.","tokens":544,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMQ_","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/QuarkusBindException.java","name":"QuarkusBindException.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/QuarkusBindException.java","language":"java","measures":[{"metric":"complexity","value":"9","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"5.4","bestValue":false},{"metric":"lines","value":"50","bestValue":false},{"metric":"sqale_rating","value":"4.0","bestValue":false},{"metric":"statements","value":"13","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, with clear method names and a straightforward logic flow. The use of a volatile variable ensures thread safety. However, there is a minor issue with potential null pointer exceptions if ioThreadDetectors is not initialized before calling isBlockingAllowed(). Adding null checks or initializing the array would improve robustness.","tokens":339,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMQ4","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/BlockingOperationControl.java","name":"BlockingOperationControl.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/BlockingOperationControl.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"3","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"20","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"6","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-documented, concise, and follows standard Java conventions. The interface is clear in its purpose and the method names are self-explanatory. However, the class name could be more descriptive to improve readability.","tokens":301,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMQo","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/MockedThroughWrapper.java","name":"MockedThroughWrapper.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/MockedThroughWrapper.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"37.5","bestValue":false},{"metric":"lines","value":"14","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, uses clear and concise comments, and follows good naming conventions. The use of Optional for configuration items is appropriate. The annotations are used correctly, and the default values are well-defined. However, the class could benefit from additional validation or utility methods to enhance functionality.","tokens":433,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMQa","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/ApplicationConfig.java","name":"ApplicationConfig.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/ApplicationConfig.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"26.3","bestValue":false},{"metric":"lines","value":"32","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is clean, concise, and follows standard Java conventions. The use of annotations and static variables is appropriate. However, the class lacks comments explaining the purpose of the methods and variables, which could improve readability and maintainability.","tokens":291,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMQz","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/SnapStartRecorder.java","name":"SnapStartRecorder.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/SnapStartRecorder.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"6","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.3","bestValue":false},{"metric":"lines","value":"19","bestValue":false},{"metric":"sqale_rating","value":"4.0","bestValue":false},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using try-with-resources for InputStream. The methods are logically organized and the class adheres to the Single Responsibility Principle. However, there are some minor issues like potential redundancy in the findClass method and lack of detailed comments. Overall, the code is readable and maintainable.","tokens":866,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMTG","key":"quarkusio_quarkus:core/launcher/src/main/java/io/quarkus/launcher/RuntimeLaunchClassLoader.java","name":"RuntimeLaunchClassLoader.java","qualifier":"FIL","path":"core/launcher/src/main/java/io/quarkus/launcher/RuntimeLaunchClassLoader.java","language":"java","measures":[{"metric":"complexity","value":"16","bestValue":false},{"metric":"code_smells","value":"5","bestValue":false},{"metric":"cognitive_complexity","value":"11","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"4.9","bestValue":false},{"metric":"lines","value":"95","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"35","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows standard Java conventions. It includes meaningful comments that explain the purpose of various sections, which enhances readability. The use of descriptive variable names and clear separation of logic into different blocks is commendable. However, the nested class loader logic and exception handling could be simplified for better readability. Overall, it is a high-quality code with minor areas for improvement.","tokens":1449,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMTJ","key":"quarkusio_quarkus:core/launcher/src/main/java/io/quarkus/launcher/JBangIntegration.java","name":"JBangIntegration.java","qualifier":"FIL","path":"core/launcher/src/main/java/io/quarkus/launcher/JBangIntegration.java","language":"java","measures":[{"metric":"complexity","value":"24","bestValue":false},{"metric":"code_smells","value":"4","bestValue":false},{"metric":"cognitive_complexity","value":"25","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"14.5","bestValue":false},{"metric":"lines","value":"135","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"51","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper exception handling and resource management. The use of comments and Javadoc enhances readability. However, the method is quite long and could benefit from being broken down into smaller methods for better readability and maintainability. Additionally, the use of hardcoded strings and potential lack of null checks in some places could be improved.","tokens":811,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMTH","key":"quarkusio_quarkus:core/launcher/src/main/java/io/quarkus/launcher/QuarkusLauncher.java","name":"QuarkusLauncher.java","qualifier":"FIL","path":"core/launcher/src/main/java/io/quarkus/launcher/QuarkusLauncher.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"4","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"14.8","bestValue":false},{"metric":"lines","value":"65","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"26","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using try-with-resources for resource management. The comments are clear and provide a good understanding of the class\u0027s purpose. However, the code could benefit from breaking down the main method into smaller, more manageable methods to improve readability and maintainability.","tokens":761,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMTK","key":"quarkusio_quarkus:core/launcher/src/main/java/io/quarkus/launcher/LauncherShader.java","name":"LauncherShader.java","qualifier":"FIL","path":"core/launcher/src/main/java/io/quarkus/launcher/LauncherShader.java","language":"java","measures":[{"metric":"complexity","value":"10","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"19","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"6.7","bestValue":false},{"metric":"lines","value":"68","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"35","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as exception handling and resource cleanup in the finally block. The comments are clear and provide context. However, the use of reflection and the lack of detailed error handling could be improved for better readability and maintainability.","tokens":564,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMTI","key":"quarkusio_quarkus:core/launcher/src/main/java/io/quarkus/launcher/JBangDevModeLauncher.java","name":"JBangDevModeLauncher.java","qualifier":"FIL","path":"core/launcher/src/main/java/io/quarkus/launcher/JBangDevModeLauncher.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"25.8","bestValue":false},{"metric":"lines","value":"41","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"12","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and uses clear and concise documentation. The enum constants are self-explanatory, and the use of Javadoc comments enhances readability. However, the class lacks a package-level comment and could benefit from additional context or examples of usage.","tokens":308,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMSL","key":"quarkusio_quarkus:core/builder/src/main/java/io/quarkus/builder/ProduceFlag.java","name":"ProduceFlag.java","qualifier":"FIL","path":"core/builder/src/main/java/io/quarkus/builder/ProduceFlag.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"25.0","bestValue":false},{"metric":"lines","value":"17","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear separation of concerns and good use of encapsulation. The use of constants and helper methods enhances readability. The comments and Javadoc are helpful. However, the code could benefit from more consistent naming conventions and additional comments for complex logic. The use of generics and exception handling is appropriate, but some methods could be simplified for better readability.","tokens":2337,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMSG","key":"quarkusio_quarkus:core/builder/src/main/java/io/quarkus/builder/Json.java","name":"Json.java","qualifier":"FIL","path":"core/builder/src/main/java/io/quarkus/builder/Json.java","language":"java","measures":[{"metric":"complexity","value":"64","bestValue":false},{"metric":"code_smells","value":"4","bestValue":false},{"metric":"cognitive_complexity","value":"36","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"9.9","bestValue":false},{"metric":"lines","value":"358","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"111","bestValue":false}]}}}
{"score":"95","reasoning":"The code is well-structured, follows Java conventions, and includes detailed Javadoc comments for each constructor. The class is final, ensuring immutability, and the serialVersionUID is defined for serialization. The only minor issue is a slight inconsistency in the class name mentioned in the comments, which should be \u0027ChainBuildException\u0027 instead of \u0027DeployerChainBuildException\u0027.","tokens":587,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMSC","key":"quarkusio_quarkus:core/builder/src/main/java/io/quarkus/builder/ChainBuildException.java","name":"ChainBuildException.java","qualifier":"FIL","path":"core/builder/src/main/java/io/quarkus/builder/ChainBuildException.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"48.3","bestValue":false},{"metric":"lines","value":"50","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"3","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, with clear and concise methods. The use of final for immutability and the logical flow in the combine method are commendable. However, the class lacks comments explaining the purpose of each method and the overall class functionality, which could improve readability for other developers.","tokens":583,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMR6","key":"quarkusio_quarkus:core/builder/src/main/java/io/quarkus/builder/Produce.java","name":"Produce.java","qualifier":"FIL","path":"core/builder/src/main/java/io/quarkus/builder/Produce.java","language":"java","measures":[{"metric":"complexity","value":"13","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"7","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"56","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"20","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and includes Javadoc comments for public methods. The use of try-with-resources ensures proper resource management. The static block for initializing constants is clear and handles exceptions gracefully. However, the catch block could log the exception instead of ignoring it, and the class could benefit from more detailed comments.","tokens":592,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMR5","key":"quarkusio_quarkus:core/builder/src/main/java/io/quarkus/builder/Version.java","name":"Version.java","qualifier":"FIL","path":"core/builder/src/main/java/io/quarkus/builder/Version.java","language":"java","measures":[{"metric":"complexity","value":"4","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"2","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"16.7","bestValue":false},{"metric":"lines","value":"60","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"14","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, with clear separation of concerns and appropriate use of Java collections and ServiceLoader. The use of Javadoc comments enhances readability. However, the class could benefit from more detailed inline comments explaining the logic, and the use of Assert.checkNotNullParam could be replaced with standard Java Objects.requireNonNull for consistency.","tokens":965,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMRy","key":"quarkusio_quarkus:core/builder/src/main/java/io/quarkus/builder/BuildChain.java","name":"BuildChain.java","qualifier":"FIL","path":"core/builder/src/main/java/io/quarkus/builder/BuildChain.java","language":"java","measures":[{"metric":"complexity","value":"13","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"3","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"19.0","bestValue":false},{"metric":"lines","value":"108","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"29","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using final for constants, proper synchronization, and clear method names. The use of ConcurrentHashMap and Atomic variables indicates thread-safety considerations. However, the class is quite complex, and some comments explaining the logic would improve readability. The use of static imports for park and unpark without context might confuse some readers.","tokens":1485,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMR7","key":"quarkusio_quarkus:core/builder/src/main/java/io/quarkus/builder/Execution.java","name":"Execution.java","qualifier":"FIL","path":"core/builder/src/main/java/io/quarkus/builder/Execution.java","language":"java","measures":[{"metric":"complexity","value":"30","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"27","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"1.3","bestValue":false},{"metric":"lines","value":"182","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"74","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using final for constants and methods. The class is concise and the methods are self-explanatory. However, the closeFailed method is empty, which might indicate incomplete implementation or missing functionality. Additionally, the class lacks comments and documentation for methods, which could improve readability and maintainability.","tokens":399,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMR_","key":"quarkusio_quarkus:core/builder/src/main/java/io/quarkus/builder/Messages.java","name":"Messages.java","qualifier":"FIL","path":"core/builder/src/main/java/io/quarkus/builder/Messages.java","language":"java","measures":[{"metric":"complexity","value":"5","bestValue":false},{"metric":"code_smells","value":"3","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"28","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"4","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as encapsulation and immutability. The use of final classes and methods enhances security and performance. The static initialization block is clear and concise. However, the readability could be slightly improved with more comments explaining the purpose of certain methods and the overall design. The naming conventions are appropriate and consistent.","tokens":557,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMSK","key":"quarkusio_quarkus:core/builder/src/main/java/io/quarkus/builder/ConsumeFlags.java","name":"ConsumeFlags.java","qualifier":"FIL","path":"core/builder/src/main/java/io/quarkus/builder/ConsumeFlags.java","language":"java","measures":[{"metric":"complexity","value":"9","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"2","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"2.3","bestValue":false},{"metric":"lines","value":"58","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"12","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and includes detailed Javadoc comments. The use of assertions ensures that parameters are not null, enhancing robustness. The private method constructMessage is a good practice for message construction. However, the class name in the comments should be updated from DeploymentException to BuildException for consistency.","tokens":1018,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMSJ","key":"quarkusio_quarkus:core/builder/src/main/java/io/quarkus/builder/BuildException.java","name":"BuildException.java","qualifier":"FIL","path":"core/builder/src/main/java/io/quarkus/builder/BuildException.java","language":"java","measures":[{"metric":"complexity","value":"10","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"3","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"31.0","bestValue":false},{"metric":"lines","value":"104","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"25","bestValue":false}]}}}
{"score":"85","reasoning":"The code is concise and well-documented, making it easy to understand. The use of an enum for defining a flag is appropriate. However, the class is very minimal and could benefit from additional context or usage examples to improve clarity.","tokens":258,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMSI","key":"quarkusio_quarkus:core/builder/src/main/java/io/quarkus/builder/ConsumeFlag.java","name":"ConsumeFlag.java","qualifier":"FIL","path":"core/builder/src/main/java/io/quarkus/builder/ConsumeFlag.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"20.0","bestValue":false},{"metric":"lines","value":"12","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear method names and comments explaining the purpose of each method. The use of assertions and private helper methods enhances readability and maintainability. However, the class is quite large, which could be broken down into smaller classes or methods for better modularity. Overall, it demonstrates good coding practices and readability.","tokens":2672,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMRz","key":"quarkusio_quarkus:core/builder/src/main/java/io/quarkus/builder/BuildStepBuilder.java","name":"BuildStepBuilder.java","qualifier":"FIL","path":"core/builder/src/main/java/io/quarkus/builder/BuildStepBuilder.java","language":"java","measures":[{"metric":"complexity","value":"33","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"10","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"29.3","bestValue":false},{"metric":"lines","value":"265","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"74","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear separation of concerns and good use of encapsulation. The use of enums for levels is appropriate, and the methods are concise and to the point. The use of assertions ensures that necessary parameters are not null. However, the class lacks detailed comments and JavaDoc for methods, which could improve readability and maintainability.","tokens":749,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMRw","key":"quarkusio_quarkus:core/builder/src/main/java/io/quarkus/builder/diag/Diagnostic.java","name":"Diagnostic.java","qualifier":"FIL","path":"core/builder/src/main/java/io/quarkus/builder/diag/Diagnostic.java","language":"java","measures":[{"metric":"complexity","value":"13","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"4","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"98","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"34","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows good practices, and is easy to read. It uses meaningful variable names, proper encapsulation, and includes necessary overrides for equals, hashCode, and toString methods. The use of assertions and utility methods like Objects.hashCode adds to the robustness. However, the class lacks comments explaining the purpose of methods and the class itself, which could improve readability further.","tokens":477,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMRt","key":"quarkusio_quarkus:core/builder/src/main/java/io/quarkus/builder/ItemId.java","name":"ItemId.java","qualifier":"FIL","path":"core/builder/src/main/java/io/quarkus/builder/ItemId.java","language":"java","measures":[{"metric":"complexity","value":"10","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"3","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"47","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"8","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows Java conventions, and includes Javadoc comments for methods, enhancing readability. The use of interfaces and default methods is appropriate. However, the class could benefit from more detailed comments on the methods\u0027 parameters and potential edge cases.","tokens":384,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMRu","key":"quarkusio_quarkus:core/builder/src/main/java/io/quarkus/builder/BuildProvider.java","name":"BuildProvider.java","qualifier":"FIL","path":"core/builder/src/main/java/io/quarkus/builder/BuildProvider.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"53.3","bestValue":false},{"metric":"lines","value":"28","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using concurrent collections, atomic variables, and proper logging. The use of JSON builders for output is clean and readable. However, the class is quite large and could benefit from further modularization. Some methods could be broken down into smaller, more manageable pieces. Additionally, more comments could improve readability for future maintainers.","tokens":1426,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMR-","key":"quarkusio_quarkus:core/builder/src/main/java/io/quarkus/builder/BuildMetrics.java","name":"BuildMetrics.java","qualifier":"FIL","path":"core/builder/src/main/java/io/quarkus/builder/BuildMetrics.java","language":"java","measures":[{"metric":"complexity","value":"16","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"9","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"3.0","bestValue":false},{"metric":"lines","value":"169","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"59","bestValue":false}]}}}
{"score":"60","reasoning":"The code is concise and follows standard Java conventions, but it lacks meaningful comments and implementation details. The class and method names are clear, but the absence of logic in the execute method makes it difficult to assess the overall quality and readability.","tokens":246,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMRr","key":"quarkusio_quarkus:core/builder/src/main/java/io/quarkus/builder/FinalStep.java","name":"FinalStep.java","qualifier":"FIL","path":"core/builder/src/main/java/io/quarkus/builder/FinalStep.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"11","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"90","reasoning":"The code is concise, follows standard Java conventions, and is easy to read. The enum is well-defined with clear naming. However, the class-level Javadoc comment is empty, which slightly detracts from the overall quality.","tokens":232,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMSF","key":"quarkusio_quarkus:core/builder/src/main/java/io/quarkus/builder/Constraint.java","name":"Constraint.java","qualifier":"FIL","path":"core/builder/src/main/java/io/quarkus/builder/Constraint.java","language":"java","measures":[{"metric":"complexity","value":"0","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"10","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of comments, meaningful variable names, and modular methods. The use of Java collections and exception handling is appropriate. However, the class is quite large and complex, which can make it harder to maintain and understand. Some methods could be further broken down to improve readability.","tokens":4936,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMSA","key":"quarkusio_quarkus:core/builder/src/main/java/io/quarkus/builder/BuildChainBuilder.java","name":"BuildChainBuilder.java","qualifier":"FIL","path":"core/builder/src/main/java/io/quarkus/builder/BuildChainBuilder.java","language":"java","measures":[{"metric":"complexity","value":"90","bestValue":false},{"metric":"code_smells","value":"9","bestValue":false},{"metric":"cognitive_complexity","value":"129","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"14.1","bestValue":false},{"metric":"lines","value":"509","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"234","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-documented, concise, and follows good practices such as making the class abstract and preventing instantiation. The use of comments to explain the purpose and usage of the class is excellent. However, the class could benefit from additional context or examples of usage to improve clarity further.","tokens":351,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMR0","key":"quarkusio_quarkus:core/builder/src/main/java/io/quarkus/builder/item/EmptyBuildItem.java","name":"EmptyBuildItem.java","qualifier":"FIL","path":"core/builder/src/main/java/io/quarkus/builder/item/EmptyBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"40.0","bestValue":false},{"metric":"lines","value":"15","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"1","bestValue":false}]}}}
{"score":"85","reasoning":"The code is concise and well-documented, with clear comments explaining the purpose of the class. The use of abstract class and inheritance is appropriate. However, the class lacks implementation details and could benefit from additional context or methods to enhance its functionality and readability.","tokens":287,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMR1","key":"quarkusio_quarkus:core/builder/src/main/java/io/quarkus/builder/item/MultiBuildItem.java","name":"MultiBuildItem.java","qualifier":"FIL","path":"core/builder/src/main/java/io/quarkus/builder/item/MultiBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"28.6","bestValue":false},{"metric":"lines","value":"11","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is clean, well-documented, and follows standard Java conventions. The class is simple and serves its purpose as an abstract class extending BuildItem. However, it lacks any concrete implementation or additional context, which limits the ability to fully assess its quality and readability.","tokens":274,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMR2","key":"quarkusio_quarkus:core/builder/src/main/java/io/quarkus/builder/item/SimpleBuildItem.java","name":"SimpleBuildItem.java","qualifier":"FIL","path":"core/builder/src/main/java/io/quarkus/builder/item/SimpleBuildItem.java","language":"java","measures":[{"metric":"complexity","value":"1","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"28.6","bestValue":false},{"metric":"lines","value":"13","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"0","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as checking for generic types and ensuring the class is final. The comments are clear and provide useful context. However, the class could benefit from more detailed documentation on the constructor\u0027s purpose and potential use cases. Additionally, the error messages could be more descriptive to aid in debugging.","tokens":447,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMR3","key":"quarkusio_quarkus:core/builder/src/main/java/io/quarkus/builder/item/BuildItem.java","name":"BuildItem.java","qualifier":"FIL","path":"core/builder/src/main/java/io/quarkus/builder/item/BuildItem.java","language":"java","measures":[{"metric":"complexity","value":"3","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"2","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"28.6","bestValue":false},{"metric":"lines","value":"26","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"5","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of access modifiers, clear method documentation, and appropriate exception handling. The use of generics and type safety is also commendable. However, the code could benefit from additional comments explaining complex logic, and some methods are quite long, which can affect readability.","tokens":2680,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMSM","key":"quarkusio_quarkus:core/builder/src/main/java/io/quarkus/builder/BuildContext.java","name":"BuildContext.java","qualifier":"FIL","path":"core/builder/src/main/java/io/quarkus/builder/BuildContext.java","language":"java","measures":[{"metric":"complexity","value":"33","bestValue":false},{"metric":"code_smells","value":"4","bestValue":false},{"metric":"cognitive_complexity","value":"27","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"25.0","bestValue":false},{"metric":"lines","value":"282","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"92","bestValue":false}]}}}
{"score":"90","reasoning":"The code is clean, well-structured, and follows good practices such as immutability and proper use of equals and hashCode methods. The use of final keyword ensures immutability. The only minor issue is the lack of comments and documentation for the class and its methods, which could improve readability and maintainability.","tokens":337,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMR8","key":"quarkusio_quarkus:core/builder/src/main/java/io/quarkus/builder/location/Location.java","name":"Location.java","qualifier":"FIL","path":"core/builder/src/main/java/io/quarkus/builder/location/Location.java","language":"java","measures":[{"metric":"complexity","value":"5","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"1","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"28","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"4","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, follows good Java conventions, and includes clear documentation. The use of @FunctionalInterface is appropriate, and the default method provides a sensible implementation. The EMPTY constant is a useful addition. However, the class could benefit from additional comments on the EMPTY constant and the getId method for further clarity.","tokens":414,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMSB","key":"quarkusio_quarkus:core/builder/src/main/java/io/quarkus/builder/BuildStep.java","name":"BuildStep.java","qualifier":"FIL","path":"core/builder/src/main/java/io/quarkus/builder/BuildStep.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"44.4","bestValue":false},{"metric":"lines","value":"33","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear method documentation and appropriate use of Java collections. The use of assertions and exceptions enhances robustness. The naming conventions are consistent and meaningful. However, the code could benefit from additional comments within methods to explain complex logic, especially in the \u0027produce\u0027 method.","tokens":1062,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMSE","key":"quarkusio_quarkus:core/builder/src/main/java/io/quarkus/builder/BuildExecutionBuilder.java","name":"BuildExecutionBuilder.java","qualifier":"FIL","path":"core/builder/src/main/java/io/quarkus/builder/BuildExecutionBuilder.java","language":"java","measures":[{"metric":"complexity","value":"15","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"11","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"24.1","bestValue":false},{"metric":"lines","value":"117","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"29","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, with clear and concise methods, appropriate use of final for immutability, and good encapsulation. The naming conventions are consistent and meaningful. However, the class lacks comments and documentation, which could improve readability and maintainability.","tokens":418,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMRs","key":"quarkusio_quarkus:core/builder/src/main/java/io/quarkus/builder/StepInfo.java","name":"StepInfo.java","qualifier":"FIL","path":"core/builder/src/main/java/io/quarkus/builder/StepInfo.java","language":"java","measures":[{"metric":"complexity","value":"6","bestValue":false},{"metric":"code_smells","value":"0","bestValue":true},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"42","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"10","bestValue":false}]}}}
{"score":"90","reasoning":"The code is well-structured, with clear method documentation and appropriate use of Java collections and concurrency utilities. The class is final, indicating immutability, which is good practice. The use of generics and type safety is well-handled. However, the code could benefit from more detailed exception handling and possibly reducing the complexity of the closeAll method.","tokens":1255,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMRv","key":"quarkusio_quarkus:core/builder/src/main/java/io/quarkus/builder/BuildResult.java","name":"BuildResult.java","qualifier":"FIL","path":"core/builder/src/main/java/io/quarkus/builder/BuildResult.java","language":"java","measures":[{"metric":"complexity","value":"16","bestValue":false},{"metric":"code_smells","value":"6","bestValue":false},{"metric":"cognitive_complexity","value":"19","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"22.1","bestValue":false},{"metric":"lines","value":"138","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"37","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured, with clear and concise methods and appropriate use of final for immutability. The class and method names are descriptive, enhancing readability. However, the class lacks comments explaining the purpose of each method and the overall functionality, which could improve maintainability and understanding for other developers.","tokens":502,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMSH","key":"quarkusio_quarkus:core/builder/src/main/java/io/quarkus/builder/Consume.java","name":"Consume.java","qualifier":"FIL","path":"core/builder/src/main/java/io/quarkus/builder/Consume.java","language":"java","measures":[{"metric":"complexity","value":"10","bestValue":false},{"metric":"code_smells","value":"1","bestValue":false},{"metric":"cognitive_complexity","value":"4","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"45","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"11","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as encapsulation and immutability. The use of final and static keywords is appropriate. The class and method names are clear and descriptive. However, the bitwise operations and the static block might be slightly complex for some readers. Overall, the code is readable and maintains a high level of quality.","tokens":558,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMSD","key":"quarkusio_quarkus:core/builder/src/main/java/io/quarkus/builder/ProduceFlags.java","name":"ProduceFlags.java","qualifier":"FIL","path":"core/builder/src/main/java/io/quarkus/builder/ProduceFlags.java","language":"java","measures":[{"metric":"complexity","value":"9","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"2","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"2.3","bestValue":false},{"metric":"lines","value":"58","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"12","bestValue":false}]}}}
{"score":"85","reasoning":"The code is clean, concise, and follows standard Java conventions. The use of \u0027volatile\u0027 for the instrumentation variable ensures thread safety. However, the class lacks comments and documentation, which could improve readability and maintainability. Additionally, there are no error handling mechanisms or validation checks.","tokens":290,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMSU","key":"quarkusio_quarkus:core/class-change-agent/src/main/java/io/quarkus/changeagent/ClassChangeAgent.java","name":"ClassChangeAgent.java","qualifier":"FIL","path":"core/class-change-agent/src/main/java/io/quarkus/changeagent/ClassChangeAgent.java","language":"java","measures":[{"metric":"complexity","value":"2","bestValue":false},{"metric":"code_smells","value":"2","bestValue":false},{"metric":"cognitive_complexity","value":"0","bestValue":true},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"0.0","bestValue":false},{"metric":"lines","value":"19","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"2","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using constants, utility methods, and clear separation of concerns. The use of comments and JavaDoc is helpful for understanding the purpose of methods and classes. However, the code is quite complex and lengthy, which can make it harder to follow. Some methods are very long and could benefit from further refactoring to improve readability.","tokens":6438,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMN7","key":"quarkusio_quarkus:core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ConfigDocItemFinder.java","name":"ConfigDocItemFinder.java","qualifier":"FIL","path":"core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ConfigDocItemFinder.java","language":"java","measures":[{"metric":"complexity","value":"121","bestValue":false},{"metric":"code_smells","value":"14","bestValue":false},{"metric":"cognitive_complexity","value":"261","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"4.2","bestValue":false},{"metric":"lines","value":"678","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"337","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of synchronization, clear method separation, and detailed comments. However, it is quite complex and lengthy, which can make it harder to read and understand quickly. The use of nested classes and multiple levels of locking adds to the complexity. Overall, it is high-quality code but could benefit from some simplification and modularization.","tokens":4727,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMK3","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/console/AeshConsole.java","name":"AeshConsole.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/console/AeshConsole.java","language":"java","measures":[{"metric":"complexity","value":"108","bestValue":false},{"metric":"code_smells","value":"31","bestValue":false},{"metric":"cognitive_complexity","value":"163","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"8.0","bestValue":false},{"metric":"lines","value":"654","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"304","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of annotations, clear method names, and logical flow. The use of comments helps in understanding the purpose of complex sections. However, the code is quite lengthy and could benefit from further modularization to improve readability. Additionally, some methods have a high level of nesting which can be simplified.","tokens":2559,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKN","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/RegisterForReflectionBuildStep.java","name":"RegisterForReflectionBuildStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/RegisterForReflectionBuildStep.java","language":"java","measures":[{"metric":"complexity","value":"41","bestValue":false},{"metric":"code_smells","value":"8","bestValue":false},{"metric":"cognitive_complexity","value":"50","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"4.5","bestValue":false},{"metric":"lines","value":"233","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"79","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using constants, static imports, and utility methods. The use of Javadoc comments and deprecation annotations is commendable. However, the code is quite complex and dense, which might make it harder to read and maintain. Some methods are lengthy and could benefit from further decomposition. Overall, the code quality is high but could be improved with better modularization.","tokens":6342,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMHp","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/util/AsmUtil.java","name":"AsmUtil.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/util/AsmUtil.java","language":"java","measures":[{"metric":"complexity","value":"160","bestValue":false},{"metric":"code_smells","value":"46","bestValue":false},{"metric":"cognitive_complexity","value":"93","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"10.5","bestValue":false},{"metric":"lines","value":"727","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"300","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of access modifiers, clear method names, and appropriate use of comments. The use of Java 8 features like streams and lambdas is effective. However, the class is quite large and complex, which can make it harder to maintain and understand. Some methods could be broken down into smaller, more manageable pieces to improve readability.","tokens":3587,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMMa","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/runner/bootstrap/AugmentActionImpl.java","name":"AugmentActionImpl.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/runner/bootstrap/AugmentActionImpl.java","language":"java","measures":[{"metric":"complexity","value":"43","bestValue":false},{"metric":"code_smells","value":"13","bestValue":false},{"metric":"cognitive_complexity","value":"44","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"4.7","bestValue":false},{"metric":"lines","value":"359","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"136","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of logging, exception handling, and modular methods. The use of comments helps in understanding the purpose of certain blocks. However, the complexity of nested try-catch blocks and the length of some methods could be improved for better readability.","tokens":1841,"sonarData":{"component":{"id":"AYvyvWT5pBbp5z45sMFO","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeImageBuildContainerRunner.java","name":"NativeImageBuildContainerRunner.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeImageBuildContainerRunner.java","language":"java","measures":[{"metric":"complexity","value":"21","bestValue":false},{"metric":"code_smells","value":"8","bestValue":false},{"metric":"cognitive_complexity","value":"33","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"3.1","bestValue":false},{"metric":"lines","value":"184","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"68","bestValue":false}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper exception handling, use of comments, and clear method separation. The use of external libraries is appropriate, and the logic is easy to follow. However, the code could benefit from additional comments in some complex sections and more consistent formatting to improve readability further.","tokens":2186,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMG8","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/dev/DevModeMain.java","name":"DevModeMain.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/dev/DevModeMain.java","language":"java","measures":[{"metric":"complexity","value":"31","bestValue":false},{"metric":"code_smells","value":"11","bestValue":false},{"metric":"cognitive_complexity","value":"41","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"5.8","bestValue":false},{"metric":"lines","value":"232","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"96"}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using meaningful variable names, proper indentation, and modular methods. It also makes good use of Java's standard libraries and annotations. However, the class is quite large and complex, which can make it harder to read and maintain. Breaking it down into smaller classes or methods could improve readability.","tokens":7804,"sonarData":{"component":{"id":"AYvyvWT7pBbp5z45sMLx","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/logging/LoggingResourceProcessor.java","name":"LoggingResourceProcessor.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/logging/LoggingResourceProcessor.java","language":"java","measures":[{"metric":"complexity","value":"93","bestValue":false},{"metric":"code_smells","value":"26","bestValue":false},{"metric":"cognitive_complexity","value":"93","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"2.1","bestValue":false},{"metric":"lines","value":"751","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"264"}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as using constants, static imports, and method extraction for readability. It includes detailed comments and handles various edge cases. However, it is quite lengthy and complex, which can make it harder to follow for someone unfamiliar with the codebase. The use of many nested classes and methods could be simplified for better readability.","tokens":7442,"sonarData":{"component":{"id":"AYvyvWT6pBbp5z45sMKT","key":"quarkusio_quarkus:core/deployment/src/main/java/io/quarkus/deployment/steps/MainClassBuildStep.java","name":"MainClassBuildStep.java","qualifier":"FIL","path":"core/deployment/src/main/java/io/quarkus/deployment/steps/MainClassBuildStep.java","language":"java","measures":[{"metric":"complexity","value":"83","bestValue":false},{"metric":"code_smells","value":"11","bestValue":false},{"metric":"cognitive_complexity","value":"115","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"6.8","bestValue":false},{"metric":"lines","value":"708","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"274"}]}}}
{"score":"85","reasoning":"The code is well-structured and follows good practices such as proper use of synchronization, clear separation of concerns, and detailed comments. The use of modern Java features like lambdas and streams is appropriate. However, the code is quite complex and lengthy, which might make it harder to understand for less experienced developers. Additionally, the use of deprecated classes like sun.misc.Signal could be improved.","tokens":3834,"sonarData":{"component":{"id":"AYvyvWT8pBbp5z45sMQs","key":"quarkusio_quarkus:core/runtime/src/main/java/io/quarkus/runtime/ApplicationLifecycleManager.java","name":"ApplicationLifecycleManager.java","qualifier":"FIL","path":"core/runtime/src/main/java/io/quarkus/runtime/ApplicationLifecycleManager.java","language":"java","measures":[{"metric":"complexity","value":"68","bestValue":false},{"metric":"code_smells","value":"26","bestValue":false},{"metric":"cognitive_complexity","value":"89","bestValue":false},{"metric":"files","value":"1","bestValue":false},{"metric":"comment_lines_density","value":"13.7","bestValue":false},{"metric":"lines","value":"458","bestValue":false},{"metric":"sqale_rating","value":"1.0","bestValue":true},{"metric":"statements","value":"175"}]}}}