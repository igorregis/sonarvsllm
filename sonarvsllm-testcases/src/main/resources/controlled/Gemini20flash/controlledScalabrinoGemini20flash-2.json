{"score":"90","reasoning":"The code is clear, concise, and well-structured. It tests a specific scenario with a clear expectation and uses standard testing practices. The use of try-catch for expected exceptions is good.","tokens":315,"name":"snippets/81.jsnp"}
{"score":"75","reasoning":"Good logic, but repetitive null setting and old address removal. Could be refactored for better readability. Handles different input cases well.","tokens":488,"name":"snippets/61.jsnp"}
{"score":"85","reasoning":"The code is well-structured and uses clear naming conventions. The logic is easy to follow, with specific dialect handling. The use of comments enhances understanding. The test cases are well defined.","tokens":684,"name":"snippets/89.jsnp"}
{"score":"75","reasoning":"Good overall structure, clear variable names, and comments explaining a TODO. However, the logic for condition retrieval is a bit complex and could be simplified. The use of iterators is a bit old style.","tokens":607,"name":"snippets/31.jsnp"}
{"score":"95","reasoning":"Very clear method, well-named variables and a straightforward implementation. Easy to understand.","tokens":290,"name":"snippets/67.jsnp"}
{"score":"65","reasoning":"The code is functional but verbose with excessive print statements. Bit manipulation is present, which can be hard to follow. The logic is not immediately clear without careful reading. The use of helper classes adds some abstraction but also indirection.","tokens":790,"name":"snippets/58.jsnp"}
{"score":"75","reasoning":"The code is a test case for Hibernate\u0027s orphan delete feature. It\u0027s mostly clear, but the multiple session creations and cache evictions make it a bit harder to follow. The logic is correct, but could be slightly more concise.","tokens":635,"name":"snippets/192.jsnp"}
{"score":"85","reasoning":"The code is well-structured and uses clear variable names. The test logic is easy to follow, although it relies on an indeterminate order which makes it slightly harder to grasp at first glance. The use of assertions is good.","tokens":683,"name":"snippets/181.jsnp"}
{"score":"75","reasoning":"The code is reasonably clear, using anonymous classes for HqlExecutor and ResultChecker. The test logic is straightforward, checking the results of a HQL query. However, the nested casts and multiple assertions make it slightly harder to follow at first glance.","tokens":600,"name":"snippets/98.jsnp"}
{"score":"90","reasoning":"Clear constructor, well-defined function registrations using SQLFunctionTemplate. Easy to understand purpose and structure.","tokens":417,"name":"snippets/21.jsnp"}
{"score":"75","reasoning":"The code uses an anonymous class for integration, which is a bit verbose but acceptable. The logic is clear, prepending a custom listener. The repeated integrate method is slightly redundant but not a major issue.","tokens":424,"name":"snippets/174.jsnp"}
{"score":"85","reasoning":"The code is well-structured and easy to follow. It uses clear method names and string literals for SQL queries. The test method is concise and focused on asserting no loss. The SQL queries are complex but readable.","tokens":789,"name":"snippets/101.jsnp"}
{"score":"85","reasoning":"Clear logic with handling of composite keys and dialect support. Uses helper methods effectively. Minor complexity with nested if-else.","tokens":423,"name":"snippets/112.jsnp"}
{"score":"75","reasoning":"Code is reasonably clear, with good use of descriptive variable names. Logic flow is easy to follow. Some parts could be more concise, but overall it\u0027s understandable.","tokens":555,"name":"snippets/170.jsnp"}
{"score":"85","reasoning":"Clear method, well-structured, and easy to follow. Uses descriptive names. Minor redundancy in persister class setting.","tokens":594,"name":"snippets/146.jsnp"}
{"score":"75","reasoning":"The code is a test case, it\u0027s readable but the long names make it a bit verbose. The logic is clear, checking history of an entity.","tokens":545,"name":"snippets/186.jsnp"}
{"score":"90","reasoning":"The code is well-structured and easy to follow. It tests cache configurations using properties. Assertions are clear and verify the expected behavior. The test method name is descriptive.","tokens":702,"name":"snippets/131.jsnp"}
{"score":"90","reasoning":"Clear and concise code. Uses standard configuration patterns. Easy to understand the purpose of each line. Good use of constants.","tokens":356,"name":"snippets/191.jsnp"}
{"score":"90","reasoning":"Clear test case, easy to understand. Uses standard hibernate operations. Good naming.","tokens":261,"name":"snippets/133.jsnp"}
{"score":"90","reasoning":"Clear test case, well-structured, good use of assertions, easy to understand the logic and purpose. Covers different dialect scenarios.","tokens":535,"name":"snippets/57.jsnp"}
{"score":"90","reasoning":"Clear, concise, and handles potential IOException gracefully. Good use of null check and try-catch.","tokens":241,"name":"snippets/150.jsnp"}
{"score":"85","reasoning":"Clear method with good variable names and comments. Logic is easy to follow, handling different delete scenarios. Some complexity with optimistic locking but well managed.","tokens":560,"name":"snippets/106.jsnp"}
{"score":"90","reasoning":"Clear logic, good comments, easy to follow control flow, well-named variables, and handles buffering correctly.","tokens":437,"name":"snippets/151.jsnp"}
{"score":"90","reasoning":"Clear test case, easy to follow logic, good use of assertions, and meaningful variable names. The code is well-structured and the purpose is easily understood.","tokens":604,"name":"snippets/90.jsnp"}
{"score":"75","reasoning":"Good use of try-catch for exception handling, clear test logic, and use of comments. However, the nested anonymous class and manual SQL query make it slightly harder to follow.","tokens":541,"name":"snippets/93.jsnp"}
{"score":"85","reasoning":"Clear use of anonymous thread for test execution. Inlining comment is slightly confusing but overall easy to follow.","tokens":301,"name":"snippets/73.jsnp"}
{"score":"85","reasoning":"The code is clear and well-structured, using descriptive variable names and assertions. It tests historical data retrieval effectively. The use of helper methods like \u0027makeSet\u0027 enhances readability.","tokens":533,"name":"snippets/166.jsnp"}
{"score":"40","reasoning":"The code is hard to read due to nested ternary operators and complex boolean logic. It could be simplified for better understanding and maintainability.","tokens":367,"name":"snippets/36.jsnp"}
{"score":"75","reasoning":"The code is reasonably clear, calculating points on a rectangle\u0027s edges. However, the magic number 5 and the lack of comments explaining the point order reduce readability.","tokens":379,"name":"snippets/153.jsnp"}
{"score":"90","reasoning":"Clear constructor, well-organized type and function registrations. Easy to understand the purpose and logic. Good use of constants and standard types.","tokens":569,"name":"snippets/20.jsnp"}
{"score":"85","reasoning":"Clear method name and comments. Uses well-defined methods. Logic is straightforward, handling early inserts and shared cache updates. Easy to follow.","tokens":398,"name":"snippets/103.jsnp"}
{"score":"75","reasoning":"Good structure, clear variable names, and logic is easy to follow. However, nested loops and type casting could be improved for better readability.","tokens":439,"name":"snippets/50.jsnp"}
{"score":"65","reasoning":"The code is a test case with multiple steps, involving database operations and listener checks. It\u0027s moderately complex due to the nested logic and object interactions, but the naming is relatively clear.","tokens":786,"name":"snippets/140.jsnp"}
{"score":"75","reasoning":"Good use of instanceof and clear logic for adding/removing listeners based on stereotype changes. Could benefit from more descriptive variable names.","tokens":388,"name":"snippets/47.jsnp"}
{"score":"85","reasoning":"Code is well-structured and easy to follow. It handles different scenarios for discriminator columns and values. Good use of annotations and clear logic flow. Minor improvements could be made in variable naming.","tokens":558,"name":"snippets/28.jsnp"}
{"score":"75","reasoning":"The code is relatively clear, using anonymous classes for executors and checkers. It tests lazy loading, which is good. However, the nested casts and assertions make it a bit verbose and harder to follow at first glance.","tokens":630,"name":"snippets/96.jsnp"}
{"score":"90","reasoning":"Standard equals method implementation, clear logic, good use of null checks and instanceof. Easy to understand.","tokens":304,"name":"snippets/60.jsnp"}
{"score":"95","reasoning":"Clear, concise equals method. Handles null, type check, and super equality. Very readable.","tokens":311,"name":"snippets/39.jsnp"}
{"score":"85","reasoning":"The code is well-structured and uses clear naming conventions. It tests Hibernate queries using both Criteria and HQL, with a ResultChecker for validation. The logic is easy to follow, although it involves multiple nested anonymous classes.","tokens":760,"name":"snippets/99.jsnp"}
{"score":"85","reasoning":"Clear logic, uses helper methods effectively, handles empty/single/multiple cases well. Good readability.","tokens":325,"name":"snippets/193.jsnp"}
{"score":"75","reasoning":"The code is mostly clear, setting up properties and testing a method. However, duplicate keys in props.put are confusing and the test is too specific to the \u0027create\u0027 property.","tokens":499,"name":"snippets/35.jsnp"}
{"score":"75","reasoning":"Good use of descriptive variable names. Logic is clear, although nested loops could be slightly improved. The use of Vector and Enumeration is a bit outdated.","tokens":451,"name":"snippets/46.jsnp"}
{"score":"75","reasoning":"The code is mostly clear, using try-finally for barrier sync.  Some commented-out code reduces readability slightly.  The use of log.tracef is good for debugging.  The core logic is easy to follow.","tokens":539,"name":"snippets/172.jsnp"}
{"score":"75","reasoning":"The code is mostly readable, using clear variable names and standard testing practices. However, the large conditional statement and multiple queries could be simplified for better clarity. The use of Hibernate specific methods is also a bit dense.","tokens":937,"name":"snippets/68.jsnp"}
{"score":"40","reasoning":"Code is hard to read due to nested calls and casting. It uses internal APIs, making it brittle. The try-catch block is too broad and ignores exceptions. SQL statements are hardcoded.","tokens":438,"name":"snippets/100.jsnp"}
{"score":"75","reasoning":"Good use of descriptive variable names and clear control flow. The code is easy to follow, with a clear separation of concerns. The use of comments is helpful, but the commented-out cast is a bit confusing.","tokens":394,"name":"snippets/116.jsnp"}
{"score":"75","reasoning":"The code is concise and easy to follow. The logic is straightforward, with a clear if condition and a return statement. The comment explains the purpose of the reassociate call.","tokens":275,"name":"snippets/65.jsnp"}
{"score":"90","reasoning":"Clear test setup using JPA. Easy to understand, well-structured, and uses descriptive names. Good use of annotations.","tokens":269,"name":"snippets/168.jsnp"}
{"score":"85","reasoning":"The code is well-structured and easy to follow. It uses clear variable names and comments. The test logic is straightforward, covering insertion, retrieval, and querying of enum values. The use of annotations is also clear.","tokens":632,"name":"snippets/136.jsnp"}
{"score":"90","reasoning":"The code is a unit test, well-structured and easy to understand. It tests SQL query generation with a limit clause. The test method name and assertions are clear.","tokens":424,"name":"snippets/23.jsnp"}
{"score":"75","reasoning":"Good use of comments and logging. Handles resource loading with multiple classloaders. Could be slightly improved with more descriptive variable names and potentially a more robust error handling strategy.","tokens":493,"name":"snippets/7.jsnp"}
{"score":"85","reasoning":"Clear method with good javadoc. Uses descriptive variable names and has a straightforward control flow. Easy to understand the logic and purpose.","tokens":579,"name":"snippets/102.jsnp"}
{"score":"85","reasoning":"Clear logic with nested ifs, uses descriptive variable names, and handles different cases for entity key generation. Easy to follow the flow.","tokens":464,"name":"snippets/198.jsnp"}
{"score":"85","reasoning":"Clear logic, good use of constants, and exception handling. The code is well-structured and easy to follow. Minor improvement could be made with more descriptive variable names.","tokens":552,"name":"snippets/152.jsnp"}
{"score":"90","reasoning":"The code is well-structured and easy to follow. It uses clear variable names and assertions, making it straightforward to understand the test logic. The use of helper methods like buildContext also improves readability.","tokens":788,"name":"snippets/135.jsnp"}
{"score":"90","reasoning":"Clear and concise toString method using StringBuilder. Handles null region gracefully. Easy to understand and maintain.","tokens":353,"name":"snippets/64.jsnp"}
{"score":"95","reasoning":"The code is very readable. It registers SQL functions with clear names and types. The use of StandardSQLFunction and NoArgSQLFunction enhances clarity. The code is well-structured and easy to understand.","tokens":731,"name":"snippets/18.jsnp"}
{"score":"90","reasoning":"Clear, well-documented equals method. Handles null and type checks correctly. Logic is straightforward and easy to follow. Minor improvement could be early exit on day comparison.","tokens":454,"name":"snippets/42.jsnp"}
{"score":"75","reasoning":"Code is reasonably clear, but nested ifs could be simplified using a switch or enum. The logic is straightforward to follow, but could be more concise.","tokens":413,"name":"snippets/157.jsnp"}
{"score":"85","reasoning":"Good use of anonymous classes for test setup, clear test logic, and easy to follow. Minor points for verbosity in string array.","tokens":377,"name":"snippets/12.jsnp"}
{"score":"85","reasoning":"Clear test case using Hibernate. Good use of distinct and join. Minor issue with unchecked suppression, but overall easy to understand.","tokens":342,"name":"snippets/92.jsnp"}
{"score":"90","reasoning":"Clear test method, good use of assertions, easy to understand the purpose and flow. No complex logic, well-structured.","tokens":525,"name":"snippets/176.jsnp"}
{"score":"85","reasoning":"The code is well-structured and the comments explain the purpose and context of the test. The test case is clear and easy to follow, with a good use of descriptive variable names. The test logic is straightforward and the use of try-catch block is appropriate.","tokens":616,"name":"snippets/175.jsnp"}
{"score":"90","reasoning":"Clear method signature, good use of descriptive variable names, and a concise implementation. The TODO comment indicates potential future enhancements.","tokens":281,"name":"snippets/55.jsnp"}
{"score":"85","reasoning":"The code is well-structured and easy to follow. It tests a TernaryMapEntity with clear assertions. The use of descriptive variable names and comments enhances readability. The test logic is straightforward.","tokens":592,"name":"snippets/167.jsnp"}
{"score":"85","reasoning":"The code is well-structured with clear if-else conditions, making it easy to follow the logic. Comments explain the purpose of each branch, enhancing readability. The method name is descriptive.","tokens":620,"name":"snippets/107.jsnp"}
{"score":"85","reasoning":"Clear logic, good use of logging and exception handling. Method name is descriptive. Minor improvements could be done on variable names.","tokens":469,"name":"snippets/183.jsnp"}
{"score":"85","reasoning":"The code is well-structured and easy to follow, using clear variable names and comments to explain each step. The use of transactions is also correct. However, the test logic is a bit verbose.","tokens":608,"name":"snippets/188.jsnp"}
{"score":"90","reasoning":"The code is very readable, well-structured, and easy to understand. It tests the trim function with different variations. The use of assertEquals makes the test cases clear.","tokens":623,"name":"snippets/26.jsnp"}
{"score":"85","reasoning":"Clear test case, good use of try-catch for exception handling, and assertion. Code is easy to follow and understand.","tokens":351,"name":"snippets/145.jsnp"}
{"score":"75","reasoning":"Code is relatively clear, with descriptive variable names. Logic is straightforward, involving setting a property, updating a snapshot, and a comparison. Could benefit from more comments.","tokens":340,"name":"snippets/104.jsnp"}
{"score":"85","reasoning":"The code is straightforward, reading paint properties from a stream. It\u0027s repetitive but clear. Good use of SerialUtilities.readPaint. No complex logic, easy to understand.","tokens":635,"name":"snippets/3.jsnp"}
{"score":"90","reasoning":"Clear method signature, good javadoc, and straightforward logic. Uses descriptive variable names and well-defined helper methods. Easy to understand the flow.","tokens":470,"name":"snippets/126.jsnp"}
{"score":"90","reasoning":"The code is very readable due to clear method names and a well-defined test structure. It\u0027s easy to understand the test\u0027s purpose and flow.","tokens":263,"name":"snippets/187.jsnp"}
{"score":"85","reasoning":"Clear method, good use of comments, easy to follow logic, standard java practices.","tokens":321,"name":"snippets/11.jsnp"}
{"score":"85","reasoning":"Clear method name and logic. Uses descriptive variable names. The code is easy to follow and understand. No complex logic or structures are present.","tokens":363,"name":"snippets/190.jsnp"}
{"score":"75","reasoning":"The code is a test method parsing HQL queries. It\u0027s mostly readable, but some commented-out lines and lack of context slightly reduce clarity. The core logic is straightforward.","tokens":695,"name":"snippets/85.jsnp"}
{"score":"85","reasoning":"Clear, well-structured code. Uses descriptive names and comments. The logic is easy to follow, registering different notation providers.","tokens":442,"name":"snippets/5.jsnp"}
{"score":"90","reasoning":"The code is well-structured and easy to follow. It uses clear variable names and assertions, making it straightforward to understand the test logic. The test cases are also well-defined and cover different scenarios.","tokens":581,"name":"snippets/88.jsnp"}
{"score":"90","reasoning":"The code is well-structured and easy to follow. It uses clear naming conventions and assertions, making its purpose readily understandable. The test case is comprehensive and covers multiple aspects of attribute overrides.","tokens":752,"name":"snippets/177.jsnp"}
{"score":"75","reasoning":"The code is relatively clear, testing a composite ID scenario with Hibernate. It uses SQL queries and session operations. However, the comments could be more descriptive, and the test logic is a bit verbose.","tokens":629,"name":"snippets/72.jsnp"}
{"score":"85","reasoning":"Clear logic, good variable names, and error handling. Easy to follow the field injection process. Minor improvements could be made in exception message formatting.","tokens":481,"name":"snippets/13.jsnp"}
{"score":"95","reasoning":"The code is very clear and easy to understand. It\u0027s a constructor that calls several registration methods, which is a common pattern. No complexity is present.","tokens":277,"name":"snippets/19.jsnp"}
{"score":"90","reasoning":"Clear test case, good naming, easy to understand the purpose and flow. Uses assertions effectively.","tokens":312,"name":"snippets/159.jsnp"}
{"score":"90","reasoning":"The code is well-structured, uses clear variable names, and follows a logical flow. It\u0027s easy to understand the test case and its purpose. The use of comments also aids comprehension.","tokens":550,"name":"snippets/82.jsnp"}
{"score":"75","reasoning":"Good use of comments explaining the logic. The code is a bit verbose with multiple nested if/else conditions, but overall it\u0027s understandable. The use of helper methods like Configuration.makeKey and KeyEventUtils.formatKeyStroke improves readability.","tokens":534,"name":"snippets/51.jsnp"}
{"score":"90","reasoning":"Clear test setup, well-structured with comments. Uses descriptive variable names and follows a logical flow. Easy to understand the purpose of each section.","tokens":577,"name":"snippets/189.jsnp"}
{"score":"85","reasoning":"The code is a unit test, using clear naming and assertions. It\u0027s easy to understand the purpose and logic. The use of chained method calls could be slightly improved for readability.","tokens":295,"name":"snippets/199.jsnp"}
{"score":"90","reasoning":"The code is well-structured and easy to follow. It tests entity binding properties with clear assertions. The use of descriptive variable names and comments enhances readability. The test case is focused and covers various aspects of the entity binding.","tokens":754,"name":"snippets/180.jsnp"}
{"score":"75","reasoning":"The code is well-structured and follows a clear logic, handling XML parsing and annotation creation. However, the method is quite long and could benefit from further decomposition into smaller, more focused functions to improve readability.","tokens":751,"name":"snippets/149.jsnp"}
{"score":"85","reasoning":"Good code, clear logic for validating parameter annotations. Uses descriptive variable names and error messages. Could benefit from a more functional approach but is readable.","tokens":527,"name":"snippets/14.jsnp"}
{"score":"85","reasoning":"Code is clear, uses descriptive names, and follows a logical flow. Casts are present but seem necessary. Method name is descriptive.","tokens":316,"name":"snippets/148.jsnp"}
{"score":"90","reasoning":"Clear method, good variable names, and comments. Logic is easy to follow. Handles null dataset and empty values correctly. Uses standard Java practices.","tokens":575,"name":"snippets/41.jsnp"}
{"score":"85","reasoning":"Clear structure, uses descriptive method names, easy to understand the purpose of the array. Minor improvement could be using a list instead of array.","tokens":323,"name":"snippets/156.jsnp"}
{"score":"90","reasoning":"Clear test case using Hibernate annotations. Easy to understand the purpose and flow. Good use of assertions. Minor improvement could be adding comments.","tokens":397,"name":"snippets/178.jsnp"}
{"score":"75","reasoning":"The code is moderately readable. It handles different cases for checking dirtiness, using instanceof, custom strategies, and instrumentation. The logic is clear but could be slightly simplified.","tokens":444,"name":"snippets/111.jsnp"}
{"score":"75","reasoning":"Good use of atomic operations and clear comments. The double loop with CAS is a bit complex but understandable. Read lock usage is correct.","tokens":432,"name":"snippets/62.jsnp"}
{"score":"85","reasoning":"The code is well-structured and uses clear naming conventions. It tests a specific scenario with Hibernate criteria. The use of anonymous classes makes it slightly harder to follow, but overall it\u0027s readable and understandable.","tokens":668,"name":"snippets/97.jsnp"}
{"score":"90","reasoning":"Clear test case, easy to understand the purpose and logic. Uses descriptive variable names and asserts the expected output.","tokens":410,"name":"snippets/24.jsnp"}
{"score":"85","reasoning":"Code is well-structured, uses clear method names, and leverages helper methods for UI elements. Readability is high due to consistent formatting and use of descriptive names. Minor improvements could include more comments.","tokens":496,"name":"snippets/158.jsnp"}
{"score":"75","reasoning":"The code is relatively straightforward, using a do-while loop for processing statements. The use of _tokenSet_6 and LA(1) suggests it\u0027s part of a parser, which might require domain knowledge to fully understand. Overall, it\u0027s readable but not trivial.","tokens":315,"name":"snippets/115.jsnp"}
{"score":"75","reasoning":"Code is relatively clear, using descriptive names. However, the multiple array accesses make it slightly harder to follow. Could benefit from a more object-oriented approach.","tokens":317,"name":"snippets/105.jsnp"}
{"score":"60","reasoning":"The code is somewhat readable but has a lot of repeated if statements. It could be improved by using a more efficient structure like a switch or a map to handle different model types. The logic is clear but verbose.","tokens":595,"name":"snippets/119.jsnp"}
{"score":"90","reasoning":"The code is clear, uses descriptive names, and tests a specific scenario with exceptions and timeouts. It\u0027s easy to understand the test\u0027s purpose and flow.","tokens":284,"name":"snippets/160.jsnp"}
{"score":"85","reasoning":"The code is well-structured and easy to follow. It uses clear variable names and comments. The test logic is straightforward, and the assertions are clear. The use of annotations is also well-defined.","tokens":652,"name":"snippets/138.jsnp"}
{"score":"90","reasoning":"Clear method signature, good comments, and standard loop pattern. Lazy event creation is a good practice. Easy to understand.","tokens":454,"name":"snippets/9.jsnp"}
{"score":"95","reasoning":"Very clear and concise code. Simple logic, easy to understand. Good use of boolean flags. Javadoc is helpful.","tokens":294,"name":"snippets/6.jsnp"}
{"score":"85","reasoning":"Clear test case with a nested class for verification. Logic is straightforward, using a stack for tree traversal. Good use of descriptive variable names and comments.","tokens":512,"name":"snippets/87.jsnp"}
{"score":"85","reasoning":"Clear logic, good use of variables, and concise exception handling. Minor improvement could be made with more descriptive variable names.","tokens":401,"name":"snippets/125.jsnp"}
{"score":"75","reasoning":"Code is moderately readable. Logic is a bit complex with multiple conditions and nested calls. Use of suffixes and alias counts adds to the cognitive load. Good use of StringBuilder.","tokens":649,"name":"snippets/34.jsnp"}
{"score":"95","reasoning":"Clear, concise method. Uses descriptive constants. Returns an unmodifiable set, good practice. Easy to understand.","tokens":380,"name":"snippets/16.jsnp"}
{"score":"90","reasoning":"Standard hashCode implementation, uses prime number and handles nulls. Easy to understand.","tokens":262,"name":"snippets/141.jsnp"}
{"score":"75","reasoning":"The code is functional and converts a long to a byte array. However, it uses bit shifts which are not immediately obvious. Could be improved with a loop for better readability.","tokens":458,"name":"snippets/113.jsnp"}
{"score":"90","reasoning":"Clear method with javadoc, simple logic, good use of try-catch for specific exceptions, easy to understand.","tokens":389,"name":"snippets/164.jsnp"}
{"score":"85","reasoning":"Code is well-structured and uses clear method names. Logic is easy to follow, with a few conditions. Readability is high.","tokens":333,"name":"snippets/184.jsnp"}
{"score":"85","reasoning":"Clear method with well-defined steps. Good use of try-catch for resource management. Logic is easy to follow, with helper methods for specific tasks. Parameters are well named.","tokens":432,"name":"snippets/33.jsnp"}
{"score":"75","reasoning":"Code is moderately readable. It uses anonymous classes which can be harder to follow. Logic is clear, creating a factory with custom TM lookup and cache manager. Good use of overrides.","tokens":430,"name":"snippets/132.jsnp"}
{"score":"65","reasoning":"The code uses nested if statements and instanceof checks, making it a bit verbose. The logic is somewhat clear but could be simplified using a more object-oriented approach or a strategy pattern.","tokens":570,"name":"snippets/43.jsnp"}
{"score":"75","reasoning":"Good use of early returns, clear logic flow, but could benefit from extracting the row retrieval logic into a separate method to avoid duplication.","tokens":412,"name":"snippets/10.jsnp"}
{"score":"75","reasoning":"The code is moderately readable. It uses clear variable names and follows a logical flow. The use of try-finally block is good for resource management. However, the nested anonymous class makes it slightly harder to follow.","tokens":476,"name":"snippets/173.jsnp"}
{"score":"90","reasoning":"Clear and concise code. It registers column types with their corresponding database types. Easy to understand and maintain.","tokens":464,"name":"snippets/25.jsnp"}
{"score":"85","reasoning":"The code is well-structured and easy to follow, using clear variable names and assertions. It tests a specific functionality related to entity loading and cascading. The use of helper classes like ExtraAssertions and LoadPlanTreePrinter enhances readability.","tokens":499,"name":"snippets/142.jsnp"}
{"score":"90","reasoning":"Clear method, well-structured, uses generics, standard JAXB operations, good variable names, easy to follow the logic.","tokens":362,"name":"snippets/194.jsnp"}
{"score":"40","reasoning":"The code is overly complex and hard to read. It mixes \u003d\u003d and .equals() inconsistently. The commented out date comparisons are concerning. The logic for byte array comparison is not optimal. Too many conditions make it hard to follow.","tokens":881,"name":"snippets/74.jsnp"}
{"score":"85","reasoning":"The code is well-structured and easy to follow. It tests filtering with HQL queries and subqueries. The use of comments and clear variable names enhances readability. The test cases are well-defined and cover different scenarios.","tokens":576,"name":"snippets/91.jsnp"}
{"score":"85","reasoning":"The code is well-structured and easy to follow. It uses clear variable names and comments to explain the logic. The test case is comprehensive and covers different scenarios. The use of Hibernate is also straightforward.","tokens":590,"name":"snippets/80.jsnp"}
{"score":"75","reasoning":"Good code, clear comments, and well-defined logic. The use of generics and try-finally blocks enhances robustness. The TODO comment highlights a potential optimization area. Overall, it\u0027s easy to understand.","tokens":570,"name":"snippets/110.jsnp"}
{"score":"90","reasoning":"Clear test case, well-structured with good use of assertions. Easy to understand the logic and purpose of the test. Uses a mock object effectively.","tokens":617,"name":"snippets/56.jsnp"}
{"score":"95","reasoning":"Clear, concise, and standard equals method implementation. Handles null and type checks correctly. Easy to understand.","tokens":389,"name":"snippets/114.jsnp"}
{"score":"85","reasoning":"Clear method with good use of try-finally for resource management. Uses a command pattern. Readability is high, logic is straightforward.","tokens":414,"name":"snippets/49.jsnp"}
{"score":"85","reasoning":"Clear method, good use of try-catch for resource release, null check is present, casting might be a bit verbose.","tokens":266,"name":"snippets/95.jsnp"}
{"score":"75","reasoning":"The code is reasonably clear, with comments explaining the logic. However, the double loop with similar logic is a bit redundant and could be refactored for better readability. The use of LOG is good.","tokens":609,"name":"snippets/27.jsnp"}
{"score":"85","reasoning":"Good use of try-catch blocks for error handling, clear logic for constructor selection and instantiation. Comments are present, making the code easy to follow.","tokens":512,"name":"snippets/2.jsnp"}
{"score":"85","reasoning":"Clear logic, good use of null checks, and comments explain the purpose. Minor improvement could be made in the todo section.","tokens":476,"name":"snippets/147.jsnp"}
{"score":"75","reasoning":"Good comments, clear variable names, and straightforward logic. However, the duplicated loop is a minor issue that could be improved with a refactor.","tokens":651,"name":"snippets/121.jsnp"}
{"score":"75","reasoning":"The code is repetitive but clear in its intent, testing different boolean array configurations with a transformer. The use of `buildBasicKey` and `CacheableResultTransformer.create` makes it slightly less readable without context.","tokens":586,"name":"snippets/59.jsnp"}
{"score":"90","reasoning":"Clear constructor, well-structured, uses descriptive variable names, and comments. Easy to understand the UI setup.","tokens":489,"name":"snippets/118.jsnp"}
{"score":"85","reasoning":"Good use of try-catch for exception handling, clear test case, and proper resource management. However, the nested anonymous class makes it slightly less readable.","tokens":422,"name":"snippets/94.jsnp"}
{"score":"90","reasoning":"Standard equals method implementation, checks for null and class equality, easy to follow logic.","tokens":344,"name":"snippets/169.jsnp"}
{"score":"90","reasoning":"The code is very readable, it uses clear variable names and comments to explain the purpose of the test cases. The test method name is also descriptive.","tokens":388,"name":"snippets/86.jsnp"}
{"score":"85","reasoning":"The code is well-structured and easy to follow. It includes comments explaining the purpose of the test and the different scenarios being tested. The use of descriptive variable names and clear method calls enhances readability. The test logic is straightforward and the assertions are easy to understand.","tokens":708,"name":"snippets/78.jsnp"}
{"score":"85","reasoning":"Clear method, good use of descriptive names, and comments explaining the sorting. Iterates through methods and fields, adding them to annotation lists. Easy to follow.","tokens":365,"name":"snippets/52.jsnp"}
{"score":"90","reasoning":"The code is well-structured and easy to follow. It uses clear variable names and comments to explain the purpose of each test case. The test cases are also well-defined and cover different scenarios.","tokens":723,"name":"snippets/79.jsnp"}
{"score":"85","reasoning":"The code is well-structured and easy to follow. It tests a refresh operation with different lock modes. The use of comments and clear variable names enhances readability. The test logic is straightforward.","tokens":523,"name":"snippets/69.jsnp"}
{"score":"90","reasoning":"Clear test method name and usage of anonymous class for test setup. Easy to understand the test\u0027s purpose.","tokens":289,"name":"snippets/53.jsnp"}
{"score":"85","reasoning":"Good test case, clear logic, descriptive names, and assertions. Easy to understand the purpose and flow. Minor improvement could be adding comments to explain the \u0027real cause\u0027 and \u0027not real cause\u0027 methods.","tokens":500,"name":"snippets/161.jsnp"}
{"score":"85","reasoning":"The code is concise and uses clear method names. It tests a specific functionality related to mod properties. The use of helper methods like makeSet and extractModProperties enhances readability.","tokens":284,"name":"snippets/165.jsnp"}
{"score":"90","reasoning":"Clear setup for a test case, using descriptive names. Easy to follow the object creation and relationships. Good use of transactions and session management.","tokens":594,"name":"snippets/76.jsnp"}
{"score":"75","reasoning":"Code is reasonably clear, uses descriptive names, and follows a logical flow. However, it relies on several external objects and methods, making it harder to understand in isolation. The use of \u0027Suffix\u0027 is a bit vague.","tokens":393,"name":"snippets/182.jsnp"}
{"score":"85","reasoning":"Clear logic with early returns, easy to follow. Uses enums well. Minor redundancy in checking NONE twice. Good use of logging and exceptions.","tokens":436,"name":"snippets/29.jsnp"}
{"score":"90","reasoning":"Clear, concise, and well-structured code. Uses constants for names, enhancing readability. The logic is straightforward and easy to follow.","tokens":404,"name":"snippets/171.jsnp"}
{"score":"90","reasoning":"Clear test case using JUnit. Easy to understand the flow and purpose. Good use of listeners and assertions.","tokens":314,"name":"snippets/124.jsnp"}
{"score":"85","reasoning":"The code is well-structured, uses clear variable names, and includes comments. It tests a specific naming strategy, making it easy to understand its purpose. The try-catch-finally block ensures proper resource management. The logic is straightforward and easy to follow.","tokens":591,"name":"snippets/137.jsnp"}
{"score":"90","reasoning":"Clear equals method, handles nulls correctly, good use of instanceof and casting. Easy to understand.","tokens":309,"name":"snippets/70.jsnp"}
{"score":"95","reasoning":"Very clear constructor, uses constants for parameters, easy to understand.","tokens":332,"name":"snippets/4.jsnp"}
{"score":"60","reasoning":"Code is doing cleanup of object relationships and database entities. It\u0027s a bit hard to follow the object graph and the order of operations. The merge and delete sequence is not very clear.","tokens":534,"name":"snippets/200.jsnp"}
{"score":"65","reasoning":"Complex nested if-else logic makes it hard to follow. Multiple calls to Model facade and helper methods obscure the intent. The code also contains commented out code and a TODO, which impacts readability.","tokens":609,"name":"snippets/155.jsnp"}
{"score":"85","reasoning":"The code is well-structured and uses clear variable names. It tests a specific scenario with comments explaining the purpose of each step. The use of try-catch and assertions makes the test logic easy to follow.","tokens":500,"name":"snippets/75.jsnp"}
{"score":"85","reasoning":"The code is well-structured and easy to follow. It uses clear variable names and comments. The logic is straightforward, involving database operations and assertions. The use of dialect-specific queries adds complexity but is handled reasonably well.","tokens":652,"name":"snippets/71.jsnp"}
{"score":"85","reasoning":"The code is well-structured and easy to follow. It tests a specific scenario with clear comments. The use of descriptive variable names and assertions enhances readability. The test logic is straightforward.","tokens":627,"name":"snippets/134.jsnp"}
{"score":"85","reasoning":"The code is concise and uses ternary operators effectively for null checks and initialization. It\u0027s easy to understand the intent of copying lists if they exist or using empty lists otherwise. Good use of generics.","tokens":379,"name":"snippets/196.jsnp"}
{"score":"75","reasoning":"The code is mostly readable, testing various HQL queries. However, the lack of assertions makes it harder to understand the expected behavior and purpose of each query. The repeated use of \u0027results\u0027 variable also reduces readability.","tokens":944,"name":"snippets/83.jsnp"}
{"score":"90","reasoning":"The code is well-structured and easy to follow. It tests the configuration of entity and collection regions with specific eviction strategies and parameters. The use of descriptive variable names and assertions enhances readability.","tokens":747,"name":"snippets/130.jsnp"}
{"score":"85","reasoning":"Clear test case using JPA criteria API. Demonstrates a correlated subquery. Good use of builder pattern. Easy to follow logic flow.","tokens":425,"name":"snippets/163.jsnp"}
{"score":"85","reasoning":"Clear logic, good comments explaining steps. Uses descriptive variable names. Minor complexity in the loop but overall easy to follow.","tokens":549,"name":"snippets/66.jsnp"}
{"score":"90","reasoning":"Clear constructor, well-defined listeners, and registry setup. Easy to follow logic and purpose.","tokens":473,"name":"snippets/139.jsnp"}
{"score":"85","reasoning":"The code is well-structured and easy to follow. It tests different cache modes using JPA and Hibernate. The assertions are clear and the logic is straightforward. However, the casting to AbstractQueryImpl and HibernateQuery might be a bit fragile.","tokens":826,"name":"snippets/162.jsnp"}
{"score":"85","reasoning":"Clear use of anonymous thread for test execution. Inlining comment is slightly confusing but overall easy to follow.","tokens":301,"name":"snippets/1.jsnp"}
{"score":"85","reasoning":"Clear logic, uses a switch for SQL states, good use of helper method. Handles NumberFormatException. Minor improvement: add comments for magic numbers.","tokens":453,"name":"snippets/22.jsnp"}
{"score":"75","reasoning":"The code is relatively clear, uses descriptive method names, and follows a straightforward logic. However, it relies heavily on a static Model facade, which might be a concern for testability and maintainability. The null return could also be problematic.","tokens":399,"name":"snippets/123.jsnp"}
{"score":"75","reasoning":"Good comments explain the logic. Uses Enumeration which is a bit old. Linear search with nested loop could be improved. Caching result is good.","tokens":509,"name":"snippets/44.jsnp"}
{"score":"90","reasoning":"Clear test case, easy to follow, uses descriptive names, and tests transaction behavior. Good use of assertions.","tokens":303,"name":"snippets/128.jsnp"}
{"score":"90","reasoning":"Clear method signature and concise logic. Uses descriptive names and delegates to another builder. Easy to understand.","tokens":290,"name":"snippets/143.jsnp"}
{"score":"90","reasoning":"Clear method signature and javadoc. Logic is straightforward with good use of constants. Minor TODO comment.","tokens":409,"name":"snippets/32.jsnp"}
{"score":"90","reasoning":"Clear test case, well-structured, easy to follow logic, good use of session and transactions, and proper cleanup. The test is focused and concise.","tokens":420,"name":"snippets/77.jsnp"}
{"score":"75","reasoning":"Good use of try-catch, clear variable names, and comments. Logic is a bit complex with nested ifs and while loop, could be simplified. Missing null check on getSectId return.","tokens":456,"name":"snippets/48.jsnp"}
{"score":"75","reasoning":"The code is mostly clear, but the nested if statements and multiple calls to normalizeIdentifierQuoting make it slightly harder to follow. The logic is a bit convoluted.","tokens":415,"name":"snippets/30.jsnp"}
{"score":"90","reasoning":"Clear method with javadoc, uses helper methods for serialization, easy to understand flow.","tokens":411,"name":"snippets/38.jsnp"}
{"score":"75","reasoning":"Code is relatively clear, using a switch for hex digits.  Naming conventions are a bit old style.  Error handling is present.  Overall, understandable but could be more modern.","tokens":572,"name":"snippets/117.jsnp"}
{"score":"85","reasoning":"Well-structured code with clear logic, good use of generics, and descriptive variable names. The comments are helpful, and the code is easy to follow. The use of trace logging is also a good practice.","tokens":669,"name":"snippets/84.jsnp"}
{"score":"65","reasoning":"Use of Vector is outdated, could use ArrayList. Logic is clear but could be more concise. Method name is ok. Null check is good.","tokens":344,"name":"snippets/120.jsnp"}
{"score":"75","reasoning":"Good use of loops and conditionals, but nested if-else makes it slightly harder to follow. Error handling is present. The code is mostly clear, but could benefit from some refactoring to improve readability.","tokens":534,"name":"snippets/15.jsnp"}
{"score":"85","reasoning":"The code is well-structured and easy to follow, with clear test steps and assertions. It tests transaction joining behavior. The use of descriptive variable names and comments enhances readability. However, the test is a bit long.","tokens":605,"name":"snippets/127.jsnp"}
{"score":"90","reasoning":"The code is clear and easy to understand. It prints SQL and suffixes for comparison. The use of StringHelper is also straightforward.","tokens":396,"name":"snippets/144.jsnp"}
{"score":"90","reasoning":"Clear test case, good use of try-catch for exception handling, and proper resource management with session close and rollback. Easy to understand the flow and purpose.","tokens":389,"name":"snippets/129.jsnp"}
{"score":"90","reasoning":"Clear, well-structured equals method. Handles nulls and type checks correctly. Iterates through data for comparison. Easy to understand.","tokens":494,"name":"snippets/40.jsnp"}
{"score":"85","reasoning":"The code is well-structured and easy to follow. It tests a specific scenario related to caching and natural IDs. The use of comments and descriptive variable names enhances readability. The test logic is clear and concise.","tokens":461,"name":"snippets/179.jsnp"}
{"score":"75","reasoning":"Code is moderately readable. Logic is somewhat complex with nested conditionals and object manipulations. Variable names are mostly descriptive. Exception handling is present. Could benefit from more comments.","tokens":636,"name":"snippets/109.jsnp"}
{"score":"65","reasoning":"The code is moderately readable. It uses SwingUtilities.invokeLater for UI updates, which is good. However, the comparison `eName \u003d\u003d \"incoming\"` is incorrect, should use `.equals()`. The logic is a bit complex with nested ifs and casts, and the TODO comment indicates potential issues.","tokens":561,"name":"snippets/154.jsnp"}
{"score":"75","reasoning":"The code is straightforward and easy to understand. It uses a static Vector, which is not ideal, but the logic is clear. The use of constants makes it readable.","tokens":453,"name":"snippets/45.jsnp"}
{"score":"85","reasoning":"Code is well-structured and easy to follow. Logic is clear, with good use of helper methods. Minor improvements could be made with more descriptive variable names.","tokens":447,"name":"snippets/122.jsnp"}
{"score":"75","reasoning":"Good use of iterators and string buffer. Logic is clear, though some parts could be extracted into helper methods for better readability. Method is synchronized which might be a performance concern.","tokens":472,"name":"snippets/8.jsnp"}
{"score":"75","reasoning":"Code is reasonably clear, with good use of descriptive variable names. Recursion is present, which might increase complexity. Logic is a bit nested but manageable. Overall, it\u0027s understandable with some effort.","tokens":549,"name":"snippets/197.jsnp"}
{"score":"75","reasoning":"The code is mostly clear, using descriptive names. The logic is straightforward, but the recursive call to getSqlTypeCode() within the method is confusing and likely an error. The exception handling is good.","tokens":395,"name":"snippets/37.jsnp"}
{"score":"85","reasoning":"Clear logic, easy to follow. Uses helper methods effectively. Minor improvement could be to use a map for annotation values.","tokens":492,"name":"snippets/195.jsnp"}
{"score":"90","reasoning":"The code is well-structured and easy to follow. It uses clear variable names and comments to explain the logic. The test case is comprehensive and covers different scenarios. The use of assertEquals makes the test easy to understand.","tokens":667,"name":"snippets/17.jsnp"}
{"score":"85","reasoning":"The code is clear and uses descriptive names. It tests revision counts for different entities. The use of assertEquals and Arrays.asList makes it easy to understand the expected results. It\u0027s well-formatted and easy to follow.","tokens":504,"name":"snippets/185.jsnp"}
{"score":"85","reasoning":"The code is well-structured with clear if-else conditions, handling different collection properties. It uses descriptive variable names and throws specific exceptions. The logic is easy to follow, making it highly readable.","tokens":788,"name":"snippets/108.jsnp"}
{"score":"95","reasoning":"Clear and concise toString method using StringBuilder for efficient string concatenation. Easy to understand and maintain.","tokens":353,"name":"snippets/63.jsnp"}
{"score":"85","reasoning":"Clear logic with instanceof checks and casting. Handles different test types well. Recursion for TestSuite is easy to follow. Good use of helper methods.","tokens":470,"name":"snippets/54.jsnp"}
